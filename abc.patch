commit 738d597814c0ec0124edfad3e7417f11be3c0f7b
Author: BinhNV <binhnv@exoplatform.com>
Date:   Mon Jul 16 17:48:04 2012 +0700

    add reference from user to books

diff --git a/src/main/java/exoplatform/BookStoreService.java b/src/main/java/exoplatform/BookStoreService.java
index c132cd9..0754c07 100644
--- a/src/main/java/exoplatform/BookStoreService.java
+++ b/src/main/java/exoplatform/BookStoreService.java
@@ -22,7 +22,6 @@ import java.util.List;
 
 import javax.jcr.Node;
 import javax.jcr.RepositoryException;
-import javax.jcr.Value;
 
 import org.exoplatform.services.cache.CacheService;
 import org.exoplatform.services.cache.ExoCache;
diff --git a/src/main/java/exoplatform/JCRDataStorage.java b/src/main/java/exoplatform/JCRDataStorage.java
index d7ba3f1..37addf1 100644
--- a/src/main/java/exoplatform/JCRDataStorage.java
+++ b/src/main/java/exoplatform/JCRDataStorage.java
@@ -144,6 +144,19 @@ public class JCRDataStorage {
     }
   }
   
+  public User getUser(String id) {
+    SessionProvider sProvider = SessionProvider.createSystemProvider();
+    try {
+      Node node = getNodeByPath(DEFAULT_PARENT_PATH + DEFAULT_PARENT_USER_PATH, sProvider);
+      return createUserByNode(node);
+    } catch (RepositoryException re) {
+      log.error("Can not find this user", re);
+      return null;
+    } finally {
+      sProvider.close();
+    }
+  }
+  
   /**
    * The function which add new book to workspace
    * 
@@ -560,4 +573,54 @@ public class JCRDataStorage {
     return null;
   }
   
+  /**
+   * 
+   * @param node
+   * @return
+   * @throws RepositoryException
+   */
+  private User createUserByNode(Node node) throws RepositoryException {
+    if (node != null) {
+      User user = new User();
+      try {
+        user.setUserId(Integer.valueOf(node.getName()));
+      } catch (RepositoryException re) {
+        log.error("Error in convert integer", re);
+        return null;
+      }
+      PropertyReader reader = new PropertyReader(node);
+      user.setUsername(reader.string(BookNodeTypes.EXO_USER_NAME));
+      user.setPassword(reader.string(BookNodeTypes.EXO_USER_PASSWORD));
+      user.setFullname(reader.string(BookNodeTypes.EXO_USER_FULLNAME));
+      user.setAddress(reader.string(BookNodeTypes.EXO_USER_ADDRESS));
+      user.setPhone(reader.string(BookNodeTypes.EXO_USER_PHONE));
+      return user;
+    }
+    return null;
+  }
+  
+  /**
+   * 
+   * @param node
+   * @return
+   * @throws RepositoryException
+   */
+  private Author createAuthorByNode(Node node) throws RepositoryException {
+    if (node != null) {
+      Author author = new Author();
+      try {
+        author.setAuthorId(Integer.valueOf(node.getName()));
+      } catch (RepositoryException re) {
+        log.error("Error in convert integer", re);
+        return null;
+      }
+      PropertyReader reader = new PropertyReader(node);
+      author.setName(reader.string(BookNodeTypes.EXO_AUTHOR_NAME));
+      author.setPhone(reader.string(BookNodeTypes.EXO_AUTHOR_PHONE));
+      author.setAddress(reader.string(BookNodeTypes.EXO_AUTHOR_ADDRESS));
+      return author;
+    }
+    return null;
+  }
+  
 }
