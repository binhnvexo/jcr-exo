commit f8cc23e632d47b4f9175d2fedb64e636ccb786e8
Author: BinhNV <binhnv@exoplatform.com>
Date:   Mon Jul 16 16:44:58 2012 +0700

    commit after completed 3 table with multi-refer

diff --git a/jcr_exo_20120715.patch b/jcr_exo_20120715.patch
new file mode 100644
index 0000000..57888dd
--- /dev/null
+++ b/jcr_exo_20120715.patch
@@ -0,0 +1,695 @@
+diff --git a/src/main/java/exoplatform/BookNodeTypes.java b/src/main/java/exoplatform/BookNodeTypes.java
+index 058d142..1cc8a6a 100644
+--- a/src/main/java/exoplatform/BookNodeTypes.java
++++ b/src/main/java/exoplatform/BookNodeTypes.java
+@@ -32,8 +32,6 @@ public interface BookNodeTypes {
+   public static final String EXO_BOOK_CATEGORY = "exostore:bookcategory";
+   /* exostore:bookcontent is a property of exostore:book */
+   public static final String EXO_BOOK_CONTENT = "exostore:bookcontent";
+-  /* exostore:bookcontent is a property of exostore:book */
+-  public static final String EXO_BOOK_AUTHOR = "exostore:author";
+   
+   /* define parent node of author */
+   public static final String EXO_AUTHOR = "exostore:author";
+diff --git a/src/main/java/exoplatform/BookStoreService.java b/src/main/java/exoplatform/BookStoreService.java
+index 0b117f7..5c265d5 100644
+--- a/src/main/java/exoplatform/BookStoreService.java
++++ b/src/main/java/exoplatform/BookStoreService.java
+@@ -17,9 +17,9 @@
+ package exoplatform;
+ 
+ import java.io.Serializable;
++import java.util.ArrayList;
+ import java.util.List;
+ 
+-import javax.jcr.Node;
+ import javax.jcr.RepositoryException;
+ 
+ import org.exoplatform.services.cache.CacheService;
+@@ -33,6 +33,7 @@ import exoplatform.entity.Author;
+ import exoplatform.entity.Book;
+ import exoplatform.entity.Book.CATEGORY;
+ import exoplatform.exception.DuplicateBookException;
++import exoplatform.utils.Utils;
+ 
+ /**
+  * Created by The eXo Platform SAS
+@@ -71,15 +72,14 @@ public class BookStoreService implements Startable {
+   public void start() {
+     jcrDataStorage.init();
+ //    List<Book> books = new ArrayList<Book>(); 
+-    try {
+-      Node authorNode = addAuthor("Conan Doyle", "England", "123456789");
+-      addBook("The Mask", CATEGORY.NOVEL, "Test", authorNode);
+-    } catch (DuplicateBookException e) {
+-      // TODO Auto-generated catch block
+-      e.printStackTrace();
+-    }
+-//    addMultiBook();
+-//    addMultiAuthor();
++//    try {
++//      addBook("The Mask", CATEGORY.NOVEL, "Test");
++//    } catch (DuplicateBookException e) {
++//      // TODO Auto-generated catch block
++//      e.printStackTrace();
++//    }
++    addMultiBook();
++    addMultiAuthor();
+ //    books = searchBookByNameLikeXPath("Holme");
+ //    if (books != null && books.size() > 0) {
+ //      for (Book book : books) {
+@@ -109,9 +109,9 @@ public class BookStoreService implements Startable {
+    * @return
+    * @throws DuplicateBookException
+    */
+-  public Book addBook(String bookName, CATEGORY category, String content, Node node) throws DuplicateBookException {
++  public Book addBook(String bookName, CATEGORY category, String content) throws DuplicateBookException {
+     Book book = new Book(bookName, category, content);
+-    return jcrDataStorage.addBook(book, node);
++    return jcrDataStorage.addBook(book);
+   }
+   
+   /**
+@@ -121,7 +121,7 @@ public class BookStoreService implements Startable {
+    * @param authorPhone
+    * @return
+    */
+-  public Node addAuthor(String authorName, String authorAddress, String authorPhone) {
++  public Author addAuthor(String authorName, String authorAddress, String authorPhone) {
+     Author author = new Author(authorName, authorAddress, authorPhone);
+     return jcrDataStorage.addAuthor(author);
+   }
+@@ -142,16 +142,16 @@ public class BookStoreService implements Startable {
+    * This function support for add multi book to datastorage
+    */
+   public void addMultiBook() {
+-//    try {
+-//      addBook("Shelock Holme", CATEGORY.NOVEL, "The sign of the Four");
+-//      addBook("Alice in wonder land", CATEGORY.COMICS, "Alice in wonder land");
+-//      addBook("Seal team six", CATEGORY.NOVEL, "Seal team six");
+-//      addBook("Hibernate in action", CATEGORY.TECHNICAL, "Hibernate");
+-//      addBook("Napoleon", CATEGORY.HISTORY, "Napoleon");
+-//      addBook("Jouney to the West", CATEGORY.COMICS, "Jouney to the West");
+-//    } catch (DuplicateBookException de) {
+-//      log.error("Duplicate book", de);
+-//    }
++    try {
++      addBook("Shelock Holme", CATEGORY.NOVEL, "The sign of the Four");
++      addBook("Alice in wonder land", CATEGORY.COMICS, "Alice in wonder land");
++      addBook("Seal team six", CATEGORY.NOVEL, "Seal team six");
++      addBook("Hibernate in action", CATEGORY.TECHNICAL, "Hibernate");
++      addBook("Napoleon", CATEGORY.HISTORY, "Napoleon");
++      addBook("Jouney to the West", CATEGORY.COMICS, "Jouney to the West");
++    } catch (DuplicateBookException e) {
++      e.printStackTrace();
++    }
+   } 
+   
+   /**
+diff --git a/src/main/java/exoplatform/JCRDataStorage.java b/src/main/java/exoplatform/JCRDataStorage.java
+index e7fba58..ef23941 100644
+--- a/src/main/java/exoplatform/JCRDataStorage.java
++++ b/src/main/java/exoplatform/JCRDataStorage.java
+@@ -147,7 +147,10 @@ public class JCRDataStorage {
+    * @return Book
+    * @throws DuplicateBookException
+    */
+-  public Book addBook(Book book, Node node) throws DuplicateBookException {
++  public Book addBook(Book book) throws DuplicateBookException {
++    System.out.println("+ ========================================================================== +");
++    System.out.println("+                         add book function                                  +");
++    System.out.println("+ ========================================================================== +");
+     SessionProvider sProvider = SessionProvider.createSystemProvider();
+     /* Check exist of book */
+     if (isExistBookName(book.getName(), sProvider)) {
+@@ -160,24 +163,32 @@ public class JCRDataStorage {
+     try {
+       /* execute set data to node and save to workspace */
+       Node parentNode = getNodeByPath(DEFAULT_PARENT_PATH + DEFAULT_PARENT_BOOK_PATH, sProvider);
++      System.out.println("+ ========================================================================== +");
++      System.out.println("+                         " + parentNode.getPath() + "                       +");
++      System.out.println("+ ========================================================================== +");
+       Node bookNode = parentNode.addNode("" + book.getId(), BookNodeTypes.EXO_BOOK);
+       bookNode.setProperty(BookNodeTypes.EXO_BOOK_NAME, book.getName());
+       bookNode.setProperty(BookNodeTypes.EXO_BOOK_CATEGORY, Utils.bookCategoryEnumToString(book.getCategory()));
+       bookNode.setProperty(BookNodeTypes.EXO_BOOK_CONTENT, book.getContent());
+-      bookNode.setProperty(BookNodeTypes.EXO_BOOK_AUTHOR, node);
+       parentNode.getSession().save();
+       return book;
+     } catch (PathNotFoundException e) {
++      System.out.println("+ ========================================================================== +");
++      System.out.println("+                         Path not found exception                           +");
++      System.out.println("+ ========================================================================== +");
+       return null;
+     } catch (RepositoryException e) {
+       log.error("Failed to add book", e);
++      System.out.println("+ ========================================================================== +");
++      System.out.println("+                              Repository exception                          +");
++      System.out.println("+ ========================================================================== +");
+       return null;
+     } finally {
+       sProvider.close();
+     }
+   }
+   
+-  public Node addAuthor(Author author) {
++  public Author addAuthor(Author author) {
+     SessionProvider sProvider = SessionProvider.createSystemProvider();
+     author.setId(Utils.authorId++);
+     try {
+@@ -187,7 +198,7 @@ public class JCRDataStorage {
+       authorNode.setProperty(BookNodeTypes.EXO_AUTHOR_ADDRESS, author.getAddress());
+       authorNode.setProperty(BookNodeTypes.EXO_AUTHOR_PHONE, author.getPhone());
+       parentNode.getSession().save();
+-      return authorNode;
++      return author;
+     } catch (RepositoryException re) {
+       log.error("Failed to add author", re);
+       return null;
+diff --git a/src/main/resources/conf/portal/nodetypes.xml b/src/main/resources/conf/portal/nodetypes.xml
+index fba444b..6f40180 100644
+--- a/src/main/resources/conf/portal/nodetypes.xml
++++ b/src/main/resources/conf/portal/nodetypes.xml
+@@ -4,7 +4,6 @@
+ 	<nodeType name="exostore:book" isMixin="false" hasOrderableChildNodes="false" primaryItemName="">
+ 		<supertypes>
+ 			<supertype>nt:base</supertype>
+-			<supertype>mix:referenceable</supertype>
+ 		</supertypes>
+ 		<propertyDefinitions>
+ 			<propertyDefinition name="exostore:bookname" requiredType="String" autoCreated="false" mandatory="false" 
+@@ -19,17 +18,12 @@
+ 						onParentVersion="COPY" protected="false" multiple="false">
+ 				<valueConstraints/>
+ 			</propertyDefinition>
+-			<propertyDefinition name="exostore:author" requiredType="Reference" autoCreated="false" mandatory="false" 
+-			    		onParentVersion="COPY" protected="false" multiple="false">
+-        		<valueConstraints/>
+-      		</propertyDefinition>
+ 		</propertyDefinitions>
+ 	</nodeType>
+ 	
+ 	<nodeType name="exostore:author" isMixin="false" hasOrderableChildNodes="false" primaryItemName="">
+ 		<supertypes>
+ 			<supertype>nt:base</supertype>
+-			<supertype>mix:referenceable</supertype>
+ 		</supertypes>
+ 		<propertyDefinitions>
+ 			<propertyDefinition name="exostore:authorname" requiredType="String" autoCreated="false" mandatory="false" 
+diff --git a/target/classes/conf/portal/bookstore-configuration.xml b/target/classes/conf/portal/bookstore-configuration.xml
+new file mode 100644
+index 0000000..29f1ffb
+--- /dev/null
++++ b/target/classes/conf/portal/bookstore-configuration.xml
+@@ -0,0 +1,13 @@
++<?xml version="1.0" encoding="ISO-8859-1"?>
++<configuration xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.exoplaform.org/xml/ns/kernel_1_0.xsd
++	http://www.exoplaform.org/xml/ns/kernel_1_0.xsd" xmlns="http://www.exoplaform.org/xml/ns/kernel_1_0.xsd">
++	<component>
++		<key>exoplatform.JCRDataStorage</key>
++		<type>exoplatform.JCRDataStorage</type>
++	</component>
++	<component>
++	    <key>exoplatform.BookStoreService</key>
++	    <type>exoplatform.BookStoreService</type>
++    </component>
++
++</configuration>
+\ No newline at end of file
+diff --git a/target/classes/conf/portal/configuration.xml b/target/classes/conf/portal/configuration.xml
+new file mode 100644
+index 0000000..50e229b
+--- /dev/null
++++ b/target/classes/conf/portal/configuration.xml
+@@ -0,0 +1,10 @@
++<?xml version="1.0" encoding="ISO-8859-1"?>
++<configuration 
++	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
++	xsi:schemaLocation="http://www.exoplaform.org/xml/ns/kernel_1_0.xsd http://www.exoplaform.org/xml/ns/kernel_1_0.xsd"
++	 xmlns="http://www.exoplaform.org/xml/ns/kernel_1_0.xsd">
++	<import>jar:/conf/portal/jcr-configuration.xml</import>
++	<import>jar:/conf/portal/jcr-component-plugins-configuration.xml</import>
++	<import>jar:/conf/portal/jcr-nodetypes-configuration.xml</import>
++	<import>jar:/conf/portal/bookstore-configuration.xml</import>
++</configuration>
+\ No newline at end of file
+diff --git a/target/classes/conf/portal/jcr-component-plugins-configuration.xml b/target/classes/conf/portal/jcr-component-plugins-configuration.xml
+new file mode 100644
+index 0000000..04ff268
+--- /dev/null
++++ b/target/classes/conf/portal/jcr-component-plugins-configuration.xml
+@@ -0,0 +1,114 @@
++<?xml version="1.0" encoding="ISO-8859-1"?>
++<!-- This file create new root path -->
++<configuration xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.exoplaform.org/xml/ns/kernel_1_0.xsd http://www.exoplaform.org/xml/ns/kernel_1_0.xsd"
++  xmlns="http://www.exoplaform.org/xml/ns/kernel_1_0.xsd">
++  <external-component-plugins>
++    <target-component>org.exoplatform.services.jcr.ext.hierarchy.NodeHierarchyCreator</target-component>
++    <component-plugin>
++      	<name>addPaths</name>
++      	<set-method>addPlugin</set-method>
++      	<type>org.exoplatform.services.jcr.ext.hierarchy.impl.AddPathPlugin</type>            
++      	<init-params>
++        	<object-param>
++          		<name>cms.configuration</name>
++          		<description>configuration for the cms path</description>
++          		<object type="org.exoplatform.services.jcr.ext.hierarchy.impl.HierarchyConfig">
++		            <field name="workspaces">
++		              <collection type="java.util.ArrayList">
++		                <value><string>bookstore</string></value>
++		              </collection>                
++		            </field>
++	            	<field  name="jcrPaths">
++		 	        	<collection type="java.util.ArrayList">
++			            	<value>                
++	        		        	<object type="org.exoplatform.services.jcr.ext.hierarchy.impl.HierarchyConfig$JcrPath">                   
++		                     		<field  name="alias"><string>exobookstore</string></field>
++		                     		<field  name="path"><string>/exostore:bookstore</string></field>                                          
++		                     		<field name="permissions">
++		                       			<collection type="java.util.ArrayList">               
++		                         			<value>                            
++		                           				<object type="org.exoplatform.services.jcr.ext.hierarchy.impl.HierarchyConfig$Permission">
++													  <field name="identity"><string>*:/platform/administrators</string></field>
++						                              <field name="read"><string>true</string></field>                
++						                              <field name="addNode"><string>true</string></field>                
++						                              <field name="setProperty"><string>true</string></field>                
++						                              <field name="remove"><string>true</string></field>                
++		                           				</object>  
++		                        			</value>     
++											<value>                            
++		                           				<object type="org.exoplatform.services.jcr.ext.hierarchy.impl.HierarchyConfig$Permission">
++						                              <field name="identity"><string>any</string></field>
++						                              <field name="read"><string>true</string></field>                
++						                              <field name="addNode"><string>false</string></field>                
++						                              <field name="setProperty"><string>true</string></field>                
++						                              <field name="remove"><string>false</string></field>                
++		                           				</object>  
++		                        			</value>                   
++		                      			</collection>
++		                    		</field>                                   
++	                  			</object>
++	                  		</value>
++	                  		<value>
++	                  			<object type="org.exoplatform.services.jcr.ext.hierarchy.impl.HierarchyConfig$JcrPath">                   
++		                     		<field  name="alias"><string>book</string></field>
++		                     		<field  name="path"><string>/exostore:bookstore/exostore:book</string></field>                                          
++		                     		<field name="permissions">
++		                       			<collection type="java.util.ArrayList">               
++		                         			<value>                            
++		                           				<object type="org.exoplatform.services.jcr.ext.hierarchy.impl.HierarchyConfig$Permission">
++													  <field name="identity"><string>*:/platform/administrators</string></field>
++						                              <field name="read"><string>true</string></field>                
++						                              <field name="addNode"><string>true</string></field>                
++						                              <field name="setProperty"><string>true</string></field>                
++						                              <field name="remove"><string>true</string></field>                
++		                           				</object>  
++		                        			</value>     
++											<value>                            
++		                           				<object type="org.exoplatform.services.jcr.ext.hierarchy.impl.HierarchyConfig$Permission">
++						                              <field name="identity"><string>any</string></field>
++						                              <field name="read"><string>true</string></field>                
++						                              <field name="addNode"><string>false</string></field>                
++						                              <field name="setProperty"><string>true</string></field>                
++						                              <field name="remove"><string>false</string></field>                
++		                           				</object>  
++		                        			</value>                   
++		                      			</collection>
++		                    		</field>                                   
++	                  			</object>
++	                  		</value>
++	                  		<value>
++	                  			<object type="org.exoplatform.services.jcr.ext.hierarchy.impl.HierarchyConfig$JcrPath">                   
++		                     		<field  name="alias"><string>author</string></field>
++		                     		<field  name="path"><string>/exostore:bookstore/exostore:author</string></field>                                          
++		                     		<field name="permissions">
++		                       			<collection type="java.util.ArrayList">               
++		                         			<value>                            
++		                           				<object type="org.exoplatform.services.jcr.ext.hierarchy.impl.HierarchyConfig$Permission">
++													  <field name="identity"><string>*:/platform/administrators</string></field>
++						                              <field name="read"><string>true</string></field>                
++						                              <field name="addNode"><string>true</string></field>                
++						                              <field name="setProperty"><string>true</string></field>                
++						                              <field name="remove"><string>true</string></field>                
++		                           				</object>  
++		                        			</value>     
++											<value>                            
++		                           				<object type="org.exoplatform.services.jcr.ext.hierarchy.impl.HierarchyConfig$Permission">
++						                              <field name="identity"><string>any</string></field>
++						                              <field name="read"><string>true</string></field>                
++						                              <field name="addNode"><string>false</string></field>                
++						                              <field name="setProperty"><string>true</string></field>                
++						                              <field name="remove"><string>false</string></field>                
++		                           				</object>  
++		                        			</value>                   
++		                      			</collection>
++		                    		</field>                                   
++	                  			</object>
++	                		</value>
++	             	</collection>  
++	            </field>
++        	</object>
++        </object-param>
++      </init-params>            
++    </component-plugin>
++  </external-component-plugins>
++</configuration>
+diff --git a/target/classes/conf/portal/jcr-configuration.xml b/target/classes/conf/portal/jcr-configuration.xml
+new file mode 100644
+index 0000000..4c69fdd
+--- /dev/null
++++ b/target/classes/conf/portal/jcr-configuration.xml
+@@ -0,0 +1,25 @@
++<?xml version="1.0" encoding="ISO-8859-1"?>
++<configuration
++  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
++  xsi:schemaLocation="http://www.exoplaform.org/xml/ns/kernel_1_0.xsd http://www.exoplaform.org/xml/ns/kernel_1_0.xsd"
++  xmlns="http://www.exoplaform.org/xml/ns/kernel_1_0.xsd">
++  <external-component-plugins>
++    <!-- The full qualified name of the RepositoryServiceConfiguration -->
++    <target-component>org.exoplatform.services.jcr.config.RepositoryServiceConfiguration</target-component>
++    <component-plugin>
++      <!-- The name of the plugin -->
++      <name>Sample RepositoryServiceConfiguration Plugin</name>
++      <!-- The name of the method to call on the RepositoryServiceConfiguration in order to add the RepositoryServiceConfigurations -->
++      <set-method>addConfig</set-method>
++      <!-- The full qualified name of the RepositoryServiceConfigurationPlugin -->
++      <type>org.exoplatform.services.jcr.impl.config.RepositoryServiceConfigurationPlugin</type>
++      <init-params>
++        <value-param>
++          <name>conf-path</name>
++          <description>JCR configuration file</description>
++          <value>jar:/conf/portal/repository-configuration.xml</value>
++        </value-param>
++      </init-params>
++    </component-plugin>
++  </external-component-plugins>
++</configuration>
+diff --git a/target/classes/conf/portal/jcr-nodetypes-configuration.xml b/target/classes/conf/portal/jcr-nodetypes-configuration.xml
+new file mode 100644
+index 0000000..41a267c
+--- /dev/null
++++ b/target/classes/conf/portal/jcr-nodetypes-configuration.xml
+@@ -0,0 +1,30 @@
++<?xml version="1.0" encoding="ISO-8859-1"?>
++<configuration xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.exoplaform.org/xml/ns/kernel_1_0.xsd http://www.exoplaform.org/xml/ns/kernel_1_0.xsd"
++  xmlns="http://www.exoplaform.org/xml/ns/kernel_1_0.xsd">
++  <external-component-plugins>
++    <target-component>org.exoplatform.services.jcr.RepositoryService</target-component>  
++    <component-plugin>
++          <name>add.namespaces</name>
++          <set-method>addPlugin</set-method>
++          <type>org.exoplatform.services.jcr.impl.AddNamespacesPlugin</type>
++          <init-params>
++            <properties-param>
++              <name>namespaces</name>
++              <property name="exostore" value="http://www.exoplatform.org/bookstore/1.0"/>
++            </properties-param>
++          </init-params>
++      </component-plugin>    
++    <component-plugin> 
++      <name>add.cs.nodeType</name>
++      <set-method>addPlugin</set-method>
++      <type>org.exoplatform.services.jcr.impl.AddNodeTypePlugin</type>
++      <init-params>
++        <values-param>
++          <name>autoCreatedInNewRepository</name>
++          <description>Node types configuration file</description>
++          <value>jar:/conf/portal/nodetypes.xml</value>
++        </values-param>
++      </init-params>
++    </component-plugin>
++  </external-component-plugins>  
++</configuration>
+diff --git a/target/classes/conf/portal/nodetypes.xml b/target/classes/conf/portal/nodetypes.xml
+new file mode 100644
+index 0000000..6f40180
+--- /dev/null
++++ b/target/classes/conf/portal/nodetypes.xml
+@@ -0,0 +1,44 @@
++<?xml version="1.0" encoding="ISO-8859-1"?>
++<nodeTypes xmlns:nt="http://www.jcp.org/jcr/nt/1.0" xmlns:mix="http://www.jcp.org/jcr/mix/1.0" xmlns:jcr="http://www.jcp.org/jcr/1.0">
++    
++	<nodeType name="exostore:book" isMixin="false" hasOrderableChildNodes="false" primaryItemName="">
++		<supertypes>
++			<supertype>nt:base</supertype>
++		</supertypes>
++		<propertyDefinitions>
++			<propertyDefinition name="exostore:bookname" requiredType="String" autoCreated="false" mandatory="false" 
++						onParentVersion="COPY" protected="false" multiple="false">
++				<valueConstraints/>
++			</propertyDefinition>
++			<propertyDefinition name="exostore:bookcategory" requiredType="String" autoCreated="false" mandatory="false" 
++						onParentVersion="COPY" protected="false" multiple="false">
++				<valueConstraints/>
++			</propertyDefinition>
++			<propertyDefinition name="exostore:bookcontent" requiredType="String" autoCreated="false" mandatory="false" 
++						onParentVersion="COPY" protected="false" multiple="false">
++				<valueConstraints/>
++			</propertyDefinition>
++		</propertyDefinitions>
++	</nodeType>
++	
++	<nodeType name="exostore:author" isMixin="false" hasOrderableChildNodes="false" primaryItemName="">
++		<supertypes>
++			<supertype>nt:base</supertype>
++		</supertypes>
++		<propertyDefinitions>
++			<propertyDefinition name="exostore:authorname" requiredType="String" autoCreated="false" mandatory="false" 
++						onParentVersion="COPY" protected="false" multiple="false">
++				<valueConstraints/>
++			</propertyDefinition>
++			<propertyDefinition name="exostore:authoraddress" requiredType="String" autoCreated="false" mandatory="false" 
++						onParentVersion="COPY" protected="false" multiple="false">
++				<valueConstraints/>
++			</propertyDefinition>
++			<propertyDefinition name="exostore:authorphone" requiredType="String" autoCreated="false" mandatory="false" 
++						onParentVersion="COPY" protected="false" multiple="false">
++				<valueConstraints/>
++			</propertyDefinition>
++		</propertyDefinitions>
++	</nodeType>
++	
++</nodeTypes>
+\ No newline at end of file
+diff --git a/target/classes/conf/portal/repository-configuration.xml b/target/classes/conf/portal/repository-configuration.xml
+new file mode 100644
+index 0000000..6183884
+--- /dev/null
++++ b/target/classes/conf/portal/repository-configuration.xml
+@@ -0,0 +1,78 @@
++<repository-service default-repository="${gatein.jcr.repository.default}">
++  <repositories>
++    <repository name="${gatein.jcr.repository.default}" system-workspace="${gatein.jcr.workspace.system}" default-workspace="${gatein.jcr.workspace.default}">
++      <security-domain>gatein-domain</security-domain>
++      <access-control>optional</access-control>
++      <authentication-policy>org.exoplatform.services.jcr.impl.core.access.JAASAuthenticator</authentication-policy>
++      <workspaces>
++        <workspace name="bookstore">
++          <container class="org.exoplatform.services.jcr.impl.storage.jdbc.optimisation.CQJDBCWorkspaceDataContainer">
++            <properties>
++              <property name="source-name" value="${gatein.jcr.datasource.name}${container.name.suffix}"/>
++              <property name="dialect" value="${gatein.jcr.datasource.dialect}"/>
++              <property name="multi-db" value="false"/>
++              <property name="update-storage" value="true"/>
++              <property name="max-buffer-size" value="200k"/>
++              <property name="swap-directory" value="${gatein.jcr.data.dir}/swap/bookstore${container.name.suffix}"/>
++            </properties>
++            <value-storages>
++              <value-storage id="bookstore" class="org.exoplatform.services.jcr.impl.storage.value.fs.TreeFileValueStorage">
++                <properties>
++                  <property name="path" value="${gatein.jcr.storage.data.dir}/bookstore${container.name.suffix}"/>
++                </properties>
++                <filters>
++                  <filter property-type="Binary"/>
++                </filters>
++              </value-storage>
++            </value-storages>
++          </container>
++          <initializer class="org.exoplatform.services.jcr.impl.core.ScratchWorkspaceInitializer">
++            <properties>
++              <property name="root-nodetype" value="nt:unstructured"/>
++              <property name="root-permissions" value="any read;*:/platform/administrators read;*:/platform/administrators add_node;*:/platform/administrators set_property;*:/platform/administrators remove"/>
++            </properties>
++          </initializer>
++          <cache enabled="true" class="org.exoplatform.services.jcr.impl.dataflow.persistent.jbosscache.JBossCacheWorkspaceStorageCache">
++            <properties>
++              <property name="jbosscache-configuration" value="${gatein.jcr.cache.config}" />
++              <property name="jgroups-configuration" value="${gatein.jcr.jgroups.config}" />
++              <property name="jbosscache-cluster-name" value="jcr-cache${container.name.suffix}" />
++              <property name="jbosscache-shareable" value="true" />
++              <property name="jbosscache-expiration-time" value="${gatein.jcr.cache.expiration.time}" />
++            </properties>
++          </cache>
++          <query-handler class="org.exoplatform.services.jcr.impl.core.query.lucene.SearchIndex">
++            <properties>
++              <property name="index-dir" value="${gatein.jcr.index.data.dir}/bookstore${container.name.suffix}"/>
++              <property name="changesfilter-class" value="${gatein.jcr.index.changefilterclass}" />
++              <property name="jbosscache-configuration" value="${gatein.jcr.index.cache.config}" />
++              <property name="jgroups-configuration" value="${gatein.jcr.jgroups.config}" />
++              <property name="jbosscache-cluster-name" value="jcr-indexer${container.name.suffix}" />
++              <property name="jbosscache-shareable" value="true" />
++              <property name="max-volatile-time" value="60" />
++            </properties>
++          </query-handler>
++          
++          <lock-manager class="org.exoplatform.services.jcr.impl.core.lock.jbosscache.CacheableLockManagerImpl">
++            <properties>
++              <property name="time-out" value="15m" />
++              <property name="jbosscache-configuration" value="${gatein.jcr.lock.cache.config}" />
++              <property name="jgroups-configuration" value="${gatein.jcr.jgroups.config}" />
++              <property name="jbosscache-cluster-name" value="jcr-lock${container.name.suffix}" />
++              <property name="jbosscache-shareable" value="true" />
++              <property name="jbosscache-cl-cache.jdbc.table.name" value="jcrlocks" />
++              <property name="jbosscache-cl-cache.jdbc.table.create" value="true" />
++              <property name="jbosscache-cl-cache.jdbc.table.drop" value="false" />
++              <property name="jbosscache-cl-cache.jdbc.table.primarykey" value="pk" />
++              <property name="jbosscache-cl-cache.jdbc.fqn.column" value="fqn" />
++              <property name="jbosscache-cl-cache.jdbc.node.column" value="node" />
++              <property name="jbosscache-cl-cache.jdbc.parent.column" value="parent" />
++              <property name="jbosscache-cl-cache.jdbc.datasource" value="${gatein.jcr.datasource.name}${container.name.suffix}" />
++            </properties>
++          </lock-manager>
++
++        </workspace>
++      </workspaces>
++    </repository>
++  </repositories>
++</repository-service>
+diff --git a/target/classes/exoplatform/BookNodeTypes.class b/target/classes/exoplatform/BookNodeTypes.class
+new file mode 100644
+index 0000000..97e72a8
+Binary files /dev/null and b/target/classes/exoplatform/BookNodeTypes.class differ
+diff --git a/target/classes/exoplatform/BookStoreService.class b/target/classes/exoplatform/BookStoreService.class
+new file mode 100644
+index 0000000..04e4b93
+Binary files /dev/null and b/target/classes/exoplatform/BookStoreService.class differ
+diff --git a/target/classes/exoplatform/JCRDataStorage.class b/target/classes/exoplatform/JCRDataStorage.class
+new file mode 100644
+index 0000000..879d1a5
+Binary files /dev/null and b/target/classes/exoplatform/JCRDataStorage.class differ
+diff --git a/target/classes/exoplatform/entity/Author.class b/target/classes/exoplatform/entity/Author.class
+new file mode 100644
+index 0000000..228c835
+Binary files /dev/null and b/target/classes/exoplatform/entity/Author.class differ
+diff --git a/target/classes/exoplatform/entity/Book$CATEGORY.class b/target/classes/exoplatform/entity/Book$CATEGORY.class
+new file mode 100644
+index 0000000..d1d2df1
+Binary files /dev/null and b/target/classes/exoplatform/entity/Book$CATEGORY.class differ
+diff --git a/target/classes/exoplatform/entity/Book.class b/target/classes/exoplatform/entity/Book.class
+new file mode 100644
+index 0000000..405876d
+Binary files /dev/null and b/target/classes/exoplatform/entity/Book.class differ
+diff --git a/target/classes/exoplatform/exception/BookNotFoundException.class b/target/classes/exoplatform/exception/BookNotFoundException.class
+new file mode 100644
+index 0000000..7734ac4
+Binary files /dev/null and b/target/classes/exoplatform/exception/BookNotFoundException.class differ
+diff --git a/target/classes/exoplatform/exception/DuplicateBookException.class b/target/classes/exoplatform/exception/DuplicateBookException.class
+new file mode 100644
+index 0000000..a3a5435
+Binary files /dev/null and b/target/classes/exoplatform/exception/DuplicateBookException.class differ
+diff --git a/target/classes/exoplatform/utils/PropertyReader.class b/target/classes/exoplatform/utils/PropertyReader.class
+new file mode 100644
+index 0000000..0aaf2d2
+Binary files /dev/null and b/target/classes/exoplatform/utils/PropertyReader.class differ
+diff --git a/target/classes/exoplatform/utils/Utils.class b/target/classes/exoplatform/utils/Utils.class
+new file mode 100644
+index 0000000..1ebaaf7
+Binary files /dev/null and b/target/classes/exoplatform/utils/Utils.class differ
+diff --git a/target/jcr-exo-1.0-SNAPSHOT.jar b/target/jcr-exo-1.0-SNAPSHOT.jar
+new file mode 100644
+index 0000000..4da898f
+Binary files /dev/null and b/target/jcr-exo-1.0-SNAPSHOT.jar differ
+diff --git a/target/maven-archiver/pom.properties b/target/maven-archiver/pom.properties
+new file mode 100644
+index 0000000..9c401b4
+--- /dev/null
++++ b/target/maven-archiver/pom.properties
+@@ -0,0 +1,5 @@
++#Generated by Maven
++#Fri Jul 13 14:57:28 ICT 2012
++version=1.0-SNAPSHOT
++groupId=exoplatform
++artifactId=jcr-exo
+diff --git a/target/surefire-reports/TEST-exoplatform.AppTest.xml b/target/surefire-reports/TEST-exoplatform.AppTest.xml
+new file mode 100644
+index 0000000..f731d34
+--- /dev/null
++++ b/target/surefire-reports/TEST-exoplatform.AppTest.xml
+@@ -0,0 +1,62 @@
++<?xml version="1.0" encoding="UTF-8" ?>
++<testsuite failures="0" time="0.013" errors="0" skipped="0" tests="1" name="exoplatform.AppTest">
++  <properties>
++    <property name="java.runtime.name" value="Java(TM) SE Runtime Environment"/>
++    <property name="sun.boot.library.path" value="/home/binhnv/java/jdk1.6/jre/lib/amd64"/>
++    <property name="java.vm.version" value="20.2-b06"/>
++    <property name="java.vm.vendor" value="Sun Microsystems Inc."/>
++    <property name="java.vendor.url" value="http://java.sun.com/"/>
++    <property name="path.separator" value=":"/>
++    <property name="guice.disable.misplaced.annotation.check" value="true"/>
++    <property name="java.vm.name" value="Java HotSpot(TM) 64-Bit Server VM"/>
++    <property name="file.encoding.pkg" value="sun.io"/>
++    <property name="user.country" value="US"/>
++    <property name="sun.java.launcher" value="SUN_STANDARD"/>
++    <property name="sun.os.patch.level" value="unknown"/>
++    <property name="java.vm.specification.name" value="Java Virtual Machine Specification"/>
++    <property name="user.dir" value="/home/binhnv/java/jcr-exo"/>
++    <property name="java.runtime.version" value="1.6.0_27-b07"/>
++    <property name="java.awt.graphicsenv" value="sun.awt.X11GraphicsEnvironment"/>
++    <property name="java.endorsed.dirs" value="/home/binhnv/java/jdk1.6/jre/lib/endorsed"/>
++    <property name="os.arch" value="amd64"/>
++    <property name="java.io.tmpdir" value="/tmp"/>
++    <property name="line.separator" value="
++"/>
++    <property name="java.vm.specification.vendor" value="Sun Microsystems Inc."/>
++    <property name="os.name" value="Linux"/>
++    <property name="classworlds.conf" value="/home/binhnv/java/apache-maven-3.0.4/bin/m2.conf"/>
++    <property name="sun.jnu.encoding" value="UTF-8"/>
++    <property name="java.library.path" value="/home/binhnv/java/jdk1.6/jre/lib/amd64/server:/home/binhnv/java/jdk1.6/jre/lib/amd64:/home/binhnv/java/jdk1.6/jre/../lib/amd64:/usr/java/packages/lib/amd64:/usr/lib64:/lib64:/lib:/usr/lib"/>
++    <property name="java.specification.name" value="Java Platform API Specification"/>
++    <property name="java.class.version" value="50.0"/>
++    <property name="sun.management.compiler" value="HotSpot 64-Bit Tiered Compilers"/>
++    <property name="os.version" value="3.2.0-23-generic"/>
++    <property name="user.home" value="/home/binhnv"/>
++    <property name="user.timezone" value="Asia/Ho_Chi_Minh"/>
++    <property name="java.awt.printerjob" value="sun.print.PSPrinterJob"/>
++    <property name="file.encoding" value="UTF-8"/>
++    <property name="java.specification.version" value="1.6"/>
++    <property name="user.name" value="binhnv"/>
++    <property name="java.class.path" value="/home/binhnv/java/apache-maven-3.0.4/boot/plexus-classworlds-2.4.jar"/>
++    <property name="java.vm.specification.version" value="1.0"/>
++    <property name="sun.arch.data.model" value="64"/>
++    <property name="java.home" value="/home/binhnv/java/jdk1.6/jre"/>
++    <property name="sun.java.command" value="org.codehaus.plexus.classworlds.launcher.Launcher clean install"/>
++    <property name="java.specification.vendor" value="Sun Microsystems Inc."/>
++    <property name="user.language" value="en"/>
++    <property name="java.vm.info" value="mixed mode"/>
++    <property name="java.version" value="1.6.0_27"/>
++    <property name="java.ext.dirs" value="/home/binhnv/java/jdk1.6/jre/lib/ext:/usr/java/packages/lib/ext"/>
++    <property name="securerandom.source" value="file:/dev/./urandom"/>
++    <property name="sun.boot.class.path" value="/home/binhnv/java/jdk1.6/jre/lib/resources.jar:/home/binhnv/java/jdk1.6/jre/lib/rt.jar:/home/binhnv/java/jdk1.6/jre/lib/sunrsasign.jar:/home/binhnv/java/jdk1.6/jre/lib/jsse.jar:/home/binhnv/java/jdk1.6/jre/lib/jce.jar:/home/binhnv/java/jdk1.6/jre/lib/charsets.jar:/home/binhnv/java/jdk1.6/jre/lib/modules/jdk.boot.jar:/home/binhnv/java/jdk1.6/jre/classes"/>
++    <property name="java.vendor" value="Sun Microsystems Inc."/>
++    <property name="maven.home" value="/home/binhnv/java/apache-maven-3.0.4"/>
++    <property name="file.separator" value="/"/>
++    <property name="java.vendor.url.bug" value="http://java.sun.com/cgi-bin/bugreport.cgi"/>
++    <property name="sun.cpu.endian" value="little"/>
++    <property name="sun.io.unicode.encoding" value="UnicodeLittle"/>
++    <property name="sun.desktop" value="gnome"/>
++    <property name="sun.cpu.isalist" value=""/>
++  </properties>
++  <testcase time="0.002" classname="exoplatform.AppTest" name="testApp"/>
++</testsuite>
+\ No newline at end of file
+diff --git a/target/surefire-reports/exoplatform.AppTest.txt b/target/surefire-reports/exoplatform.AppTest.txt
+new file mode 100644
+index 0000000..87ea500
+--- /dev/null
++++ b/target/surefire-reports/exoplatform.AppTest.txt
+@@ -0,0 +1,4 @@
++-------------------------------------------------------------------------------
++Test set: exoplatform.AppTest
++-------------------------------------------------------------------------------
++Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.013 sec
+diff --git a/target/test-classes/exoplatform/AppTest.class b/target/test-classes/exoplatform/AppTest.class
+new file mode 100644
+index 0000000..5788b9e
+Binary files /dev/null and b/target/test-classes/exoplatform/AppTest.class differ
diff --git a/src/main/java/exoplatform/BookNodeTypes.java b/src/main/java/exoplatform/BookNodeTypes.java
index 058d142..e3cf21f 100644
--- a/src/main/java/exoplatform/BookNodeTypes.java
+++ b/src/main/java/exoplatform/BookNodeTypes.java
@@ -44,4 +44,17 @@ public interface BookNodeTypes {
   /* exostore:authorphone is a property of exostore:author */
   public static final String EXO_AUTHOR_PHONE = "exostore:authorphone";
   
+  /* define parent node of user */
+  public static final String EXO_USER = "exostore:user";
+  /* exostore:username is a property of exostore:user */
+  public static final String EXO_USER_NAME = "exostore:username";
+  /* exostore:password is a property of exostore:user */
+  public static final String EXO_USER_PASSWORD = "exostore:password";
+  /* exostore:fullname is a property of exostore:user */
+  public static final String EXO_USER_FULLNAME = "exostore:fullname";
+  /* exostore:useraddress is a property of exostore:user */
+  public static final String EXO_USER_ADDRESS = "exostore:useraddress";
+  /* exostore:userphone is a property of exostore:user */
+  public static final String EXO_USER_PHONE = "exostore:userphone";
+  
 }
diff --git a/src/main/java/exoplatform/BookStoreService.java b/src/main/java/exoplatform/BookStoreService.java
index 0b117f7..c132cd9 100644
--- a/src/main/java/exoplatform/BookStoreService.java
+++ b/src/main/java/exoplatform/BookStoreService.java
@@ -17,10 +17,12 @@
 package exoplatform;
 
 import java.io.Serializable;
+import java.util.ArrayList;
 import java.util.List;
 
 import javax.jcr.Node;
 import javax.jcr.RepositoryException;
+import javax.jcr.Value;
 
 import org.exoplatform.services.cache.CacheService;
 import org.exoplatform.services.cache.ExoCache;
@@ -32,6 +34,7 @@ import org.picocontainer.Startable;
 import exoplatform.entity.Author;
 import exoplatform.entity.Book;
 import exoplatform.entity.Book.CATEGORY;
+import exoplatform.entity.User;
 import exoplatform.exception.DuplicateBookException;
 
 /**
@@ -73,9 +76,15 @@ public class BookStoreService implements Startable {
 //    List<Book> books = new ArrayList<Book>(); 
     try {
       Node authorNode = addAuthor("Conan Doyle", "England", "123456789");
-      addBook("The Mask", CATEGORY.NOVEL, "Test", authorNode);
+      Node bookNode = addBook("The Mask", CATEGORY.NOVEL, "Test", authorNode.getPath());
+      Node bookNode1 = addBook("The Sign of the four", CATEGORY.NOVEL, "Test", authorNode.getPath());
+      List<String> nodes = new ArrayList<String>();
+      nodes.add(bookNode.getPath());
+      nodes.add(bookNode1.getPath());
+      Node userNode = addUser("binhnv", "12345", "Nguyen Vinh Binh", "Hanoi", "123456789", nodes);
     } catch (DuplicateBookException e) {
-      // TODO Auto-generated catch block
+      e.printStackTrace();
+    } catch (RepositoryException e) {
       e.printStackTrace();
     }
 //    addMultiBook();
@@ -109,9 +118,9 @@ public class BookStoreService implements Startable {
    * @return
    * @throws DuplicateBookException
    */
-  public Book addBook(String bookName, CATEGORY category, String content, Node node) throws DuplicateBookException {
+  public Node addBook(String bookName, CATEGORY category, String content, String nodePath) throws DuplicateBookException {
     Book book = new Book(bookName, category, content);
-    return jcrDataStorage.addBook(book, node);
+    return jcrDataStorage.addBook(book, nodePath);
   }
   
   /**
@@ -126,6 +135,11 @@ public class BookStoreService implements Startable {
     return jcrDataStorage.addAuthor(author);
   }
   
+  public Node addUser(String username, String password, String fullname, String address, String phone, List<String> nodes) {
+    User user = new User(username, password, fullname, address, phone);
+    return jcrDataStorage.addUser(user, nodes);
+  }
+  
   /**
    * This function support for add multi book to datastorage
    */
diff --git a/src/main/java/exoplatform/JCRDataStorage.java b/src/main/java/exoplatform/JCRDataStorage.java
index e7fba58..d7ba3f1 100644
--- a/src/main/java/exoplatform/JCRDataStorage.java
+++ b/src/main/java/exoplatform/JCRDataStorage.java
@@ -24,6 +24,7 @@ import javax.jcr.NodeIterator;
 import javax.jcr.PathNotFoundException;
 import javax.jcr.RepositoryException;
 import javax.jcr.Session;
+import javax.jcr.Value;
 import javax.jcr.query.Query;
 import javax.jcr.query.QueryManager;
 import javax.jcr.query.QueryResult;
@@ -38,6 +39,7 @@ import org.exoplatform.services.log.Log;
 
 import exoplatform.entity.Author;
 import exoplatform.entity.Book;
+import exoplatform.entity.User;
 import exoplatform.exception.BookNotFoundException;
 import exoplatform.exception.DuplicateBookException;
 import exoplatform.utils.PropertyReader;
@@ -57,6 +59,8 @@ public class JCRDataStorage {
   public static final String DEFAULT_PARENT_PATH = "/exostore:bookstore";
   public static final String DEFAULT_PARENT_BOOK_PATH = "/exostore:book";
   public static final String DEFAULT_PARENT_AUTHOR_PATH = "/exostore:author";
+  public static final String DEFAULT_PARENT_USER_PATH = "/exostore:user";
+  public static final String DEFAULT_PARENT_BOOK_USER_PATH = "/exostore:bookuser";
   public static final String DEFAULT_WORKSPACE_NAME = "bookstore";
   /* Define a RepositoryService which support integrate with repository */
   private RepositoryService repoService;
@@ -147,27 +151,29 @@ public class JCRDataStorage {
    * @return Book
    * @throws DuplicateBookException
    */
-  public Book addBook(Book book, Node node) throws DuplicateBookException {
+  public Node addBook(Book book, String nodePath) throws DuplicateBookException {
     SessionProvider sProvider = SessionProvider.createSystemProvider();
+    
     /* Check exist of book */
     if (isExistBookName(book.getName(), sProvider)) {
       throw new DuplicateBookException(String.format("Book %s is existed", book.getName()));
     }
     
     /* get id and set to new book */
-    book.setId(Utils.bookId++);
+    book.setBookId(Utils.bookId++);
     
     try {
       /* execute set data to node and save to workspace */
       Node parentNode = getNodeByPath(DEFAULT_PARENT_PATH + DEFAULT_PARENT_BOOK_PATH, sProvider);
-      Node bookNode = parentNode.addNode("" + book.getId(), BookNodeTypes.EXO_BOOK);
+      Node bookNode = parentNode.addNode("" + book.getBookId(), BookNodeTypes.EXO_BOOK);
       bookNode.setProperty(BookNodeTypes.EXO_BOOK_NAME, book.getName());
       bookNode.setProperty(BookNodeTypes.EXO_BOOK_CATEGORY, Utils.bookCategoryEnumToString(book.getCategory()));
       bookNode.setProperty(BookNodeTypes.EXO_BOOK_CONTENT, book.getContent());
-      bookNode.setProperty(BookNodeTypes.EXO_BOOK_AUTHOR, node);
+      bookNode.setProperty(BookNodeTypes.EXO_BOOK_AUTHOR, getNodeByPath(nodePath, sProvider));
       parentNode.getSession().save();
-      return book;
+      return bookNode;
     } catch (PathNotFoundException e) {
+      log.error("Path not found", e);
       return null;
     } catch (RepositoryException e) {
       log.error("Failed to add book", e);
@@ -179,10 +185,10 @@ public class JCRDataStorage {
   
   public Node addAuthor(Author author) {
     SessionProvider sProvider = SessionProvider.createSystemProvider();
-    author.setId(Utils.authorId++);
+    author.setAuthorId(Utils.authorId++);
     try {
       Node parentNode = getNodeByPath(DEFAULT_PARENT_PATH + DEFAULT_PARENT_AUTHOR_PATH, sProvider);
-      Node authorNode = parentNode.addNode("" + author.getId(), BookNodeTypes.EXO_AUTHOR);
+      Node authorNode = parentNode.addNode("" + author.getAuthorId(), BookNodeTypes.EXO_AUTHOR);
       authorNode.setProperty(BookNodeTypes.EXO_AUTHOR_NAME, author.getName());
       authorNode.setProperty(BookNodeTypes.EXO_AUTHOR_ADDRESS, author.getAddress());
       authorNode.setProperty(BookNodeTypes.EXO_AUTHOR_PHONE, author.getPhone());
@@ -196,6 +202,33 @@ public class JCRDataStorage {
     }
   }
   
+  public Node addUser(User user, List<String> nodes) {
+    SessionProvider sProvider = SessionProvider.createSystemProvider();
+    user.setUserId(Utils.userId++);
+    try {
+      Node parentNode = getNodeByPath(DEFAULT_PARENT_PATH + DEFAULT_PARENT_USER_PATH, sProvider);
+      Node userNode = parentNode.addNode("" + user.getUserId(), BookNodeTypes.EXO_USER);
+      userNode.setProperty(BookNodeTypes.EXO_USER_NAME, user.getUsername());
+      userNode.setProperty(BookNodeTypes.EXO_USER_PASSWORD, user.getPassword());
+      userNode.setProperty(BookNodeTypes.EXO_USER_FULLNAME, user.getFullname());
+      userNode.setProperty(BookNodeTypes.EXO_USER_ADDRESS, user.getAddress());
+      userNode.setProperty(BookNodeTypes.EXO_USER_PHONE, user.getPhone());
+      List<Value> values = new ArrayList<Value>();
+      for (String string : nodes) {
+        Value val = parentNode.getSession().getValueFactory().createValue(getNodeByPath(string, sProvider));
+        values.add(val);
+      }
+      userNode.setProperty(BookNodeTypes.EXO_BOOK, values.toArray(new Value[values.size()]));
+      parentNode.getSession().save();
+      return userNode;
+    } catch (RepositoryException re) {
+      log.error("Failed to add user", re);
+      return null;
+    } finally {
+      sProvider.close();
+    }
+  }
+  
   /**
    * The function support delete a book by book id
    * 
@@ -245,14 +278,14 @@ public class JCRDataStorage {
     SessionProvider sProvider = SessionProvider.createSystemProvider();
     try {
       /* execute modify data and set to workspace */
-      Node node = getNodeByPath(DEFAULT_PARENT_PATH + "/" + book.getId(), sProvider);
+      Node node = getNodeByPath(DEFAULT_PARENT_PATH + "/" + book.getBookId(), sProvider);
       node.setProperty(BookNodeTypes.EXO_BOOK_NAME, book.getName());
       node.setProperty(BookNodeTypes.EXO_BOOK_CONTENT, book.getContent());
       node.setProperty(BookNodeTypes.EXO_BOOK_CATEGORY, Utils.bookCategoryEnumToString(book.getCategory()));
       node.getSession().save();
     } catch (RepositoryException re) {
-      log.error(String.format("Book %s is not found", book.getId()), re);
-      throw new BookNotFoundException(String.format("Book %s is not found", book.getId()));
+      log.error(String.format("Book %s is not found", book.getBookId()), re);
+      throw new BookNotFoundException(String.format("Book %s is not found", book.getBookId()));
     } finally {
       sProvider.close();
     }
@@ -514,7 +547,7 @@ public class JCRDataStorage {
     if (node != null) {
       Book book = new Book();
       try {
-        book.setId(Integer.valueOf(node.getName()));
+        book.setBookId(Integer.valueOf(node.getName()));
       } catch (Exception e) {
         return null;
       }
diff --git a/src/main/java/exoplatform/entity/Author.java b/src/main/java/exoplatform/entity/Author.java
index 06c5a07..e44dcd2 100644
--- a/src/main/java/exoplatform/entity/Author.java
+++ b/src/main/java/exoplatform/entity/Author.java
@@ -24,7 +24,7 @@ package exoplatform.entity;
  */
 public class Author {
 
-  private int id;
+  private int authorId;
   private String name;
   private String address;
   private String phone;
@@ -52,15 +52,15 @@ public class Author {
   /**
    * @return the id
    */
-  public int getId() {
-    return id;
+  public int getAuthorId() {
+    return authorId;
   }
 
   /**
    * @param id the id to set
    */
-  public void setId(int id) {
-    this.id = id;
+  public void setAuthorId(int authorId) {
+    this.authorId = authorId;
   }
 
   /**
diff --git a/src/main/java/exoplatform/entity/Book.java b/src/main/java/exoplatform/entity/Book.java
index 8f5daff..152392f 100644
--- a/src/main/java/exoplatform/entity/Book.java
+++ b/src/main/java/exoplatform/entity/Book.java
@@ -30,7 +30,7 @@ public class Book {
     NOVEL, MANGA, COMICS, TECHNICAL, MATHS, HISTORY
   }
   /* id of book */
-  private int id;
+  private int bookId;
   /* name of book */
   private String name;
   /*category of book*/
@@ -63,14 +63,14 @@ public class Book {
   /**
    * @return the id
    */
-  public int getId() {
-    return id;
+  public int getBookId() {
+    return bookId;
   }
   /**
    * @param id the id to set
    */
-  public void setId(int id) {
-    this.id = id;
+  public void setBookId(int bookId) {
+    this.bookId = bookId;
   }
   /**
    * @return the name
diff --git a/src/main/java/exoplatform/entity/BookUser.java b/src/main/java/exoplatform/entity/BookUser.java
new file mode 100644
index 0000000..bc1053b
--- /dev/null
+++ b/src/main/java/exoplatform/entity/BookUser.java
@@ -0,0 +1,75 @@
+/*
+ * Copyright (C) 2003-2012 eXo Platform SAS.
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program. If not, see <http://www.gnu.org/licenses/>.
+ */
+package exoplatform.entity;
+
+import org.apache.lucene.store.Lock.With;
+
+/**
+ * Created by The eXo Platform SAS
+ * Author : BinhNV
+ *          binhnv@exoplatform.com
+ * Jul 16, 2012  
+ */
+public class BookUser {
+
+  private int userId;
+  private int bookId;
+  
+  /**
+   * BookUser constructor without parameter
+   */
+  public BookUser() {
+    
+  }
+  
+  /**
+   * BookUser constructor with parameter
+   */
+  public BookUser(int userId, int bookId) {
+    this.userId = userId;
+    this.bookId = bookId;
+  }
+
+  /**
+   * @return the userId
+   */
+  public int getUserId() {
+    return userId;
+  }
+
+  /**
+   * @param userId the userId to set
+   */
+  public void setUserId(int userId) {
+    this.userId = userId;
+  }
+
+  /**
+   * @return the bookId
+   */
+  public int getBookId() {
+    return bookId;
+  }
+
+  /**
+   * @param bookId the bookId to set
+   */
+  public void setBookId(int bookId) {
+    this.bookId = bookId;
+  }
+
+}
diff --git a/src/main/java/exoplatform/entity/User.java b/src/main/java/exoplatform/entity/User.java
new file mode 100644
index 0000000..aa63150
--- /dev/null
+++ b/src/main/java/exoplatform/entity/User.java
@@ -0,0 +1,142 @@
+/*
+ * Copyright (C) 2003-2012 eXo Platform SAS.
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program. If not, see <http://www.gnu.org/licenses/>.
+ */
+package exoplatform.entity;
+
+/**
+ * Created by The eXo Platform SAS
+ * Author : BinhNV
+ *          binhnv@exoplatform.com
+ * Jul 16, 2012  
+ */
+public class User {
+
+  private int userId;
+  private String username;
+  private String password;
+  private String fullname;
+  private String address;
+  private String phone;
+  
+  /**
+   * User constructor without parameter
+   */
+  public User() {
+    
+  }
+  
+  /**
+   * User constructor with parameter
+   * 
+   * @param username
+   * @param password
+   * @param fullname
+   * @param address
+   * @param phone
+   */
+  public User(String username, String password, String fullname, String address, String phone) {
+    this.username = username;
+    this.password = password;
+    this.fullname = fullname;
+    this.address = address;
+    this.phone = phone;
+  }
+
+  /**
+   * @return the userId
+   */
+  public int getUserId() {
+    return userId;
+  }
+
+  /**
+   * @param userId the userId to set
+   */
+  public void setUserId(int userId) {
+    this.userId = userId;
+  }
+
+  /**
+   * @return the username
+   */
+  public String getUsername() {
+    return username;
+  }
+
+  /**
+   * @param username the username to set
+   */
+  public void setUsername(String username) {
+    this.username = username;
+  }
+
+  /**
+   * @return the password
+   */
+  public String getPassword() {
+    return password;
+  }
+
+  /**
+   * @param password the password to set
+   */
+  public void setPassword(String password) {
+    this.password = password;
+  }
+
+  /**
+   * @return the fullname
+   */
+  public String getFullname() {
+    return fullname;
+  }
+
+  /**
+   * @param fullname the fullname to set
+   */
+  public void setFullname(String fullname) {
+    this.fullname = fullname;
+  }
+
+  /**
+   * @return the address
+   */
+  public String getAddress() {
+    return address;
+  }
+
+  /**
+   * @param address the address to set
+   */
+  public void setAddress(String address) {
+    this.address = address;
+  }
+
+  /**
+   * @return the phone
+   */
+  public String getPhone() {
+    return phone;
+  }
+
+  /**
+   * @param phone the phone to set
+   */
+  public void setPhone(String phone) {
+    this.phone = phone;
+  }
+
+}
diff --git a/src/main/java/exoplatform/utils/Utils.java b/src/main/java/exoplatform/utils/Utils.java
index ca5494b..2e97c21 100644
--- a/src/main/java/exoplatform/utils/Utils.java
+++ b/src/main/java/exoplatform/utils/Utils.java
@@ -40,6 +40,13 @@ public class Utils {
    **/
   public static int authorId = 0;
   
+  /** 
+   * Define a static variable which contain id of user 
+   * id of user will increase 1 value when a new user create
+   * 
+   **/
+  public static int userId = 0;
+  
   /**
    * Convert enum value to String value 
    * 
diff --git a/src/main/resources/conf/portal/jcr-component-plugins-configuration.xml b/src/main/resources/conf/portal/jcr-component-plugins-configuration.xml
index 04ff268..fa9f3ca 100644
--- a/src/main/resources/conf/portal/jcr-component-plugins-configuration.xml
+++ b/src/main/resources/conf/portal/jcr-component-plugins-configuration.xml
@@ -104,6 +104,34 @@
 		                    		</field>                                   
 	                  			</object>
 	                		</value>
+	                		<value>
+	                  			<object type="org.exoplatform.services.jcr.ext.hierarchy.impl.HierarchyConfig$JcrPath">                   
+		                     		<field  name="alias"><string>author</string></field>
+		                     		<field  name="path"><string>/exostore:bookstore/exostore:user</string></field>                                          
+		                     		<field name="permissions">
+		                       			<collection type="java.util.ArrayList">               
+		                         			<value>                            
+		                           				<object type="org.exoplatform.services.jcr.ext.hierarchy.impl.HierarchyConfig$Permission">
+													  <field name="identity"><string>*:/platform/administrators</string></field>
+						                              <field name="read"><string>true</string></field>                
+						                              <field name="addNode"><string>true</string></field>                
+						                              <field name="setProperty"><string>true</string></field>                
+						                              <field name="remove"><string>true</string></field>                
+		                           				</object>  
+		                        			</value>     
+											<value>                            
+		                           				<object type="org.exoplatform.services.jcr.ext.hierarchy.impl.HierarchyConfig$Permission">
+						                              <field name="identity"><string>any</string></field>
+						                              <field name="read"><string>true</string></field>                
+						                              <field name="addNode"><string>false</string></field>                
+						                              <field name="setProperty"><string>true</string></field>                
+						                              <field name="remove"><string>false</string></field>                
+		                           				</object>  
+		                        			</value>                   
+		                      			</collection>
+		                    		</field>                                   
+	                  			</object>
+	                		</value>
 	             	</collection>  
 	            </field>
         	</object>
diff --git a/src/main/resources/conf/portal/nodetypes.xml b/src/main/resources/conf/portal/nodetypes.xml
index fba444b..c6482fa 100644
--- a/src/main/resources/conf/portal/nodetypes.xml
+++ b/src/main/resources/conf/portal/nodetypes.xml
@@ -47,4 +47,37 @@
 		</propertyDefinitions>
 	</nodeType>
 	
+	<nodeType name="exostore:user" isMixin="false" hasOrderableChildNodes="false" primaryItemName="">
+		<supertypes>
+			<supertype>nt:base</supertype>
+			<supertype>mix:referenceable</supertype>
+		</supertypes>
+		<propertyDefinitions>
+			<propertyDefinition name="exostore:username" requiredType="String" autoCreated="false" mandatory="false" 
+						onParentVersion="COPY" protected="false" multiple="false">
+				<valueConstraints/>
+			</propertyDefinition>
+			<propertyDefinition name="exostore:password" requiredType="String" autoCreated="false" mandatory="false" 
+						onParentVersion="COPY" protected="false" multiple="false">
+				<valueConstraints/>
+			</propertyDefinition>
+			<propertyDefinition name="exostore:fullname" requiredType="String" autoCreated="false" mandatory="false" 
+						onParentVersion="COPY" protected="false" multiple="false">
+				<valueConstraints/>
+			</propertyDefinition>
+			<propertyDefinition name="exostore:useraddress" requiredType="String" autoCreated="false" mandatory="false" 
+						onParentVersion="COPY" protected="false" multiple="false">
+				<valueConstraints/>
+			</propertyDefinition>
+			<propertyDefinition name="exostore:userphone" requiredType="String" autoCreated="false" mandatory="false" 
+						onParentVersion="COPY" protected="false" multiple="false">
+				<valueConstraints/>
+			</propertyDefinition>
+			<propertyDefinition name="exostore:book" requiredType="Reference" autoCreated="false" mandatory="false" 
+			    		onParentVersion="COPY" protected="false" multiple="true">
+        		<valueConstraints/>
+      		</propertyDefinition>
+		</propertyDefinitions>
+	</nodeType>
+	
 </nodeTypes>
\ No newline at end of file
