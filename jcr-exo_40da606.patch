commit 40da6066d6ed6a129f4a312034ba835dec0f2e04
Author: BinhNV <binhnv@exoplatform.com>
Date:   Fri Jul 20 17:14:16 2012 +0700

    commit jcr-exo with web service

diff --git a/${gatein.test.tmp.dir}/jcr/jcrlucenedb/portal-test/redo.log b/${gatein.test.tmp.dir}/jcr/jcrlucenedb/portal-test/redo.log
index 9fe7e95..76cf598 100644
--- a/${gatein.test.tmp.dir}/jcr/jcrlucenedb/portal-test/redo.log
+++ b/${gatein.test.tmp.dir}/jcr/jcrlucenedb/portal-test/redo.log
@@ -1,58 +1,58 @@
 0 STR
-0 DEL 9f22fb3c7f000101239d5fe685bd5a39
-0 ADD 9f22fb3c7f000101239d5fe685bd5a39
+0 DEL a3de7a457f00010103da1a933419d1e4
+0 ADD a3de7a457f00010103da1a933419d1e4
 0 COM
 1 STR
-1 DEL 9f22fb4d7f00010149cda7e7f5f394cd
-1 ADD 9f22fb4d7f00010149cda7e7f5f394cd
+1 DEL a3de7a577f0001016d9bf9963b45273d
+1 ADD a3de7a577f0001016d9bf9963b45273d
 1 COM
 2 STR
-2 DEL 9f22fb5b7f00010163376afac8d9ddd3
-2 ADD 9f22fb5b7f00010163376afac8d9ddd3
+2 DEL a3de7a6f7f000101002e9c765873dafd
+2 ADD a3de7a6f7f000101002e9c765873dafd
 2 COM
 3 STR
-3 DEL 9f22fb6a7f000101573980447a5989b2
-3 ADD 9f22fb6a7f000101573980447a5989b2
+3 DEL a3de7a827f000101406d06b0a8abe561
+3 ADD a3de7a827f000101406d06b0a8abe561
 3 COM
 4 STR
-4 ADD 9f22fc677f0001011e933c0763c06b68
+4 ADD a3de7bed7f0001010e1641c00c65cdac
 4 COM
 5 STR
-5 ADD 9f22fc7b7f00010172d2ee5d21bd55c0
+5 ADD a3de7c037f00010107d2f11700c42e83
 5 COM
 6 STR
-6 ADD 9f22fc957f0001010d6cacdd5c822f44
+6 ADD a3de7c187f0001011658fe128adcdc57
 6 COM
 7 STR
-7 ADD 9f22fcae7f000101642423add898ca1b
+7 ADD a3de7c2d7f0001013929df793e9c30fd
 7 COM
 8 STR
-8 ADD 9f22fcc57f00010172213339eb6cbdcc
+8 ADD a3de7c457f000101520b7ad3e03399b1
 8 COM
 9 STR
-9 ADD 9f22fcde7f0001013fe68ce40a728b98
+9 ADD a3de7c6c7f00010160f38b421d593857
 9 COM
 10 STR
-10 ADD 9f22fd197f00010144efdd58f9dc0fc1
+10 ADD a3de7c9c7f0001013d6894053d3bef5d
 10 COM
 11 STR
-11 ADD 9f22fd2e7f000101604e9f7fcefea473
+11 ADD a3de7cb37f00010159c8e80df32caae8
 11 COM
 12 STR
-12 ADD 9f22fd447f00010153ffb7d47f31580f
+12 ADD a3de7cc77f0001012ce62a39070ad622
 12 COM
 13 STR
-13 ADD 9f22fd597f0001014965391bea71dad6
+13 ADD a3de7cdb7f00010176a3c7b12746cd6b
 13 COM
 14 STR
-14 ADD 9f22fd6e7f0001011558c52c5cd42d7e
+14 ADD a3de7cf27f00010107f4e0ba866337b8
 14 COM
 15 STR
-15 ADD 9f22fd857f0001010d5ba1ef137ca843
+15 ADD a3de7d077f0001015d86aad94e918fec
 15 COM
 16 STR
-16 ADD 9f22fda17f0001014bd66d2ff91f78fb
+16 ADD a3de7d227f0001013faa7a6a3920973f
 16 COM
 17 STR
-17 ADD 9f22fdc57f0001015559322527b04b67
+17 ADD a3de7d427f0001017e64eff0dc7f8f20
 17 COM
diff --git a/${gatein.test.tmp.dir}/jcr/jcrlucenedb/system_system/redo.log b/${gatein.test.tmp.dir}/jcr/jcrlucenedb/system_system/redo.log
index 714f21e..19eaf69 100644
--- a/${gatein.test.tmp.dir}/jcr/jcrlucenedb/system_system/redo.log
+++ b/${gatein.test.tmp.dir}/jcr/jcrlucenedb/system_system/redo.log
@@ -1,18 +1,18 @@
 0 STR
-0 ADD 9f22fa7e7f00010149af7e68297f1b25
-0 ADD 9f22fa7a7f00010164b2933f9159fca7
-0 ADD 9f22fa7f7f0001014e0add5721e856ba
-0 ADD 9f22fa7f7f0001017fdb04ed150a6006
-0 ADD 9f22fa777f0001013082f3922c0ceee8
-0 ADD 9f22fa767f0001013bd480436a966b99
-0 ADD 9f22fa7e7f0001011fe91485e5b8ec92
-0 ADD 9f22fa7d7f0001012e7cf8831851b4ab
-0 ADD 9f22fa767f0001013017703925c2889e
-0 ADD 9f22fa7d7f0001016e818805f2c0cea6
-0 ADD 9f22fa797f000101047bb2cb47625602
-0 ADD 9f22fa7a7f0001013ca1d92afd4ace06
-0 ADD 9f22fa767f00010111e55d391071bb08
-0 ADD 9f22fa767f00010116675039fab97492
-0 ADD 9f22fa7a7f0001017d487b8bda31c574
-0 ADD 9f22fa7f7f00010162b103ddbc435592
+0 ADD a3de79647f00010131ca78414a1b6095
+0 ADD a3de79667f00010123ebe8ec7740d583
+0 ADD a3de796a7f0001015fff83a91d0a685f
+0 ADD a3de796a7f0001016f9988c739046bec
+0 ADD a3de796a7f00010109ac8b372a7aa9a5
+0 ADD a3de796b7f0001017e054643e56c2fae
+0 ADD a3de79637f000101639d0e0b7ad39f26
+0 ADD a3de796c7f0001017c7ba849c0d24c6e
+0 ADD a3de79647f00010151970991a5204be4
+0 ADD a3de79677f0001012eec09627f1c0d53
+0 ADD a3de79667f0001017cdd7786a7878bf7
+0 ADD a3de79697f0001012422664938b2affb
+0 ADD a3de796b7f0001015b7ed71006413fd6
+0 ADD a3de79637f0001012c0cf70f09955462
+0 ADD a3de79637f0001016c82fba96fa9b6db
+0 ADD a3de79667f000101521bfefb021ffd0f
 0 COM
diff --git a/jcr-exo_2931395.patch b/jcr-exo_2931395.patch
new file mode 100644
index 0000000..1d39c30
--- /dev/null
+++ b/jcr-exo_2931395.patch
@@ -0,0 +1,11716 @@
+commit 2931395c39a3a1b9e23ab695b8405b5c5e39f865
+Author: BinhNV <binhnv@exoplatform.com>
+Date:   Thu Jul 19 19:08:32 2012 +0700
+
+    commit example with junit
+
+diff --git a/${gatein.test.tmp.dir}/jcr/jcrlucenedb/portal-test/_1/_0.cfs b/${gatein.test.tmp.dir}/jcr/jcrlucenedb/portal-test/_1/_0.cfs
+new file mode 100644
+index 0000000..de8da3e
+Binary files /dev/null and b/${gatein.test.tmp.dir}/jcr/jcrlucenedb/portal-test/_1/_0.cfs differ
+diff --git a/${gatein.test.tmp.dir}/jcr/jcrlucenedb/portal-test/_1/segments.gen b/${gatein.test.tmp.dir}/jcr/jcrlucenedb/portal-test/_1/segments.gen
+new file mode 100644
+index 0000000..225a55b
+Binary files /dev/null and b/${gatein.test.tmp.dir}/jcr/jcrlucenedb/portal-test/_1/segments.gen differ
+diff --git a/${gatein.test.tmp.dir}/jcr/jcrlucenedb/portal-test/_1/segments_1 b/${gatein.test.tmp.dir}/jcr/jcrlucenedb/portal-test/_1/segments_1
+new file mode 100644
+index 0000000..73f0925
+Binary files /dev/null and b/${gatein.test.tmp.dir}/jcr/jcrlucenedb/portal-test/_1/segments_1 differ
+diff --git a/${gatein.test.tmp.dir}/jcr/jcrlucenedb/portal-test/_1/segments_2 b/${gatein.test.tmp.dir}/jcr/jcrlucenedb/portal-test/_1/segments_2
+new file mode 100644
+index 0000000..356f35e
+Binary files /dev/null and b/${gatein.test.tmp.dir}/jcr/jcrlucenedb/portal-test/_1/segments_2 differ
+diff --git a/${gatein.test.tmp.dir}/jcr/jcrlucenedb/portal-test/error.log b/${gatein.test.tmp.dir}/jcr/jcrlucenedb/portal-test/error.log
+new file mode 100644
+index 0000000..ed00813
+Binary files /dev/null and b/${gatein.test.tmp.dir}/jcr/jcrlucenedb/portal-test/error.log differ
+diff --git a/${gatein.test.tmp.dir}/jcr/jcrlucenedb/portal-test/indexes b/${gatein.test.tmp.dir}/jcr/jcrlucenedb/portal-test/indexes
+new file mode 100644
+index 0000000..c393f64
+Binary files /dev/null and b/${gatein.test.tmp.dir}/jcr/jcrlucenedb/portal-test/indexes differ
+diff --git a/${gatein.test.tmp.dir}/jcr/jcrlucenedb/portal-test/offline/segments.gen b/${gatein.test.tmp.dir}/jcr/jcrlucenedb/portal-test/offline/segments.gen
+new file mode 100644
+index 0000000..63a7ec9
+Binary files /dev/null and b/${gatein.test.tmp.dir}/jcr/jcrlucenedb/portal-test/offline/segments.gen differ
+diff --git a/${gatein.test.tmp.dir}/jcr/jcrlucenedb/portal-test/offline/segments_1 b/${gatein.test.tmp.dir}/jcr/jcrlucenedb/portal-test/offline/segments_1
+new file mode 100644
+index 0000000..352dc15
+Binary files /dev/null and b/${gatein.test.tmp.dir}/jcr/jcrlucenedb/portal-test/offline/segments_1 differ
+diff --git a/${gatein.test.tmp.dir}/jcr/jcrlucenedb/portal-test/redo.log b/${gatein.test.tmp.dir}/jcr/jcrlucenedb/portal-test/redo.log
+new file mode 100644
+index 0000000..9fe7e95
+--- /dev/null
++++ b/${gatein.test.tmp.dir}/jcr/jcrlucenedb/portal-test/redo.log
+@@ -0,0 +1,58 @@
++0 STR
++0 DEL 9f22fb3c7f000101239d5fe685bd5a39
++0 ADD 9f22fb3c7f000101239d5fe685bd5a39
++0 COM
++1 STR
++1 DEL 9f22fb4d7f00010149cda7e7f5f394cd
++1 ADD 9f22fb4d7f00010149cda7e7f5f394cd
++1 COM
++2 STR
++2 DEL 9f22fb5b7f00010163376afac8d9ddd3
++2 ADD 9f22fb5b7f00010163376afac8d9ddd3
++2 COM
++3 STR
++3 DEL 9f22fb6a7f000101573980447a5989b2
++3 ADD 9f22fb6a7f000101573980447a5989b2
++3 COM
++4 STR
++4 ADD 9f22fc677f0001011e933c0763c06b68
++4 COM
++5 STR
++5 ADD 9f22fc7b7f00010172d2ee5d21bd55c0
++5 COM
++6 STR
++6 ADD 9f22fc957f0001010d6cacdd5c822f44
++6 COM
++7 STR
++7 ADD 9f22fcae7f000101642423add898ca1b
++7 COM
++8 STR
++8 ADD 9f22fcc57f00010172213339eb6cbdcc
++8 COM
++9 STR
++9 ADD 9f22fcde7f0001013fe68ce40a728b98
++9 COM
++10 STR
++10 ADD 9f22fd197f00010144efdd58f9dc0fc1
++10 COM
++11 STR
++11 ADD 9f22fd2e7f000101604e9f7fcefea473
++11 COM
++12 STR
++12 ADD 9f22fd447f00010153ffb7d47f31580f
++12 COM
++13 STR
++13 ADD 9f22fd597f0001014965391bea71dad6
++13 COM
++14 STR
++14 ADD 9f22fd6e7f0001011558c52c5cd42d7e
++14 COM
++15 STR
++15 ADD 9f22fd857f0001010d5ba1ef137ca843
++15 COM
++16 STR
++16 ADD 9f22fda17f0001014bd66d2ff91f78fb
++16 COM
++17 STR
++17 ADD 9f22fdc57f0001015559322527b04b67
++17 COM
+diff --git a/${gatein.test.tmp.dir}/jcr/jcrlucenedb/system/_1/_0.cfs b/${gatein.test.tmp.dir}/jcr/jcrlucenedb/system/_1/_0.cfs
+new file mode 100644
+index 0000000..0446286
+Binary files /dev/null and b/${gatein.test.tmp.dir}/jcr/jcrlucenedb/system/_1/_0.cfs differ
+diff --git a/${gatein.test.tmp.dir}/jcr/jcrlucenedb/system/_1/segments.gen b/${gatein.test.tmp.dir}/jcr/jcrlucenedb/system/_1/segments.gen
+new file mode 100644
+index 0000000..225a55b
+Binary files /dev/null and b/${gatein.test.tmp.dir}/jcr/jcrlucenedb/system/_1/segments.gen differ
+diff --git a/${gatein.test.tmp.dir}/jcr/jcrlucenedb/system/_1/segments_1 b/${gatein.test.tmp.dir}/jcr/jcrlucenedb/system/_1/segments_1
+new file mode 100644
+index 0000000..24ab4ba
+Binary files /dev/null and b/${gatein.test.tmp.dir}/jcr/jcrlucenedb/system/_1/segments_1 differ
+diff --git a/${gatein.test.tmp.dir}/jcr/jcrlucenedb/system/_1/segments_2 b/${gatein.test.tmp.dir}/jcr/jcrlucenedb/system/_1/segments_2
+new file mode 100644
+index 0000000..99b4464
+Binary files /dev/null and b/${gatein.test.tmp.dir}/jcr/jcrlucenedb/system/_1/segments_2 differ
+diff --git a/${gatein.test.tmp.dir}/jcr/jcrlucenedb/system/error.log b/${gatein.test.tmp.dir}/jcr/jcrlucenedb/system/error.log
+new file mode 100644
+index 0000000..ed00813
+Binary files /dev/null and b/${gatein.test.tmp.dir}/jcr/jcrlucenedb/system/error.log differ
+diff --git a/${gatein.test.tmp.dir}/jcr/jcrlucenedb/system/indexes b/${gatein.test.tmp.dir}/jcr/jcrlucenedb/system/indexes
+new file mode 100644
+index 0000000..c393f64
+Binary files /dev/null and b/${gatein.test.tmp.dir}/jcr/jcrlucenedb/system/indexes differ
+diff --git a/${gatein.test.tmp.dir}/jcr/jcrlucenedb/system/offline/segments.gen b/${gatein.test.tmp.dir}/jcr/jcrlucenedb/system/offline/segments.gen
+new file mode 100644
+index 0000000..63a7ec9
+Binary files /dev/null and b/${gatein.test.tmp.dir}/jcr/jcrlucenedb/system/offline/segments.gen differ
+diff --git a/${gatein.test.tmp.dir}/jcr/jcrlucenedb/system/offline/segments_1 b/${gatein.test.tmp.dir}/jcr/jcrlucenedb/system/offline/segments_1
+new file mode 100644
+index 0000000..c152189
+Binary files /dev/null and b/${gatein.test.tmp.dir}/jcr/jcrlucenedb/system/offline/segments_1 differ
+diff --git a/${gatein.test.tmp.dir}/jcr/jcrlucenedb/system_system/_1/_0.cfs b/${gatein.test.tmp.dir}/jcr/jcrlucenedb/system_system/_1/_0.cfs
+new file mode 100644
+index 0000000..0fc51c2
+Binary files /dev/null and b/${gatein.test.tmp.dir}/jcr/jcrlucenedb/system_system/_1/_0.cfs differ
+diff --git a/${gatein.test.tmp.dir}/jcr/jcrlucenedb/system_system/_1/segments.gen b/${gatein.test.tmp.dir}/jcr/jcrlucenedb/system_system/_1/segments.gen
+new file mode 100644
+index 0000000..225a55b
+Binary files /dev/null and b/${gatein.test.tmp.dir}/jcr/jcrlucenedb/system_system/_1/segments.gen differ
+diff --git a/${gatein.test.tmp.dir}/jcr/jcrlucenedb/system_system/_1/segments_1 b/${gatein.test.tmp.dir}/jcr/jcrlucenedb/system_system/_1/segments_1
+new file mode 100644
+index 0000000..882e120
+Binary files /dev/null and b/${gatein.test.tmp.dir}/jcr/jcrlucenedb/system_system/_1/segments_1 differ
+diff --git a/${gatein.test.tmp.dir}/jcr/jcrlucenedb/system_system/_1/segments_2 b/${gatein.test.tmp.dir}/jcr/jcrlucenedb/system_system/_1/segments_2
+new file mode 100644
+index 0000000..2c8f450
+Binary files /dev/null and b/${gatein.test.tmp.dir}/jcr/jcrlucenedb/system_system/_1/segments_2 differ
+diff --git a/${gatein.test.tmp.dir}/jcr/jcrlucenedb/system_system/error.log b/${gatein.test.tmp.dir}/jcr/jcrlucenedb/system_system/error.log
+new file mode 100644
+index 0000000..ed00813
+Binary files /dev/null and b/${gatein.test.tmp.dir}/jcr/jcrlucenedb/system_system/error.log differ
+diff --git a/${gatein.test.tmp.dir}/jcr/jcrlucenedb/system_system/indexes b/${gatein.test.tmp.dir}/jcr/jcrlucenedb/system_system/indexes
+new file mode 100644
+index 0000000..c393f64
+Binary files /dev/null and b/${gatein.test.tmp.dir}/jcr/jcrlucenedb/system_system/indexes differ
+diff --git a/${gatein.test.tmp.dir}/jcr/jcrlucenedb/system_system/offline/segments.gen b/${gatein.test.tmp.dir}/jcr/jcrlucenedb/system_system/offline/segments.gen
+new file mode 100644
+index 0000000..63a7ec9
+Binary files /dev/null and b/${gatein.test.tmp.dir}/jcr/jcrlucenedb/system_system/offline/segments.gen differ
+diff --git a/${gatein.test.tmp.dir}/jcr/jcrlucenedb/system_system/offline/segments_1 b/${gatein.test.tmp.dir}/jcr/jcrlucenedb/system_system/offline/segments_1
+new file mode 100644
+index 0000000..43e652b
+Binary files /dev/null and b/${gatein.test.tmp.dir}/jcr/jcrlucenedb/system_system/offline/segments_1 differ
+diff --git a/${gatein.test.tmp.dir}/jcr/jcrlucenedb/system_system/redo.log b/${gatein.test.tmp.dir}/jcr/jcrlucenedb/system_system/redo.log
+new file mode 100644
+index 0000000..714f21e
+--- /dev/null
++++ b/${gatein.test.tmp.dir}/jcr/jcrlucenedb/system_system/redo.log
+@@ -0,0 +1,18 @@
++0 STR
++0 ADD 9f22fa7e7f00010149af7e68297f1b25
++0 ADD 9f22fa7a7f00010164b2933f9159fca7
++0 ADD 9f22fa7f7f0001014e0add5721e856ba
++0 ADD 9f22fa7f7f0001017fdb04ed150a6006
++0 ADD 9f22fa777f0001013082f3922c0ceee8
++0 ADD 9f22fa767f0001013bd480436a966b99
++0 ADD 9f22fa7e7f0001011fe91485e5b8ec92
++0 ADD 9f22fa7d7f0001012e7cf8831851b4ab
++0 ADD 9f22fa767f0001013017703925c2889e
++0 ADD 9f22fa7d7f0001016e818805f2c0cea6
++0 ADD 9f22fa797f000101047bb2cb47625602
++0 ADD 9f22fa7a7f0001013ca1d92afd4ace06
++0 ADD 9f22fa767f00010111e55d391071bb08
++0 ADD 9f22fa767f00010116675039fab97492
++0 ADD 9f22fa7a7f0001017d487b8bda31c574
++0 ADD 9f22fa7f7f00010162b103ddbc435592
++0 COM
+diff --git a/jcr-exo_b229b49.patch b/jcr-exo_b229b49.patch
+new file mode 100644
+index 0000000..1522b0e
+--- /dev/null
++++ b/jcr-exo_b229b49.patch
+@@ -0,0 +1,9385 @@
++commit b229b49103dd36c5f3b4d7b61528fab18a1e3169
++Author: BinhNV <binhnv@exoplatform.com>
++Date:   Wed Jul 18 18:11:47 2012 +0700
++
++    commit with unit test
++
++diff --git a/.classpath b/.classpath
++index e54245b..883ab8a 100644
++--- a/.classpath
+++++ b/.classpath
++@@ -1,153 +1,183 @@
++ <?xml version="1.0" encoding="UTF-8"?>
++ <classpath>
++-	<classpathentry including="**/*.java" kind="src" output="target/test-classes" path="src/test/java"/>
++-	<classpathentry including="**/*.java" kind="src" path="src/main/java"/>
++-	<classpathentry kind="src" path="src/main/resources"/>
++-	<classpathentry kind="src" path="src/test/resources"/>
++-	<classpathentry kind="var" path="M2_REPO/javax/portlet/portlet-api/2.0/portlet-api-2.0.jar" sourcepath="M2_REPO/javax/portlet/portlet-api/2.0/portlet-api-2.0-sources.jar">
++-		<attributes>
++-			<attribute name="javadoc_location" value="jar:file:/home/binhnv/java/exo-dependencies/repository/javax/portlet/portlet-api/2.0/portlet-api-2.0-javadoc.jar!/"/>
++-		</attributes>
++-	</classpathentry>
++-	<classpathentry kind="var" path="M2_REPO/javax/faces/jsf-api/1.2_13/jsf-api-1.2_13.jar" sourcepath="M2_REPO/javax/faces/jsf-api/1.2_13/jsf-api-1.2_13-sources.jar">
++-		<attributes>
++-			<attribute name="javadoc_location" value="jar:file:/home/binhnv/java/exo-dependencies/repository/javax/faces/jsf-api/1.2_13/jsf-api-1.2_13-javadoc.jar!/"/>
++-		</attributes>
++-	</classpathentry>
++-	<classpathentry kind="var" path="M2_REPO/javax/servlet/servlet-api/2.4/servlet-api-2.4.jar" sourcepath="M2_REPO/javax/servlet/servlet-api/2.4/servlet-api-2.4-sources.jar"/>
++-	<classpathentry kind="var" path="M2_REPO/javax/activation/activation/1.1.1/activation-1.1.1.jar" sourcepath="M2_REPO/javax/activation/activation/1.1.1/activation-1.1.1-sources.jar"/>
++-	<classpathentry kind="var" path="M2_REPO/javax/transaction/jta/1.1/jta-1.1.jar" sourcepath="M2_REPO/javax/transaction/jta/1.1/jta-1.1-sources.jar"/>
++-	<classpathentry kind="var" path="M2_REPO/javax/mail/mail/1.4.4/mail-1.4.4.jar" sourcepath="M2_REPO/javax/mail/mail/1.4.4/mail-1.4.4-sources.jar"/>
++-	<classpathentry kind="var" path="M2_REPO/javax/jcr/jcr/1.0/jcr-1.0.jar" sourcepath="M2_REPO/javax/jcr/jcr/1.0/jcr-1.0-sources.jar"/>
++-	<classpathentry kind="var" path="M2_REPO/javax/xml/stream/stax-api/1.0-2/stax-api-1.0-2.jar" sourcepath="M2_REPO/javax/xml/stream/stax-api/1.0-2/stax-api-1.0-2-sources.jar"/>
++-	<classpathentry kind="var" path="M2_REPO/javax/resource/connector-api/1.5/connector-api-1.5.jar" sourcepath="M2_REPO/javax/resource/connector-api/1.5/connector-api-1.5-sources.jar"/>
++-	<classpathentry kind="var" path="M2_REPO/javax/xml/bind/jaxb-api/2.1/jaxb-api-2.1.jar" sourcepath="M2_REPO/javax/xml/bind/jaxb-api/2.1/jaxb-api-2.1-sources.jar"/>
++-	<classpathentry kind="var" path="M2_REPO/javax/ws/rs/jsr311-api/1.0/jsr311-api-1.0.jar" sourcepath="M2_REPO/javax/ws/rs/jsr311-api/1.0/jsr311-api-1.0-sources.jar"/>
++-	<classpathentry kind="var" path="M2_REPO/javax/inject/javax.inject/1/javax.inject-1.jar" sourcepath="M2_REPO/javax/inject/javax.inject/1/javax.inject-1-sources.jar"/>
++-	<classpathentry kind="var" path="M2_REPO/javax/annotation/jsr250-api/1.0/jsr250-api-1.0.jar" sourcepath="M2_REPO/javax/annotation/jsr250-api/1.0/jsr250-api-1.0-sources.jar"/>
++-	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER"/>
++-	<classpathentry kind="var" path="M2_REPO/org/hsqldb/hsqldb/2.0.0/hsqldb-2.0.0.jar"/>
++-	<classpathentry kind="var" path="M2_REPO/org/exoplatform/jcr/exo.jcr.component.ext/1.14.0-CR2/exo.jcr.component.ext-1.14.0-CR2.jar"/>
++-	<classpathentry kind="var" path="M2_REPO/org/exoplatform/kernel/exo.kernel.commons/2.3.0-CR2/exo.kernel.commons-2.3.0-CR2.jar"/>
++-	<classpathentry kind="var" path="M2_REPO/xpp3/xpp3/1.1.4c/xpp3-1.1.4c.jar" sourcepath="M2_REPO/xpp3/xpp3/1.1.4c/xpp3-1.1.4c-sources.jar"/>
++-	<classpathentry kind="var" path="M2_REPO/commons-logging/commons-logging/1.1.1/commons-logging-1.1.1.jar" sourcepath="M2_REPO/commons-logging/commons-logging/1.1.1/commons-logging-1.1.1-sources.jar">
++-		<attributes>
++-			<attribute name="javadoc_location" value="jar:file:/home/binhnv/java/exo-dependencies/repository/commons-logging/commons-logging/1.1.1/commons-logging-1.1.1-javadoc.jar!/"/>
++-		</attributes>
++-	</classpathentry>
++-	<classpathentry kind="var" path="M2_REPO/org/slf4j/slf4j-api/1.5.8/slf4j-api-1.5.8.jar" sourcepath="M2_REPO/org/slf4j/slf4j-api/1.5.8/slf4j-api-1.5.8-sources.jar"/>
++-	<classpathentry kind="var" path="M2_REPO/org/exoplatform/kernel/exo.kernel.container/2.3.0-CR2/exo.kernel.container-2.3.0-CR2.jar"/>
++-	<classpathentry kind="var" path="M2_REPO/org/exoplatform/tool/exo.tool.framework.junit/1.2.1-GA/exo.tool.framework.junit-1.2.1-GA.jar" sourcepath="M2_REPO/org/exoplatform/tool/exo.tool.framework.junit/1.2.1-GA/exo.tool.framework.junit-1.2.1-GA-sources.jar"/>
++-	<classpathentry kind="var" path="M2_REPO/junit/junit/3.8.1/junit-3.8.1.jar" sourcepath="M2_REPO/junit/junit/3.8.1/junit-3.8.1-sources.jar"/>
++-	<classpathentry kind="var" path="M2_REPO/picocontainer/picocontainer/1.1/picocontainer-1.1.jar"/>
++-	<classpathentry kind="var" path="M2_REPO/jmock/jmock/1.0.1/jmock-1.0.1.jar" sourcepath="M2_REPO/jmock/jmock/1.0.1/jmock-1.0.1-sources.jar">
++-		<attributes>
++-			<attribute name="javadoc_location" value="jar:file:/home/binhnv/java/exo-dependencies/repository/jmock/jmock/1.0.1/jmock-1.0.1-javadoc.jar!/"/>
++-		</attributes>
++-	</classpathentry>
++-	<classpathentry kind="var" path="M2_REPO/xstream/xstream/1.0.2/xstream-1.0.2.jar"/>
++-	<classpathentry kind="var" path="M2_REPO/commons-beanutils/commons-beanutils/1.8.3/commons-beanutils-1.8.3.jar" sourcepath="M2_REPO/commons-beanutils/commons-beanutils/1.8.3/commons-beanutils-1.8.3-sources.jar"/>
++-	<classpathentry kind="var" path="M2_REPO/org/jibx/jibx-run/1.2.2/jibx-run-1.2.2.jar"/>
++-	<classpathentry kind="var" path="M2_REPO/org/jibx/jibx-bind/1.2.2/jibx-bind-1.2.2.jar"/>
++-	<classpathentry kind="var" path="M2_REPO/bcel/bcel/5.1/bcel-5.1.jar" sourcepath="M2_REPO/bcel/bcel/5.1/bcel-5.1-sources.jar"/>
++-	<classpathentry kind="var" path="M2_REPO/regexp/regexp/1.2/regexp-1.2.jar"/>
++-	<classpathentry kind="var" path="M2_REPO/org/jibx/jibx-extras/1.2.2/jibx-extras-1.2.2.jar"/>
++-	<classpathentry kind="var" path="M2_REPO/org/exoplatform/kernel/exo.kernel.component.command/2.3.0-CR2/exo.kernel.component.command-2.3.0-CR2.jar"/>
++-	<classpathentry kind="var" path="M2_REPO/commons-chain/commons-chain/1.2/commons-chain-1.2.jar" sourcepath="M2_REPO/commons-chain/commons-chain/1.2/commons-chain-1.2-sources.jar"/>
++-	<classpathentry kind="var" path="M2_REPO/commons-digester/commons-digester/1.8.1/commons-digester-1.8.1.jar" sourcepath="M2_REPO/commons-digester/commons-digester/1.8.1/commons-digester-1.8.1-sources.jar"/>
++-	<classpathentry kind="var" path="M2_REPO/xml-apis/xml-apis/1.0.b2/xml-apis-1.0.b2.jar" sourcepath="M2_REPO/xml-apis/xml-apis/1.0.b2/xml-apis-1.0.b2-sources.jar"/>
++-	<classpathentry kind="var" path="M2_REPO/org/exoplatform/core/exo.core.component.database/2.4.0-CR2/exo.core.component.database-2.4.0-CR2.jar"/>
++-	<classpathentry kind="var" path="M2_REPO/org/exoplatform/kernel/exo.kernel.component.common/2.3.0-CR2/exo.kernel.component.common-2.3.0-CR2.jar"/>
++-	<classpathentry kind="var" path="M2_REPO/org/ow2/jotm/jotm-core/2.1.9/jotm-core-2.1.9.jar"/>
++-	<classpathentry kind="var" path="M2_REPO/org/ow2/spec/ee/ow2-jta-1.1-spec/1.0-M1/ow2-jta-1.1-spec-1.0-M1.jar"/>
++-	<classpathentry kind="var" path="M2_REPO/org/ow2/carol/carol/3.0.6/carol-3.0.6.jar"/>
++-	<classpathentry kind="var" path="M2_REPO/org/ow2/carol/carol-interceptors/1.0.1/carol-interceptors-1.0.1.jar"/>
++-	<classpathentry kind="var" path="M2_REPO/org/ow2/carol/irmi/irmi/1.1.2/irmi-1.1.2.jar"/>
++-	<classpathentry kind="var" path="M2_REPO/commons-collections/commons-collections/3.2.1/commons-collections-3.2.1.jar" sourcepath="M2_REPO/commons-collections/commons-collections/3.2.1/commons-collections-3.2.1-sources.jar"/>
++-	<classpathentry kind="var" path="M2_REPO/org/jacorb/jacorb/2.2.3-jonas-patch-20071018/jacorb-2.2.3-jonas-patch-20071018.jar"/>
++-	<classpathentry kind="var" path="M2_REPO/avalon-framework/avalon-framework/4.1.5/avalon-framework-4.1.5.jar"/>
++-	<classpathentry kind="var" path="M2_REPO/org/jacorb/jacorb-idl/2.2.3-jonas-patch-20071018/jacorb-idl-2.2.3-jonas-patch-20071018.jar"/>
++-	<classpathentry kind="var" path="M2_REPO/logkit/logkit/1.2/logkit-1.2.jar"/>
++-	<classpathentry kind="var" path="M2_REPO/commons-logging/commons-logging-api/1.1/commons-logging-api-1.1.jar"/>
++-	<classpathentry kind="var" path="M2_REPO/org/objectweb/howl/howl/1.0.1-1/howl-1.0.1-1.jar"/>
++-	<classpathentry kind="var" path="M2_REPO/org/quartz-scheduler/quartz/1.8.4/quartz-1.8.4.jar"/>
++-	<classpathentry kind="var" path="M2_REPO/org/jgroups/jgroups/2.11.1.Final/jgroups-2.11.1.Final.jar" sourcepath="M2_REPO/org/jgroups/jgroups/2.11.1.Final/jgroups-2.11.1.Final-sources.jar"/>
++-	<classpathentry kind="var" path="M2_REPO/org/exoplatform/kernel/exo.kernel.component.cache/2.3.0-CR2/exo.kernel.component.cache-2.3.0-CR2.jar"/>
++-	<classpathentry kind="var" path="M2_REPO/com/experlog/xapool/1.5.0/xapool-1.5.0.jar" sourcepath="M2_REPO/com/experlog/xapool/1.5.0/xapool-1.5.0-sources.jar"/>
++-	<classpathentry kind="var" path="M2_REPO/org/hibernate/hibernate-core/3.3.2.GA/hibernate-core-3.3.2.GA.jar" sourcepath="M2_REPO/org/hibernate/hibernate-core/3.3.2.GA/hibernate-core-3.3.2.GA-sources.jar"/>
++-	<classpathentry kind="var" path="M2_REPO/antlr/antlr/2.7.6/antlr-2.7.6.jar" sourcepath="M2_REPO/antlr/antlr/2.7.6/antlr-2.7.6-sources.jar"/>
++-	<classpathentry kind="var" path="M2_REPO/dom4j/dom4j/1.6.1/dom4j-1.6.1.jar" sourcepath="M2_REPO/dom4j/dom4j/1.6.1/dom4j-1.6.1-sources.jar"/>
++-	<classpathentry kind="var" path="M2_REPO/org/hibernate/hibernate-annotations/3.4.0.GA/hibernate-annotations-3.4.0.GA.jar" sourcepath="M2_REPO/org/hibernate/hibernate-annotations/3.4.0.GA/hibernate-annotations-3.4.0.GA-sources.jar"/>
++-	<classpathentry kind="var" path="M2_REPO/org/hibernate/ejb3-persistence/1.0.2.GA/ejb3-persistence-1.0.2.GA.jar" sourcepath="M2_REPO/org/hibernate/ejb3-persistence/1.0.2.GA/ejb3-persistence-1.0.2.GA-sources.jar"/>
++-	<classpathentry kind="var" path="M2_REPO/org/hibernate/hibernate-commons-annotations/3.1.0.GA/hibernate-commons-annotations-3.1.0.GA.jar" sourcepath="M2_REPO/org/hibernate/hibernate-commons-annotations/3.1.0.GA/hibernate-commons-annotations-3.1.0.GA-sources.jar"/>
++-	<classpathentry kind="var" path="M2_REPO/commons-dbcp/commons-dbcp/1.4/commons-dbcp-1.4.jar" sourcepath="M2_REPO/commons-dbcp/commons-dbcp/1.4/commons-dbcp-1.4-sources.jar"/>
++-	<classpathentry kind="var" path="M2_REPO/commons-pool/commons-pool/1.5.5/commons-pool-1.5.5.jar" sourcepath="M2_REPO/commons-pool/commons-pool/1.5.5/commons-pool-1.5.5-sources.jar"/>
++-	<classpathentry kind="var" path="M2_REPO/org/exoplatform/core/exo.core.component.document/2.4.0-CR2/exo.core.component.document-2.4.0-CR2.jar"/>
++-	<classpathentry kind="var" path="M2_REPO/org/apache/pdfbox/pdfbox/1.4.0/pdfbox-1.4.0.jar"/>
++-	<classpathentry kind="var" path="M2_REPO/org/apache/pdfbox/fontbox/1.4.0/fontbox-1.4.0.jar"/>
++-	<classpathentry kind="var" path="M2_REPO/org/apache/pdfbox/jempbox/1.4.0/jempbox-1.4.0.jar"/>
++-	<classpathentry kind="var" path="M2_REPO/org/htmlparser/htmlparser/1.6/htmlparser-1.6.jar"/>
++-	<classpathentry kind="var" path="M2_REPO/org/apache/poi/poi/3.6/poi-3.6.jar" sourcepath="M2_REPO/org/apache/poi/poi/3.6/poi-3.6-sources.jar"/>
++-	<classpathentry kind="var" path="M2_REPO/org/apache/poi/poi-scratchpad/3.6/poi-scratchpad-3.6.jar" sourcepath="M2_REPO/org/apache/poi/poi-scratchpad/3.6/poi-scratchpad-3.6-sources.jar"/>
++-	<classpathentry kind="var" path="M2_REPO/org/apache/poi/poi-ooxml/3.6/poi-ooxml-3.6.jar" sourcepath="M2_REPO/org/apache/poi/poi-ooxml/3.6/poi-ooxml-3.6-sources.jar"/>
++-	<classpathentry kind="var" path="M2_REPO/org/apache/poi/poi-ooxml-schemas/3.6/poi-ooxml-schemas-3.6.jar"/>
++-	<classpathentry kind="var" path="M2_REPO/org/apache/xmlbeans/xmlbeans/2.3.0/xmlbeans-2.3.0.jar"/>
++-	<classpathentry kind="var" path="M2_REPO/stax/stax-api/1.0.1/stax-api-1.0.1.jar"/>
++-	<classpathentry kind="var" path="M2_REPO/org/apache/geronimo/specs/geronimo-stax-api_1.0_spec/1.0.1/geronimo-stax-api_1.0_spec-1.0.1.jar" sourcepath="M2_REPO/org/apache/geronimo/specs/geronimo-stax-api_1.0_spec/1.0.1/geronimo-stax-api_1.0_spec-1.0.1-sources.jar"/>
++-	<classpathentry kind="var" path="M2_REPO/org/apache/tika/tika-core/0.7/tika-core-0.7.jar" sourcepath="M2_REPO/org/apache/tika/tika-core/0.7/tika-core-0.7-sources.jar"/>
++-	<classpathentry kind="var" path="M2_REPO/org/apache/tika/tika-parsers/0.7/tika-parsers-0.7.jar" sourcepath="M2_REPO/org/apache/tika/tika-parsers/0.7/tika-parsers-0.7-sources.jar"/>
++-	<classpathentry kind="var" path="M2_REPO/org/apache/commons/commons-compress/1.0/commons-compress-1.0.jar" sourcepath="M2_REPO/org/apache/commons/commons-compress/1.0/commons-compress-1.0-sources.jar"/>
++-	<classpathentry kind="var" path="M2_REPO/org/bouncycastle/bcmail-jdk15/1.45/bcmail-jdk15-1.45.jar" sourcepath="M2_REPO/org/bouncycastle/bcmail-jdk15/1.45/bcmail-jdk15-1.45-sources.jar"/>
++-	<classpathentry kind="var" path="M2_REPO/org/bouncycastle/bcprov-jdk15/1.45/bcprov-jdk15-1.45.jar" sourcepath="M2_REPO/org/bouncycastle/bcprov-jdk15/1.45/bcprov-jdk15-1.45-sources.jar"/>
++-	<classpathentry kind="var" path="M2_REPO/org/ccil/cowan/tagsoup/tagsoup/1.2/tagsoup-1.2.jar"/>
++-	<classpathentry kind="var" path="M2_REPO/asm/asm/3.1/asm-3.1.jar" sourcepath="M2_REPO/asm/asm/3.1/asm-3.1-sources.jar"/>
++-	<classpathentry kind="var" path="M2_REPO/log4j/log4j/1.2.14/log4j-1.2.14.jar" sourcepath="M2_REPO/log4j/log4j/1.2.14/log4j-1.2.14-sources.jar"/>
++-	<classpathentry kind="var" path="M2_REPO/com/drewnoakes/metadata-extractor/2.4.0-beta-1/metadata-extractor-2.4.0-beta-1.jar" sourcepath="M2_REPO/com/drewnoakes/metadata-extractor/2.4.0-beta-1/metadata-extractor-2.4.0-beta-1-sources.jar"/>
++-	<classpathentry kind="var" path="M2_REPO/org/exoplatform/core/exo.core.component.organization.api/2.4.0-CR2/exo.core.component.organization.api-2.4.0-CR2.jar"/>
++-	<classpathentry kind="var" path="M2_REPO/org/exoplatform/core/exo.core.component.security.core/2.4.0-CR2/exo.core.component.security.core-2.4.0-CR2.jar"/>
++-	<classpathentry kind="var" path="M2_REPO/commons-lang/commons-lang/2.6/commons-lang-2.6.jar" sourcepath="M2_REPO/commons-lang/commons-lang/2.6/commons-lang-2.6-sources.jar"/>
++-	<classpathentry kind="var" path="M2_REPO/xdoclet/xdoclet-hibernate-module/1.2.3/xdoclet-hibernate-module-1.2.3.jar"/>
++-	<classpathentry kind="var" path="M2_REPO/xdoclet/xdoclet/1.2.3/xdoclet-1.2.3.jar" sourcepath="M2_REPO/xdoclet/xdoclet/1.2.3/xdoclet-1.2.3-sources.jar"/>
++-	<classpathentry kind="var" path="M2_REPO/xdoclet/xdoclet-xdoclet-module/1.2.3/xdoclet-xdoclet-module-1.2.3.jar"/>
++-	<classpathentry kind="var" path="M2_REPO/xdoclet/xjavadoc/1.2.3/xjavadoc-1.2.3.jar"/>
++-	<classpathentry kind="var" path="M2_REPO/org/exoplatform/jcr/exo.jcr.component.core/1.14.0-CR2/exo.jcr.component.core-1.14.0-CR2.jar"/>
++-	<classpathentry kind="var" path="M2_REPO/org/apache/lucene/lucene-core/2.9.4/lucene-core-2.9.4.jar" sourcepath="M2_REPO/org/apache/lucene/lucene-core/2.9.4/lucene-core-2.9.4-sources.jar"/>
++-	<classpathentry kind="var" path="M2_REPO/org/apache/lucene/lucene-spellchecker/2.9.4/lucene-spellchecker-2.9.4.jar" sourcepath="M2_REPO/org/apache/lucene/lucene-spellchecker/2.9.4/lucene-spellchecker-2.9.4-sources.jar"/>
++-	<classpathentry kind="var" path="M2_REPO/org/apache/lucene/lucene-memory/2.9.4/lucene-memory-2.9.4.jar" sourcepath="M2_REPO/org/apache/lucene/lucene-memory/2.9.4/lucene-memory-2.9.4-sources.jar"/>
++-	<classpathentry kind="var" path="M2_REPO/com/sun/xml/stream/sjsxp/1.0.1/sjsxp-1.0.1.jar"/>
++-	<classpathentry kind="var" path="M2_REPO/concurrent/concurrent/1.3.4/concurrent-1.3.4.jar" sourcepath="M2_REPO/concurrent/concurrent/1.3.4/concurrent-1.3.4-sources.jar"/>
++-	<classpathentry kind="var" path="M2_REPO/commons-io/commons-io/1.4/commons-io-1.4.jar" sourcepath="M2_REPO/commons-io/commons-io/1.4/commons-io-1.4-sources.jar"/>
++-	<classpathentry kind="var" path="M2_REPO/jboss/jbossts/jbossjts/4.6.1.GA/jbossjts-4.6.1.GA.jar"/>
++-	<classpathentry kind="var" path="M2_REPO/jboss/jbossts/jbossts-common/4.6.1.GA/jbossts-common-4.6.1.GA.jar"/>
++-	<classpathentry kind="var" path="M2_REPO/org/apache/ws/commons/ws-commons-util/1.0.1/ws-commons-util-1.0.1.jar" sourcepath="M2_REPO/org/apache/ws/commons/ws-commons-util/1.0.1/ws-commons-util-1.0.1-sources.jar"/>
++-	<classpathentry kind="var" path="M2_REPO/org/jboss/cache/jbosscache-core/3.2.6.GA/jbosscache-core-3.2.6.GA.jar" sourcepath="M2_REPO/org/jboss/cache/jbosscache-core/3.2.6.GA/jbosscache-core-3.2.6.GA-sources.jar"/>
++-	<classpathentry kind="var" path="M2_REPO/org/jboss/javaee/jboss-transaction-api/1.0.1.GA/jboss-transaction-api-1.0.1.GA.jar" sourcepath="M2_REPO/org/jboss/javaee/jboss-transaction-api/1.0.1.GA/jboss-transaction-api-1.0.1.GA-sources.jar">
++-		<attributes>
++-			<attribute name="javadoc_location" value="jar:file:/home/binhnv/java/exo-dependencies/repository/org/jboss/javaee/jboss-transaction-api/1.0.1.GA/jboss-transaction-api-1.0.1.GA-javadoc.jar!/"/>
++-		</attributes>
++-	</classpathentry>
++-	<classpathentry kind="var" path="M2_REPO/org/jboss/jboss-common-core/2.2.14.GA/jboss-common-core-2.2.14.GA.jar" sourcepath="M2_REPO/org/jboss/jboss-common-core/2.2.14.GA/jboss-common-core-2.2.14.GA-sources.jar"/>
++-	<classpathentry kind="var" path="M2_REPO/org/jboss/logging/jboss-logging-spi/2.0.5.GA/jboss-logging-spi-2.0.5.GA.jar" sourcepath="M2_REPO/org/jboss/logging/jboss-logging-spi/2.0.5.GA/jboss-logging-spi-2.0.5.GA-sources.jar">
++-		<attributes>
++-			<attribute name="javadoc_location" value="jar:file:/home/binhnv/java/exo-dependencies/repository/org/jboss/logging/jboss-logging-spi/2.0.5.GA/jboss-logging-spi-2.0.5.GA-javadoc.jar!/"/>
++-		</attributes>
++-	</classpathentry>
++-	<classpathentry kind="var" path="M2_REPO/org/infinispan/infinispan-core/4.2.1.FINAL/infinispan-core-4.2.1.FINAL.jar"/>
++-	<classpathentry kind="var" path="M2_REPO/org/jboss/marshalling/river/1.2.3.GA/river-1.2.3.GA.jar"/>
++-	<classpathentry kind="var" path="M2_REPO/org/jboss/marshalling/marshalling-api/1.2.3.GA/marshalling-api-1.2.3.GA.jar"/>
++-	<classpathentry kind="var" path="M2_REPO/org/rhq/helpers/rhq-pluginAnnotations/3.0.1/rhq-pluginAnnotations-3.0.1.jar"/>
++-	<classpathentry kind="var" path="M2_REPO/i18nlog/i18nlog/1.0.10/i18nlog-1.0.10.jar"/>
++-	<classpathentry kind="var" path="M2_REPO/org/infinispan/infinispan-cachestore-jdbc/4.2.1.FINAL/infinispan-cachestore-jdbc-4.2.1.FINAL.jar"/>
++-	<classpathentry kind="var" path="M2_REPO/c3p0/c3p0/0.9.1.2/c3p0-0.9.1.2.jar"/>
++-	<classpathentry kind="var" path="M2_REPO/org/exoplatform/core/exo.core.component.script.groovy/2.4.0-CR2/exo.core.component.script.groovy-2.4.0-CR2.jar"/>
++-	<classpathentry kind="var" path="M2_REPO/org/codehaus/groovy/groovy-all/1.7.6/groovy-all-1.7.6.jar" sourcepath="M2_REPO/org/codehaus/groovy/groovy-all/1.7.6/groovy-all-1.7.6-sources.jar"/>
++-	<classpathentry kind="var" path="M2_REPO/org/exoplatform/ws/exo.ws.rest.core/2.2.0-CR2/exo.ws.rest.core-2.2.0-CR2.jar"/>
++-	<classpathentry kind="var" path="M2_REPO/org/exoplatform/ws/exo.ws.frameworks.json/2.2.0-CR2/exo.ws.frameworks.json-2.2.0-CR2.jar"/>
++-	<classpathentry kind="var" path="M2_REPO/net/sf/jtidy/jtidy/r938/jtidy-r938.jar" sourcepath="M2_REPO/net/sf/jtidy/jtidy/r938/jtidy-r938-sources.jar"/>
++-	<classpathentry kind="var" path="M2_REPO/commons-fileupload/commons-fileupload/1.2.1/commons-fileupload-1.2.1.jar" sourcepath="M2_REPO/commons-fileupload/commons-fileupload/1.2.1/commons-fileupload-1.2.1-sources.jar"/>
++-	<classpathentry kind="var" path="M2_REPO/org/exoplatform/ws/exo.ws.rest.ext/2.2.0-CR2/exo.ws.rest.ext-2.2.0-CR2.jar"/>
++-	<classpathentry kind="var" path="M2_REPO/org/exoplatform/core/exo.core.component.xml-processing/2.4.0-CR2/exo.core.component.xml-processing-2.4.0-CR2.jar"/>
++-	<classpathentry kind="var" path="M2_REPO/org/exoplatform/ws/exo.ws.commons/2.2.0-CR2/exo.ws.commons-2.2.0-CR2.jar"/>
++-	<classpathentry kind="var" path="M2_REPO/org/slf4j/slf4j-log4j12/1.5.8/slf4j-log4j12-1.5.8.jar" sourcepath="M2_REPO/org/slf4j/slf4j-log4j12/1.5.8/slf4j-log4j12-1.5.8-sources.jar"/>
++-	<classpathentry kind="output" path="target/classes"/>
++-</classpath>
+++  <classpathentry kind="src" path="src/test/java" output="target/test-classes" including="**/*.java"/>
+++  <classpathentry kind="src" path="src/test/resources" output="target/test-classes" including="**/*.properties|**/*.xml|**/*.conf" excluding="**/*.java"/>
+++  <classpathentry kind="src" path="src/main/java" including="**/*.java"/>
+++  <classpathentry kind="src" path="src/main/resources" excluding="**/*.java"/>
+++  <classpathentry kind="output" path="target/classes"/>
+++  <classpathentry kind="var" path="M2_REPO/javax/portlet/portlet-api/2.0/portlet-api-2.0.jar" sourcepath="M2_REPO/javax/portlet/portlet-api/2.0/portlet-api-2.0-sources.jar">
+++    <attributes>
+++      <attribute value="jar:file:/home/binhnv/java/exo-dependencies/repository/javax/portlet/portlet-api/2.0/portlet-api-2.0-javadoc.jar!/" name="javadoc_location"/>
+++    </attributes>
+++  </classpathentry>
+++  <classpathentry kind="var" path="M2_REPO/javax/faces/jsf-api/1.2_13/jsf-api-1.2_13.jar" sourcepath="M2_REPO/javax/faces/jsf-api/1.2_13/jsf-api-1.2_13-sources.jar">
+++    <attributes>
+++      <attribute value="jar:file:/home/binhnv/java/exo-dependencies/repository/javax/faces/jsf-api/1.2_13/jsf-api-1.2_13-javadoc.jar!/" name="javadoc_location"/>
+++    </attributes>
+++  </classpathentry>
+++  <classpathentry kind="var" path="M2_REPO/javax/servlet/servlet-api/2.4/servlet-api-2.4.jar" sourcepath="M2_REPO/javax/servlet/servlet-api/2.4/servlet-api-2.4-sources.jar"/>
+++  <classpathentry kind="var" path="M2_REPO/javax/activation/activation/1.1.1/activation-1.1.1.jar" sourcepath="M2_REPO/javax/activation/activation/1.1.1/activation-1.1.1-sources.jar"/>
+++  <classpathentry kind="var" path="M2_REPO/javax/mail/mail/1.4.4/mail-1.4.4.jar" sourcepath="M2_REPO/javax/mail/mail/1.4.4/mail-1.4.4-sources.jar"/>
+++  <classpathentry kind="var" path="M2_REPO/javax/transaction/jta/1.1/jta-1.1.jar" sourcepath="M2_REPO/javax/transaction/jta/1.1/jta-1.1-sources.jar"/>
+++  <classpathentry kind="var" path="M2_REPO/javax/jcr/jcr/1.0/jcr-1.0.jar" sourcepath="M2_REPO/javax/jcr/jcr/1.0/jcr-1.0-sources.jar"/>
+++  <classpathentry kind="var" path="M2_REPO/javax/xml/stream/stax-api/1.0/stax-api-1.0.jar" sourcepath="M2_REPO/javax/xml/stream/stax-api/1.0/stax-api-1.0-sources.jar"/>
+++  <classpathentry kind="var" path="M2_REPO/javax/xml/bind/jaxb-api/2.1/jaxb-api-2.1.jar" sourcepath="M2_REPO/javax/xml/bind/jaxb-api/2.1/jaxb-api-2.1-sources.jar"/>
+++  <classpathentry kind="var" path="M2_REPO/javax/ws/rs/jsr311-api/1.0/jsr311-api-1.0.jar" sourcepath="M2_REPO/javax/ws/rs/jsr311-api/1.0/jsr311-api-1.0-sources.jar"/>
+++  <classpathentry kind="var" path="M2_REPO/javax/inject/javax.inject/1/javax.inject-1.jar" sourcepath="M2_REPO/javax/inject/javax.inject/1/javax.inject-1-sources.jar"/>
+++  <classpathentry kind="var" path="M2_REPO/javax/annotation/jsr250-api/1.0/jsr250-api-1.0.jar" sourcepath="M2_REPO/javax/annotation/jsr250-api/1.0/jsr250-api-1.0-sources.jar"/>
+++  <classpathentry kind="var" path="M2_REPO/javax/servlet/jsp/jsp-api/2.1/jsp-api-2.1.jar" sourcepath="M2_REPO/javax/servlet/jsp/jsp-api/2.1/jsp-api-2.1-sources.jar"/>
+++  <classpathentry kind="var" path="M2_REPO/javax/ccpp/ccpp/1.0/ccpp-1.0.jar"/>
+++  <classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER"/>
+++  <classpathentry kind="var" path="M2_REPO/org/exoplatform/kernel/exo.kernel.component.common/2.3.8-GA-SNAPSHOT/exo.kernel.component.common-2.3.8-GA-SNAPSHOT.jar" sourcepath="M2_REPO/org/exoplatform/kernel/exo.kernel.component.common/2.3.8-GA-SNAPSHOT/exo.kernel.component.common-2.3.8-GA-SNAPSHOT-sources.jar"/>
+++  <classpathentry kind="var" path="M2_REPO/org/exoplatform/tool/exo.tool.framework.junit/1.2.1-GA/exo.tool.framework.junit-1.2.1-GA.jar" sourcepath="M2_REPO/org/exoplatform/tool/exo.tool.framework.junit/1.2.1-GA/exo.tool.framework.junit-1.2.1-GA-sources.jar"/>
+++  <classpathentry kind="var" path="M2_REPO/junit/junit/3.8.2/junit-3.8.2.jar" sourcepath="M2_REPO/junit/junit/3.8.2/junit-3.8.2-sources.jar"/>
+++  <classpathentry kind="var" path="M2_REPO/org/exoplatform/kernel/exo.kernel.container/2.3.8-GA-SNAPSHOT/exo.kernel.container-2.3.8-GA-SNAPSHOT.jar" sourcepath="M2_REPO/org/exoplatform/kernel/exo.kernel.container/2.3.8-GA-SNAPSHOT/exo.kernel.container-2.3.8-GA-SNAPSHOT-sources.jar"/>
+++  <classpathentry kind="var" path="M2_REPO/org/exoplatform/kernel/exo.kernel.commons/2.3.8-GA-SNAPSHOT/exo.kernel.commons-2.3.8-GA-SNAPSHOT.jar" sourcepath="M2_REPO/org/exoplatform/kernel/exo.kernel.commons/2.3.8-GA-SNAPSHOT/exo.kernel.commons-2.3.8-GA-SNAPSHOT-sources.jar"/>
+++  <classpathentry kind="var" path="M2_REPO/eu/medsea/mimeutil/mime-util/2.1.3/mime-util-2.1.3.jar"/>
+++  <classpathentry kind="var" path="M2_REPO/org/slf4j/slf4j-api/1.5.8/slf4j-api-1.5.8.jar" sourcepath="M2_REPO/org/slf4j/slf4j-api/1.5.8/slf4j-api-1.5.8-sources.jar"/>
+++  <classpathentry kind="var" path="M2_REPO/xpp3/xpp3/1.1.4c/xpp3-1.1.4c.jar" sourcepath="M2_REPO/xpp3/xpp3/1.1.4c/xpp3-1.1.4c-sources.jar"/>
+++  <classpathentry kind="var" path="M2_REPO/commons-logging/commons-logging/1.1.1/commons-logging-1.1.1.jar" sourcepath="M2_REPO/commons-logging/commons-logging/1.1.1/commons-logging-1.1.1-sources.jar">
+++    <attributes>
+++      <attribute value="jar:file:/home/binhnv/java/exo-dependencies/repository/commons-logging/commons-logging/1.1.1/commons-logging-1.1.1-javadoc.jar!/" name="javadoc_location"/>
+++    </attributes>
+++  </classpathentry>
+++  <classpathentry kind="var" path="M2_REPO/picocontainer/picocontainer/1.1/picocontainer-1.1.jar"/>
+++  <classpathentry kind="var" path="M2_REPO/jmock/jmock/1.0.1/jmock-1.0.1.jar" sourcepath="M2_REPO/jmock/jmock/1.0.1/jmock-1.0.1-sources.jar">
+++    <attributes>
+++      <attribute value="jar:file:/home/binhnv/java/exo-dependencies/repository/jmock/jmock/1.0.1/jmock-1.0.1-javadoc.jar!/" name="javadoc_location"/>
+++    </attributes>
+++  </classpathentry>
+++  <classpathentry kind="var" path="M2_REPO/xstream/xstream/1.0.2/xstream-1.0.2.jar"/>
+++  <classpathentry kind="var" path="M2_REPO/commons-beanutils/commons-beanutils/1.8.3/commons-beanutils-1.8.3.jar" sourcepath="M2_REPO/commons-beanutils/commons-beanutils/1.8.3/commons-beanutils-1.8.3-sources.jar"/>
+++  <classpathentry kind="var" path="M2_REPO/org/jibx/jibx-run/1.2.2/jibx-run-1.2.2.jar"/>
+++  <classpathentry kind="var" path="M2_REPO/org/jibx/jibx-bind/1.2.2/jibx-bind-1.2.2.jar"/>
+++  <classpathentry kind="var" path="M2_REPO/bcel/bcel/5.1/bcel-5.1.jar" sourcepath="M2_REPO/bcel/bcel/5.1/bcel-5.1-sources.jar"/>
+++  <classpathentry kind="var" path="M2_REPO/regexp/regexp/1.2/regexp-1.2.jar"/>
+++  <classpathentry kind="var" path="M2_REPO/org/jibx/jibx-extras/1.2.2/jibx-extras-1.2.2.jar"/>
+++  <classpathentry kind="var" path="M2_REPO/quartz/quartz/1.5.2/quartz-1.5.2.jar" sourcepath="M2_REPO/quartz/quartz/1.5.2/quartz-1.5.2-sources.jar"/>
+++  <classpathentry kind="var" path="M2_REPO/org/jgroups/jgroups/2.6.20.Final/jgroups-2.6.20.Final.jar" sourcepath="M2_REPO/org/jgroups/jgroups/2.6.20.Final/jgroups-2.6.20.Final-sources.jar"/>
+++  <classpathentry kind="var" path="M2_REPO/org/exoplatform/core/exo.core.component.organization.api/2.4.8-GA-SNAPSHOT/exo.core.component.organization.api-2.4.8-GA-SNAPSHOT.jar" sourcepath="M2_REPO/org/exoplatform/core/exo.core.component.organization.api/2.4.8-GA-SNAPSHOT/exo.core.component.organization.api-2.4.8-GA-SNAPSHOT-sources.jar"/>
+++  <classpathentry kind="var" path="M2_REPO/org/exoplatform/kernel/exo.kernel.component.cache/2.3.8-GA-SNAPSHOT/exo.kernel.component.cache-2.3.8-GA-SNAPSHOT.jar" sourcepath="M2_REPO/org/exoplatform/kernel/exo.kernel.component.cache/2.3.8-GA-SNAPSHOT/exo.kernel.component.cache-2.3.8-GA-SNAPSHOT-sources.jar"/>
+++  <classpathentry kind="var" path="M2_REPO/org/exoplatform/core/exo.core.component.security.core/2.4.8-GA-SNAPSHOT/exo.core.component.security.core-2.4.8-GA-SNAPSHOT.jar" sourcepath="M2_REPO/org/exoplatform/core/exo.core.component.security.core/2.4.8-GA-SNAPSHOT/exo.core.component.security.core-2.4.8-GA-SNAPSHOT-sources.jar"/>
+++  <classpathentry kind="var" path="M2_REPO/commons-lang/commons-lang/2.6/commons-lang-2.6.jar" sourcepath="M2_REPO/commons-lang/commons-lang/2.6/commons-lang-2.6-sources.jar"/>
+++  <classpathentry kind="var" path="M2_REPO/xdoclet/xdoclet-hibernate-module/1.2.3/xdoclet-hibernate-module-1.2.3.jar"/>
+++  <classpathentry kind="var" path="M2_REPO/xdoclet/xdoclet/1.2.3/xdoclet-1.2.3.jar" sourcepath="M2_REPO/xdoclet/xdoclet/1.2.3/xdoclet-1.2.3-sources.jar"/>
+++  <classpathentry kind="var" path="M2_REPO/commons-collections/commons-collections/3.2.1/commons-collections-3.2.1.jar" sourcepath="M2_REPO/commons-collections/commons-collections/3.2.1/commons-collections-3.2.1-sources.jar"/>
+++  <classpathentry kind="var" path="M2_REPO/xdoclet/xdoclet-xdoclet-module/1.2.3/xdoclet-xdoclet-module-1.2.3.jar"/>
+++  <classpathentry kind="var" path="M2_REPO/xdoclet/xjavadoc/1.2.3/xjavadoc-1.2.3.jar"/>
+++  <classpathentry kind="var" path="M2_REPO/org/exoplatform/portal/exo.portal.component.test.core/3.2.5-PLF-SNAPSHOT/exo.portal.component.test.core-3.2.5-PLF-SNAPSHOT.jar" sourcepath="M2_REPO/org/exoplatform/portal/exo.portal.component.test.core/3.2.5-PLF-SNAPSHOT/exo.portal.component.test.core-3.2.5-PLF-SNAPSHOT-sources.jar"/>
+++  <classpathentry kind="var" path="M2_REPO/org/gatein/common/common-logging/2.0.4-GA/common-logging-2.0.4-GA.jar" sourcepath="M2_REPO/org/gatein/common/common-logging/2.0.4-GA/common-logging-2.0.4-GA-sources.jar"/>
+++  <classpathentry kind="var" path="M2_REPO/commons-dbcp/commons-dbcp/1.4/commons-dbcp-1.4.jar" sourcepath="M2_REPO/commons-dbcp/commons-dbcp/1.4/commons-dbcp-1.4-sources.jar"/>
+++  <classpathentry kind="var" path="M2_REPO/commons-pool/commons-pool/1.5.5/commons-pool-1.5.5.jar" sourcepath="M2_REPO/commons-pool/commons-pool/1.5.5/commons-pool-1.5.5-sources.jar"/>
+++  <classpathentry kind="var" path="M2_REPO/net/jcip/jcip-annotations/1.0/jcip-annotations-1.0.jar" sourcepath="M2_REPO/net/jcip/jcip-annotations/1.0/jcip-annotations-1.0-sources.jar"/>
+++  <classpathentry kind="var" path="M2_REPO/org/exoplatform/portal/exo.portal.component.test.jcr/3.2.5-PLF-SNAPSHOT/exo.portal.component.test.jcr-3.2.5-PLF-SNAPSHOT.jar" sourcepath="M2_REPO/org/exoplatform/portal/exo.portal.component.test.jcr/3.2.5-PLF-SNAPSHOT/exo.portal.component.test.jcr-3.2.5-PLF-SNAPSHOT-sources.jar"/>
+++  <classpathentry kind="var" path="M2_REPO/org/exoplatform/jcr/exo.jcr.component.ext/1.14.8-GA-SNAPSHOT/exo.jcr.component.ext-1.14.8-GA-SNAPSHOT.jar" sourcepath="M2_REPO/org/exoplatform/jcr/exo.jcr.component.ext/1.14.8-GA-SNAPSHOT/exo.jcr.component.ext-1.14.8-GA-SNAPSHOT-sources.jar"/>
+++  <classpathentry kind="var" path="M2_REPO/org/exoplatform/kernel/exo.kernel.component.command/2.3.8-GA-SNAPSHOT/exo.kernel.component.command-2.3.8-GA-SNAPSHOT.jar" sourcepath="M2_REPO/org/exoplatform/kernel/exo.kernel.component.command/2.3.8-GA-SNAPSHOT/exo.kernel.component.command-2.3.8-GA-SNAPSHOT-sources.jar"/>
+++  <classpathentry kind="var" path="M2_REPO/commons-chain/commons-chain/1.2/commons-chain-1.2.jar" sourcepath="M2_REPO/commons-chain/commons-chain/1.2/commons-chain-1.2-sources.jar"/>
+++  <classpathentry kind="var" path="M2_REPO/commons-digester/commons-digester/1.8.1/commons-digester-1.8.1.jar" sourcepath="M2_REPO/commons-digester/commons-digester/1.8.1/commons-digester-1.8.1-sources.jar"/>
+++  <classpathentry kind="var" path="M2_REPO/xml-apis/xml-apis/1.0.b2/xml-apis-1.0.b2.jar" sourcepath="M2_REPO/xml-apis/xml-apis/1.0.b2/xml-apis-1.0.b2-sources.jar"/>
+++  <classpathentry kind="var" path="M2_REPO/org/exoplatform/core/exo.core.component.database/2.4.8-GA-SNAPSHOT/exo.core.component.database-2.4.8-GA-SNAPSHOT.jar" sourcepath="M2_REPO/org/exoplatform/core/exo.core.component.database/2.4.8-GA-SNAPSHOT/exo.core.component.database-2.4.8-GA-SNAPSHOT-sources.jar"/>
+++  <classpathentry kind="var" path="M2_REPO/com/experlog/xapool/1.5.0/xapool-1.5.0.jar" sourcepath="M2_REPO/com/experlog/xapool/1.5.0/xapool-1.5.0-sources.jar"/>
+++  <classpathentry kind="var" path="M2_REPO/org/hibernate/hibernate-core/3.3.2.GA/hibernate-core-3.3.2.GA.jar" sourcepath="M2_REPO/org/hibernate/hibernate-core/3.3.2.GA/hibernate-core-3.3.2.GA-sources.jar"/>
+++  <classpathentry kind="var" path="M2_REPO/antlr/antlr/2.7.6/antlr-2.7.6.jar" sourcepath="M2_REPO/antlr/antlr/2.7.6/antlr-2.7.6-sources.jar"/>
+++  <classpathentry kind="var" path="M2_REPO/dom4j/dom4j/1.6.1/dom4j-1.6.1.jar" sourcepath="M2_REPO/dom4j/dom4j/1.6.1/dom4j-1.6.1-sources.jar"/>
+++  <classpathentry kind="var" path="M2_REPO/org/hibernate/hibernate-annotations/3.4.0.GA/hibernate-annotations-3.4.0.GA.jar" sourcepath="M2_REPO/org/hibernate/hibernate-annotations/3.4.0.GA/hibernate-annotations-3.4.0.GA-sources.jar"/>
+++  <classpathentry kind="var" path="M2_REPO/org/hibernate/ejb3-persistence/1.0.2.GA/ejb3-persistence-1.0.2.GA.jar" sourcepath="M2_REPO/org/hibernate/ejb3-persistence/1.0.2.GA/ejb3-persistence-1.0.2.GA-sources.jar"/>
+++  <classpathentry kind="var" path="M2_REPO/org/hibernate/hibernate-commons-annotations/3.1.0.GA/hibernate-commons-annotations-3.1.0.GA.jar" sourcepath="M2_REPO/org/hibernate/hibernate-commons-annotations/3.1.0.GA/hibernate-commons-annotations-3.1.0.GA-sources.jar"/>
+++  <classpathentry kind="var" path="M2_REPO/org/exoplatform/core/exo.core.component.document/2.4.8-GA-SNAPSHOT/exo.core.component.document-2.4.8-GA-SNAPSHOT.jar" sourcepath="M2_REPO/org/exoplatform/core/exo.core.component.document/2.4.8-GA-SNAPSHOT/exo.core.component.document-2.4.8-GA-SNAPSHOT-sources.jar"/>
+++  <classpathentry kind="var" path="M2_REPO/org/apache/pdfbox/pdfbox/1.6.0/pdfbox-1.6.0.jar" sourcepath="M2_REPO/org/apache/pdfbox/pdfbox/1.6.0/pdfbox-1.6.0-sources.jar"/>
+++  <classpathentry kind="var" path="M2_REPO/org/apache/pdfbox/fontbox/1.6.0/fontbox-1.6.0.jar" sourcepath="M2_REPO/org/apache/pdfbox/fontbox/1.6.0/fontbox-1.6.0-sources.jar"/>
+++  <classpathentry kind="var" path="M2_REPO/org/apache/pdfbox/jempbox/1.6.0/jempbox-1.6.0.jar" sourcepath="M2_REPO/org/apache/pdfbox/jempbox/1.6.0/jempbox-1.6.0-sources.jar"/>
+++  <classpathentry kind="var" path="M2_REPO/org/htmlparser/htmlparser/1.6/htmlparser-1.6.jar"/>
+++  <classpathentry kind="var" path="M2_REPO/org/apache/poi/poi/3.6/poi-3.6.jar" sourcepath="M2_REPO/org/apache/poi/poi/3.6/poi-3.6-sources.jar"/>
+++  <classpathentry kind="var" path="M2_REPO/org/apache/poi/poi-scratchpad/3.6/poi-scratchpad-3.6.jar" sourcepath="M2_REPO/org/apache/poi/poi-scratchpad/3.6/poi-scratchpad-3.6-sources.jar"/>
+++  <classpathentry kind="var" path="M2_REPO/org/apache/poi/poi-ooxml/3.6/poi-ooxml-3.6.jar" sourcepath="M2_REPO/org/apache/poi/poi-ooxml/3.6/poi-ooxml-3.6-sources.jar"/>
+++  <classpathentry kind="var" path="M2_REPO/org/apache/poi/poi-ooxml-schemas/3.6/poi-ooxml-schemas-3.6.jar"/>
+++  <classpathentry kind="var" path="M2_REPO/org/apache/xmlbeans/xmlbeans/2.3.0/xmlbeans-2.3.0.jar"/>
+++  <classpathentry kind="var" path="M2_REPO/stax/stax-api/1.0.1/stax-api-1.0.1.jar"/>
+++  <classpathentry kind="var" path="M2_REPO/org/apache/geronimo/specs/geronimo-stax-api_1.0_spec/1.0.1/geronimo-stax-api_1.0_spec-1.0.1.jar" sourcepath="M2_REPO/org/apache/geronimo/specs/geronimo-stax-api_1.0_spec/1.0.1/geronimo-stax-api_1.0_spec-1.0.1-sources.jar"/>
+++  <classpathentry kind="var" path="M2_REPO/org/apache/tika/tika-core/0.7/tika-core-0.7.jar" sourcepath="M2_REPO/org/apache/tika/tika-core/0.7/tika-core-0.7-sources.jar"/>
+++  <classpathentry kind="var" path="M2_REPO/org/apache/tika/tika-parsers/0.7/tika-parsers-0.7.jar" sourcepath="M2_REPO/org/apache/tika/tika-parsers/0.7/tika-parsers-0.7-sources.jar"/>
+++  <classpathentry kind="var" path="M2_REPO/org/apache/commons/commons-compress/1.0/commons-compress-1.0.jar" sourcepath="M2_REPO/org/apache/commons/commons-compress/1.0/commons-compress-1.0-sources.jar"/>
+++  <classpathentry kind="var" path="M2_REPO/org/bouncycastle/bcmail-jdk15/1.45/bcmail-jdk15-1.45.jar" sourcepath="M2_REPO/org/bouncycastle/bcmail-jdk15/1.45/bcmail-jdk15-1.45-sources.jar"/>
+++  <classpathentry kind="var" path="M2_REPO/org/bouncycastle/bcprov-jdk15/1.45/bcprov-jdk15-1.45.jar" sourcepath="M2_REPO/org/bouncycastle/bcprov-jdk15/1.45/bcprov-jdk15-1.45-sources.jar"/>
+++  <classpathentry kind="var" path="M2_REPO/org/ccil/cowan/tagsoup/tagsoup/1.2/tagsoup-1.2.jar"/>
+++  <classpathentry kind="var" path="M2_REPO/asm/asm/3.1/asm-3.1.jar" sourcepath="M2_REPO/asm/asm/3.1/asm-3.1-sources.jar"/>
+++  <classpathentry kind="var" path="M2_REPO/com/drewnoakes/metadata-extractor/2.4.0-beta-1/metadata-extractor-2.4.0-beta-1.jar" sourcepath="M2_REPO/com/drewnoakes/metadata-extractor/2.4.0-beta-1/metadata-extractor-2.4.0-beta-1-sources.jar"/>
+++  <classpathentry kind="var" path="M2_REPO/org/exoplatform/jcr/exo.jcr.component.core/1.14.8-GA-SNAPSHOT/exo.jcr.component.core-1.14.8-GA-SNAPSHOT.jar" sourcepath="M2_REPO/org/exoplatform/jcr/exo.jcr.component.core/1.14.8-GA-SNAPSHOT/exo.jcr.component.core-1.14.8-GA-SNAPSHOT-sources.jar"/>
+++  <classpathentry kind="var" path="M2_REPO/org/apache/lucene/lucene-core/2.9.4/lucene-core-2.9.4.jar" sourcepath="M2_REPO/org/apache/lucene/lucene-core/2.9.4/lucene-core-2.9.4-sources.jar"/>
+++  <classpathentry kind="var" path="M2_REPO/org/apache/lucene/lucene-spellchecker/2.9.4/lucene-spellchecker-2.9.4.jar" sourcepath="M2_REPO/org/apache/lucene/lucene-spellchecker/2.9.4/lucene-spellchecker-2.9.4-sources.jar"/>
+++  <classpathentry kind="var" path="M2_REPO/org/apache/lucene/lucene-memory/2.9.4/lucene-memory-2.9.4.jar" sourcepath="M2_REPO/org/apache/lucene/lucene-memory/2.9.4/lucene-memory-2.9.4-sources.jar"/>
+++  <classpathentry kind="var" path="M2_REPO/com/sun/xml/stream/sjsxp/1.0.1/sjsxp-1.0.1.jar"/>
+++  <classpathentry kind="var" path="M2_REPO/concurrent/concurrent/1.3.4/concurrent-1.3.4.jar" sourcepath="M2_REPO/concurrent/concurrent/1.3.4/concurrent-1.3.4-sources.jar"/>
+++  <classpathentry kind="var" path="M2_REPO/jboss/jbossts/jbossjts/4.6.1.GA/jbossjts-4.6.1.GA.jar"/>
+++  <classpathentry kind="var" path="M2_REPO/jboss/jbossts/jbossts-common/4.6.1.GA/jbossts-common-4.6.1.GA.jar"/>
+++  <classpathentry kind="var" path="M2_REPO/org/apache/ws/commons/ws-commons-util/1.0.1/ws-commons-util-1.0.1.jar" sourcepath="M2_REPO/org/apache/ws/commons/ws-commons-util/1.0.1/ws-commons-util-1.0.1-sources.jar"/>
+++  <classpathentry kind="var" path="M2_REPO/org/jboss/cache/jbosscache-core/3.2.7.GA/jbosscache-core-3.2.7.GA.jar" sourcepath="M2_REPO/org/jboss/cache/jbosscache-core/3.2.7.GA/jbosscache-core-3.2.7.GA-sources.jar"/>
+++  <classpathentry kind="var" path="M2_REPO/org/jboss/javaee/jboss-transaction-api/1.0.1.GA/jboss-transaction-api-1.0.1.GA.jar" sourcepath="M2_REPO/org/jboss/javaee/jboss-transaction-api/1.0.1.GA/jboss-transaction-api-1.0.1.GA-sources.jar">
+++    <attributes>
+++      <attribute value="jar:file:/home/binhnv/java/exo-dependencies/repository/org/jboss/javaee/jboss-transaction-api/1.0.1.GA/jboss-transaction-api-1.0.1.GA-javadoc.jar!/" name="javadoc_location"/>
+++    </attributes>
+++  </classpathentry>
+++  <classpathentry kind="var" path="M2_REPO/org/jboss/jboss-common-core/2.2.14.GA/jboss-common-core-2.2.14.GA.jar" sourcepath="M2_REPO/org/jboss/jboss-common-core/2.2.14.GA/jboss-common-core-2.2.14.GA-sources.jar"/>
+++  <classpathentry kind="var" path="M2_REPO/org/jboss/logging/jboss-logging-spi/2.0.5.GA/jboss-logging-spi-2.0.5.GA.jar" sourcepath="M2_REPO/org/jboss/logging/jboss-logging-spi/2.0.5.GA/jboss-logging-spi-2.0.5.GA-sources.jar">
+++    <attributes>
+++      <attribute value="jar:file:/home/binhnv/java/exo-dependencies/repository/org/jboss/logging/jboss-logging-spi/2.0.5.GA/jboss-logging-spi-2.0.5.GA-javadoc.jar!/" name="javadoc_location"/>
+++    </attributes>
+++  </classpathentry>
+++  <classpathentry kind="var" path="M2_REPO/org/exoplatform/core/exo.core.component.script.groovy/2.4.8-GA-SNAPSHOT/exo.core.component.script.groovy-2.4.8-GA-SNAPSHOT.jar" sourcepath="M2_REPO/org/exoplatform/core/exo.core.component.script.groovy/2.4.8-GA-SNAPSHOT/exo.core.component.script.groovy-2.4.8-GA-SNAPSHOT-sources.jar"/>
+++  <classpathentry kind="var" path="M2_REPO/org/codehaus/groovy/groovy-all/1.7.6/groovy-all-1.7.6.jar" sourcepath="M2_REPO/org/codehaus/groovy/groovy-all/1.7.6/groovy-all-1.7.6-sources.jar"/>
+++  <classpathentry kind="var" path="M2_REPO/org/exoplatform/ws/exo.ws.rest.core/2.2.8-GA-SNAPSHOT/exo.ws.rest.core-2.2.8-GA-SNAPSHOT.jar" sourcepath="M2_REPO/org/exoplatform/ws/exo.ws.rest.core/2.2.8-GA-SNAPSHOT/exo.ws.rest.core-2.2.8-GA-SNAPSHOT-sources.jar"/>
+++  <classpathentry kind="var" path="M2_REPO/org/exoplatform/ws/exo.ws.frameworks.json/2.2.8-GA-SNAPSHOT/exo.ws.frameworks.json-2.2.8-GA-SNAPSHOT.jar" sourcepath="M2_REPO/org/exoplatform/ws/exo.ws.frameworks.json/2.2.8-GA-SNAPSHOT/exo.ws.frameworks.json-2.2.8-GA-SNAPSHOT-sources.jar"/>
+++  <classpathentry kind="var" path="M2_REPO/net/sf/jtidy/jtidy/r938/jtidy-r938.jar" sourcepath="M2_REPO/net/sf/jtidy/jtidy/r938/jtidy-r938-sources.jar"/>
+++  <classpathentry kind="var" path="M2_REPO/commons-fileupload/commons-fileupload/1.2.1/commons-fileupload-1.2.1.jar" sourcepath="M2_REPO/commons-fileupload/commons-fileupload/1.2.1/commons-fileupload-1.2.1-sources.jar"/>
+++  <classpathentry kind="var" path="M2_REPO/org/exoplatform/ws/exo.ws.rest.ext/2.2.8-GA-SNAPSHOT/exo.ws.rest.ext-2.2.8-GA-SNAPSHOT.jar" sourcepath="M2_REPO/org/exoplatform/ws/exo.ws.rest.ext/2.2.8-GA-SNAPSHOT/exo.ws.rest.ext-2.2.8-GA-SNAPSHOT-sources.jar"/>
+++  <classpathentry kind="var" path="M2_REPO/org/exoplatform/core/exo.core.component.xml-processing/2.4.8-GA-SNAPSHOT/exo.core.component.xml-processing-2.4.8-GA-SNAPSHOT.jar" sourcepath="M2_REPO/org/exoplatform/core/exo.core.component.xml-processing/2.4.8-GA-SNAPSHOT/exo.core.component.xml-processing-2.4.8-GA-SNAPSHOT-sources.jar"/>
+++  <classpathentry kind="var" path="M2_REPO/org/exoplatform/ws/exo.ws.commons/2.2.8-GA-SNAPSHOT/exo.ws.commons-2.2.8-GA-SNAPSHOT.jar" sourcepath="M2_REPO/org/exoplatform/ws/exo.ws.commons/2.2.8-GA-SNAPSHOT/exo.ws.commons-2.2.8-GA-SNAPSHOT-sources.jar"/>
+++  <classpathentry kind="var" path="M2_REPO/org/exoplatform/core/exo.core.component.organization.jdbc/2.4.8-GA-SNAPSHOT/exo.core.component.organization.jdbc-2.4.8-GA-SNAPSHOT.jar" sourcepath="M2_REPO/org/exoplatform/core/exo.core.component.organization.jdbc/2.4.8-GA-SNAPSHOT/exo.core.component.organization.jdbc-2.4.8-GA-SNAPSHOT-sources.jar"/>
+++  <classpathentry kind="var" path="M2_REPO/org/exoplatform/portal/exo.portal.component.identity/3.2.5-PLF-SNAPSHOT/exo.portal.component.identity-3.2.5-PLF-SNAPSHOT-tests.jar"/>
+++  <classpathentry kind="var" path="M2_REPO/org/exoplatform/portal/exo.portal.component.common/3.2.5-PLF-SNAPSHOT/exo.portal.component.common-3.2.5-PLF-SNAPSHOT.jar" sourcepath="M2_REPO/org/exoplatform/portal/exo.portal.component.common/3.2.5-PLF-SNAPSHOT/exo.portal.component.common-3.2.5-PLF-SNAPSHOT-sources.jar"/>
+++  <classpathentry kind="var" path="M2_REPO/org/gatein/common/common-common/2.0.4-GA/common-common-2.0.4-GA.jar" sourcepath="M2_REPO/org/gatein/common/common-common/2.0.4-GA/common-common-2.0.4-GA-sources.jar"/>
+++  <classpathentry kind="var" path="M2_REPO/org/exoplatform/kernel/exo.kernel.component.ext.cache.impl.jboss.v3/2.3.8-GA-SNAPSHOT/exo.kernel.component.ext.cache.impl.jboss.v3-2.3.8-GA-SNAPSHOT.jar" sourcepath="M2_REPO/org/exoplatform/kernel/exo.kernel.component.ext.cache.impl.jboss.v3/2.3.8-GA-SNAPSHOT/exo.kernel.component.ext.cache.impl.jboss.v3-2.3.8-GA-SNAPSHOT-sources.jar"/>
+++  <classpathentry kind="var" path="M2_REPO/org/chromattic/chromattic.api/1.1.2/chromattic.api-1.1.2.jar" sourcepath="M2_REPO/org/chromattic/chromattic.api/1.1.2/chromattic.api-1.1.2-sources.jar"/>
+++  <classpathentry kind="var" path="M2_REPO/org/chromattic/chromattic.spi/1.1.2/chromattic.spi-1.1.2.jar" sourcepath="M2_REPO/org/chromattic/chromattic.spi/1.1.2/chromattic.spi-1.1.2-sources.jar"/>
+++  <classpathentry kind="var" path="M2_REPO/org/picketlink/idm/picketlink-idm-core/1.3.2.CR01/picketlink-idm-core-1.3.2.CR01.jar"/>
+++  <classpathentry kind="var" path="M2_REPO/org/picketlink/idm/picketlink-idm-common/1.3.2.CR01/picketlink-idm-common-1.3.2.CR01.jar"/>
+++  <classpathentry kind="var" path="M2_REPO/log4j/log4j/1.2.14/log4j-1.2.14.jar" sourcepath="M2_REPO/log4j/log4j/1.2.14/log4j-1.2.14-sources.jar"/>
+++  <classpathentry kind="var" path="M2_REPO/org/picketlink/idm/picketlink-idm-api/1.3.2.CR01/picketlink-idm-api-1.3.2.CR01.jar"/>
+++  <classpathentry kind="var" path="M2_REPO/org/picketlink/idm/picketlink-idm-spi/1.3.2.CR01/picketlink-idm-spi-1.3.2.CR01.jar"/>
+++  <classpathentry kind="var" path="M2_REPO/com/sun/xml/bind/jaxb-impl/2.1.8/jaxb-impl-2.1.8.jar" sourcepath="M2_REPO/com/sun/xml/bind/jaxb-impl/2.1.8/jaxb-impl-2.1.8-sources.jar"/>
+++  <classpathentry kind="var" path="M2_REPO/org/staxnav/staxnav.core/0.9.0/staxnav.core-0.9.0.jar" sourcepath="M2_REPO/org/staxnav/staxnav.core/0.9.0/staxnav.core-0.9.0-sources.jar"/>
+++  <classpathentry kind="var" path="M2_REPO/org/picketlink/idm/picketlink-idm-hibernate/1.3.2.CR01/picketlink-idm-hibernate-1.3.2.CR01.jar"/>
+++  <classpathentry kind="var" path="M2_REPO/javassist/javassist/3.8.0.GA/javassist-3.8.0.GA.jar" sourcepath="M2_REPO/javassist/javassist/3.8.0.GA/javassist-3.8.0.GA-sources.jar"/>
+++  <classpathentry kind="var" path="M2_REPO/org/hibernate/hibernate-cglib-repack/2.1_3/hibernate-cglib-repack-2.1_3.jar"/>
+++  <classpathentry kind="var" path="M2_REPO/org/picketlink/idm/picketlink-idm-ldap/1.3.2.CR01/picketlink-idm-ldap-1.3.2.CR01.jar"/>
+++  <classpathentry kind="var" path="M2_REPO/org/picketlink/idm/picketlink-idm-cache/1.3.2.CR01/picketlink-idm-cache-1.3.2.CR01.jar"/>
+++  <classpathentry kind="var" path="M2_REPO/org/exoplatform/portal/exo.portal.component.portal/3.2.5-PLF-SNAPSHOT/exo.portal.component.portal-3.2.5-PLF-SNAPSHOT.jar" sourcepath="M2_REPO/org/exoplatform/portal/exo.portal.component.portal/3.2.5-PLF-SNAPSHOT/exo.portal.component.portal-3.2.5-PLF-SNAPSHOT-sources.jar"/>
+++  <classpathentry kind="var" path="M2_REPO/org/exoplatform/portal/exo.portal.component.pc/3.2.5-PLF-SNAPSHOT/exo.portal.component.pc-3.2.5-PLF-SNAPSHOT.jar" sourcepath="M2_REPO/org/exoplatform/portal/exo.portal.component.pc/3.2.5-PLF-SNAPSHOT/exo.portal.component.pc-3.2.5-PLF-SNAPSHOT-sources.jar"/>
+++  <classpathentry kind="var" path="M2_REPO/org/exoplatform/portal/exo.portal.component.resources/3.2.5-PLF-SNAPSHOT/exo.portal.component.resources-3.2.5-PLF-SNAPSHOT.jar" sourcepath="M2_REPO/org/exoplatform/portal/exo.portal.component.resources/3.2.5-PLF-SNAPSHOT/exo.portal.component.resources-3.2.5-PLF-SNAPSHOT-sources.jar"/>
+++  <classpathentry kind="var" path="M2_REPO/org/gatein/pc/pc-api/2.3.0-GA/pc-api-2.3.0-GA.jar" sourcepath="M2_REPO/org/gatein/pc/pc-api/2.3.0-GA/pc-api-2.3.0-GA-sources.jar"/>
+++  <classpathentry kind="var" path="M2_REPO/org/gatein/wci/wci-wci/2.1.0-GA/wci-wci-2.1.0-GA.jar" sourcepath="M2_REPO/org/gatein/wci/wci-wci/2.1.0-GA/wci-wci-2.1.0-GA-sources.jar"/>
+++  <classpathentry kind="var" path="M2_REPO/org/gatein/pc/pc-portlet/2.3.0-GA/pc-portlet-2.3.0-GA.jar" sourcepath="M2_REPO/org/gatein/pc/pc-portlet/2.3.0-GA/pc-portlet-2.3.0-GA-sources.jar"/>
+++  <classpathentry kind="var" path="M2_REPO/org/gatein/pc/pc-federation/2.3.0-GA/pc-federation-2.3.0-GA.jar" sourcepath="M2_REPO/org/gatein/pc/pc-federation/2.3.0-GA/pc-federation-2.3.0-GA-sources.jar"/>
+++  <classpathentry kind="var" path="M2_REPO/org/gatein/pc/pc-bridge/2.3.0-GA/pc-bridge-2.3.0-GA.jar" sourcepath="M2_REPO/org/gatein/pc/pc-bridge/2.3.0-GA/pc-bridge-2.3.0-GA-sources.jar"/>
+++  <classpathentry kind="var" path="M2_REPO/org/apache/portals/bridges/portals-bridges-common/1.0.4/portals-bridges-common-1.0.4.jar"/>
+++  <classpathentry kind="var" path="M2_REPO/org/exoplatform/portal/exo.portal.component.identity/3.2.5-PLF-SNAPSHOT/exo.portal.component.identity-3.2.5-PLF-SNAPSHOT.jar" sourcepath="M2_REPO/org/exoplatform/portal/exo.portal.component.identity/3.2.5-PLF-SNAPSHOT/exo.portal.component.identity-3.2.5-PLF-SNAPSHOT-sources.jar"/>
+++  <classpathentry kind="var" path="M2_REPO/org/gatein/mop/mop-api/1.1.1-GA/mop-api-1.1.1-GA.jar" sourcepath="M2_REPO/org/gatein/mop/mop-api/1.1.1-GA/mop-api-1.1.1-GA-sources.jar"/>
+++  <classpathentry kind="var" path="M2_REPO/org/gatein/mop/mop-spi/1.1.1-GA/mop-spi-1.1.1-GA.jar" sourcepath="M2_REPO/org/gatein/mop/mop-spi/1.1.1-GA/mop-spi-1.1.1-GA-sources.jar"/>
+++  <classpathentry kind="var" path="M2_REPO/org/gatein/mop/mop-core/1.1.1-GA/mop-core-1.1.1-GA.jar" sourcepath="M2_REPO/org/gatein/mop/mop-core/1.1.1-GA/mop-core-1.1.1-GA-sources.jar"/>
+++  <classpathentry kind="var" path="M2_REPO/org/chromattic/chromattic.ext/1.1.2/chromattic.ext-1.1.2.jar" sourcepath="M2_REPO/org/chromattic/chromattic.ext/1.1.2/chromattic.ext-1.1.2-sources.jar"/>
+++  <classpathentry kind="var" path="M2_REPO/org/chromattic/chromattic.common/1.1.2/chromattic.common-1.1.2.jar" sourcepath="M2_REPO/org/chromattic/chromattic.common/1.1.2/chromattic.common-1.1.2-sources.jar"/>
+++  <classpathentry kind="var" path="M2_REPO/org/chromattic/chromattic.apt/1.1.2/chromattic.apt-1.1.2.jar" sourcepath="M2_REPO/org/chromattic/chromattic.apt/1.1.2/chromattic.apt-1.1.2-sources.jar"/>
+++  <classpathentry kind="var" path="M2_REPO/org/chromattic/chromattic.metamodel/1.1.2/chromattic.metamodel-1.1.2.jar" sourcepath="M2_REPO/org/chromattic/chromattic.metamodel/1.1.2/chromattic.metamodel-1.1.2-sources.jar"/>
+++  <classpathentry kind="var" path="M2_REPO/org/chromattic/chromattic.testgenerator/1.1.2/chromattic.testgenerator-1.1.2.jar" sourcepath="M2_REPO/org/chromattic/chromattic.testgenerator/1.1.2/chromattic.testgenerator-1.1.2-sources.jar"/>
+++  <classpathentry kind="var" path="M2_REPO/com/google/code/javaparser/javaparser/1.0.8/javaparser-1.0.8.jar" sourcepath="M2_REPO/com/google/code/javaparser/javaparser/1.0.8/javaparser-1.0.8-sources.jar"/>
+++  <classpathentry kind="var" path="M2_REPO/org/reflext/reflext.api/1.1.0/reflext.api-1.1.0.jar" sourcepath="M2_REPO/org/reflext/reflext.api/1.1.0/reflext.api-1.1.0-sources.jar"/>
+++  <classpathentry kind="var" path="M2_REPO/org/reflext/reflext.spi/1.1.0/reflext.spi-1.1.0.jar" sourcepath="M2_REPO/org/reflext/reflext.spi/1.1.0/reflext.spi-1.1.0-sources.jar"/>
+++  <classpathentry kind="var" path="M2_REPO/org/reflext/reflext.core/1.1.0/reflext.core-1.1.0.jar" sourcepath="M2_REPO/org/reflext/reflext.core/1.1.0/reflext.core-1.1.0-sources.jar"/>
+++  <classpathentry kind="var" path="M2_REPO/org/reflext/reflext.jlr/1.1.0/reflext.jlr-1.1.0.jar" sourcepath="M2_REPO/org/reflext/reflext.jlr/1.1.0/reflext.jlr-1.1.0-sources.jar"/>
+++  <classpathentry kind="var" path="M2_REPO/org/reflext/reflext.apt/1.1.0/reflext.apt-1.1.0.jar" sourcepath="M2_REPO/org/reflext/reflext.apt/1.1.0/reflext.apt-1.1.0-sources.jar"/>
+++  <classpathentry kind="var" path="M2_REPO/org/json/json/20070829/json-20070829.jar" sourcepath="M2_REPO/org/json/json/20070829/json-20070829-sources.jar"/>
+++  <classpathentry kind="var" path="M2_REPO/commons-io/commons-io/1.4/commons-io-1.4.jar" sourcepath="M2_REPO/commons-io/commons-io/1.4/commons-io-1.4-sources.jar"/>
+++  <classpathentry kind="var" path="M2_REPO/org/slf4j/slf4j-simple/1.5.8/slf4j-simple-1.5.8.jar" sourcepath="M2_REPO/org/slf4j/slf4j-simple/1.5.8/slf4j-simple-1.5.8-sources.jar"/>
+++</classpath>
++\ No newline at end of file
++diff --git a/jcr-exo_31dad17.patch b/jcr-exo_31dad17.patch
++new file mode 100644
++index 0000000..b4f40b2
++--- /dev/null
+++++ b/jcr-exo_31dad17.patch
++@@ -0,0 +1,6357 @@
+++commit 31dad17a499653bff8983438b84f0aee8628c93e
+++Author: BinhNV <binhnv@exoplatform.com>
+++Date:   Tue Jul 17 17:51:33 2012 +0700
+++
+++    commit code follow comment
+++
+++diff --git a/.classpath b/.classpath
+++index 9d7da80..e54245b 100644
+++--- a/.classpath
++++++ b/.classpath
+++@@ -3,6 +3,7 @@
+++ 	<classpathentry including="**/*.java" kind="src" output="target/test-classes" path="src/test/java"/>
+++ 	<classpathentry including="**/*.java" kind="src" path="src/main/java"/>
+++ 	<classpathentry kind="src" path="src/main/resources"/>
++++	<classpathentry kind="src" path="src/test/resources"/>
+++ 	<classpathentry kind="var" path="M2_REPO/javax/portlet/portlet-api/2.0/portlet-api-2.0.jar" sourcepath="M2_REPO/javax/portlet/portlet-api/2.0/portlet-api-2.0-sources.jar">
+++ 		<attributes>
+++ 			<attribute name="javadoc_location" value="jar:file:/home/binhnv/java/exo-dependencies/repository/javax/portlet/portlet-api/2.0/portlet-api-2.0-javadoc.jar!/"/>
+++diff --git a/378be84.patch b/378be84.patch
+++new file mode 100644
+++index 0000000..ac4f6b5
+++--- /dev/null
++++++ b/378be84.patch
+++@@ -0,0 +1,509 @@
++++commit 378be846b595874c1d43c72a25080f3e1b2fa038
++++Author: BinhNV <binhnv@exoplatform.com>
++++Date:   Mon Jul 16 09:27:37 2012 +0700
++++
++++    new commit
++++
++++diff --git a/target/classes/conf/portal/bookstore-configuration.xml b/target/classes/conf/portal/bookstore-configuration.xml
++++deleted file mode 100644
++++index 29f1ffb..0000000
++++--- a/target/classes/conf/portal/bookstore-configuration.xml
+++++++ /dev/null
++++@@ -1,13 +0,0 @@
++++-<?xml version="1.0" encoding="ISO-8859-1"?>
++++-<configuration xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.exoplaform.org/xml/ns/kernel_1_0.xsd
++++-	http://www.exoplaform.org/xml/ns/kernel_1_0.xsd" xmlns="http://www.exoplaform.org/xml/ns/kernel_1_0.xsd">
++++-	<component>
++++-		<key>exoplatform.JCRDataStorage</key>
++++-		<type>exoplatform.JCRDataStorage</type>
++++-	</component>
++++-	<component>
++++-	    <key>exoplatform.BookStoreService</key>
++++-	    <type>exoplatform.BookStoreService</type>
++++-    </component>
++++-
++++-</configuration>
++++\ No newline at end of file
++++diff --git a/target/classes/conf/portal/configuration.xml b/target/classes/conf/portal/configuration.xml
++++deleted file mode 100644
++++index 50e229b..0000000
++++--- a/target/classes/conf/portal/configuration.xml
+++++++ /dev/null
++++@@ -1,10 +0,0 @@
++++-<?xml version="1.0" encoding="ISO-8859-1"?>
++++-<configuration 
++++-	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
++++-	xsi:schemaLocation="http://www.exoplaform.org/xml/ns/kernel_1_0.xsd http://www.exoplaform.org/xml/ns/kernel_1_0.xsd"
++++-	 xmlns="http://www.exoplaform.org/xml/ns/kernel_1_0.xsd">
++++-	<import>jar:/conf/portal/jcr-configuration.xml</import>
++++-	<import>jar:/conf/portal/jcr-component-plugins-configuration.xml</import>
++++-	<import>jar:/conf/portal/jcr-nodetypes-configuration.xml</import>
++++-	<import>jar:/conf/portal/bookstore-configuration.xml</import>
++++-</configuration>
++++\ No newline at end of file
++++diff --git a/target/classes/conf/portal/jcr-component-plugins-configuration.xml b/target/classes/conf/portal/jcr-component-plugins-configuration.xml
++++deleted file mode 100644
++++index 04ff268..0000000
++++--- a/target/classes/conf/portal/jcr-component-plugins-configuration.xml
+++++++ /dev/null
++++@@ -1,114 +0,0 @@
++++-<?xml version="1.0" encoding="ISO-8859-1"?>
++++-<!-- This file create new root path -->
++++-<configuration xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.exoplaform.org/xml/ns/kernel_1_0.xsd http://www.exoplaform.org/xml/ns/kernel_1_0.xsd"
++++-  xmlns="http://www.exoplaform.org/xml/ns/kernel_1_0.xsd">
++++-  <external-component-plugins>
++++-    <target-component>org.exoplatform.services.jcr.ext.hierarchy.NodeHierarchyCreator</target-component>
++++-    <component-plugin>
++++-      	<name>addPaths</name>
++++-      	<set-method>addPlugin</set-method>
++++-      	<type>org.exoplatform.services.jcr.ext.hierarchy.impl.AddPathPlugin</type>            
++++-      	<init-params>
++++-        	<object-param>
++++-          		<name>cms.configuration</name>
++++-          		<description>configuration for the cms path</description>
++++-          		<object type="org.exoplatform.services.jcr.ext.hierarchy.impl.HierarchyConfig">
++++-		            <field name="workspaces">
++++-		              <collection type="java.util.ArrayList">
++++-		                <value><string>bookstore</string></value>
++++-		              </collection>                
++++-		            </field>
++++-	            	<field  name="jcrPaths">
++++-		 	        	<collection type="java.util.ArrayList">
++++-			            	<value>                
++++-	        		        	<object type="org.exoplatform.services.jcr.ext.hierarchy.impl.HierarchyConfig$JcrPath">                   
++++-		                     		<field  name="alias"><string>exobookstore</string></field>
++++-		                     		<field  name="path"><string>/exostore:bookstore</string></field>                                          
++++-		                     		<field name="permissions">
++++-		                       			<collection type="java.util.ArrayList">               
++++-		                         			<value>                            
++++-		                           				<object type="org.exoplatform.services.jcr.ext.hierarchy.impl.HierarchyConfig$Permission">
++++-													  <field name="identity"><string>*:/platform/administrators</string></field>
++++-						                              <field name="read"><string>true</string></field>                
++++-						                              <field name="addNode"><string>true</string></field>                
++++-						                              <field name="setProperty"><string>true</string></field>                
++++-						                              <field name="remove"><string>true</string></field>                
++++-		                           				</object>  
++++-		                        			</value>     
++++-											<value>                            
++++-		                           				<object type="org.exoplatform.services.jcr.ext.hierarchy.impl.HierarchyConfig$Permission">
++++-						                              <field name="identity"><string>any</string></field>
++++-						                              <field name="read"><string>true</string></field>                
++++-						                              <field name="addNode"><string>false</string></field>                
++++-						                              <field name="setProperty"><string>true</string></field>                
++++-						                              <field name="remove"><string>false</string></field>                
++++-		                           				</object>  
++++-		                        			</value>                   
++++-		                      			</collection>
++++-		                    		</field>                                   
++++-	                  			</object>
++++-	                  		</value>
++++-	                  		<value>
++++-	                  			<object type="org.exoplatform.services.jcr.ext.hierarchy.impl.HierarchyConfig$JcrPath">                   
++++-		                     		<field  name="alias"><string>book</string></field>
++++-		                     		<field  name="path"><string>/exostore:bookstore/exostore:book</string></field>                                          
++++-		                     		<field name="permissions">
++++-		                       			<collection type="java.util.ArrayList">               
++++-		                         			<value>                            
++++-		                           				<object type="org.exoplatform.services.jcr.ext.hierarchy.impl.HierarchyConfig$Permission">
++++-													  <field name="identity"><string>*:/platform/administrators</string></field>
++++-						                              <field name="read"><string>true</string></field>                
++++-						                              <field name="addNode"><string>true</string></field>                
++++-						                              <field name="setProperty"><string>true</string></field>                
++++-						                              <field name="remove"><string>true</string></field>                
++++-		                           				</object>  
++++-		                        			</value>     
++++-											<value>                            
++++-		                           				<object type="org.exoplatform.services.jcr.ext.hierarchy.impl.HierarchyConfig$Permission">
++++-						                              <field name="identity"><string>any</string></field>
++++-						                              <field name="read"><string>true</string></field>                
++++-						                              <field name="addNode"><string>false</string></field>                
++++-						                              <field name="setProperty"><string>true</string></field>                
++++-						                              <field name="remove"><string>false</string></field>                
++++-		                           				</object>  
++++-		                        			</value>                   
++++-		                      			</collection>
++++-		                    		</field>                                   
++++-	                  			</object>
++++-	                  		</value>
++++-	                  		<value>
++++-	                  			<object type="org.exoplatform.services.jcr.ext.hierarchy.impl.HierarchyConfig$JcrPath">                   
++++-		                     		<field  name="alias"><string>author</string></field>
++++-		                     		<field  name="path"><string>/exostore:bookstore/exostore:author</string></field>                                          
++++-		                     		<field name="permissions">
++++-		                       			<collection type="java.util.ArrayList">               
++++-		                         			<value>                            
++++-		                           				<object type="org.exoplatform.services.jcr.ext.hierarchy.impl.HierarchyConfig$Permission">
++++-													  <field name="identity"><string>*:/platform/administrators</string></field>
++++-						                              <field name="read"><string>true</string></field>                
++++-						                              <field name="addNode"><string>true</string></field>                
++++-						                              <field name="setProperty"><string>true</string></field>                
++++-						                              <field name="remove"><string>true</string></field>                
++++-		                           				</object>  
++++-		                        			</value>     
++++-											<value>                            
++++-		                           				<object type="org.exoplatform.services.jcr.ext.hierarchy.impl.HierarchyConfig$Permission">
++++-						                              <field name="identity"><string>any</string></field>
++++-						                              <field name="read"><string>true</string></field>                
++++-						                              <field name="addNode"><string>false</string></field>                
++++-						                              <field name="setProperty"><string>true</string></field>                
++++-						                              <field name="remove"><string>false</string></field>                
++++-		                           				</object>  
++++-		                        			</value>                   
++++-		                      			</collection>
++++-		                    		</field>                                   
++++-	                  			</object>
++++-	                		</value>
++++-	             	</collection>  
++++-	            </field>
++++-        	</object>
++++-        </object-param>
++++-      </init-params>            
++++-    </component-plugin>
++++-  </external-component-plugins>
++++-</configuration>
++++diff --git a/target/classes/conf/portal/jcr-configuration.xml b/target/classes/conf/portal/jcr-configuration.xml
++++deleted file mode 100644
++++index 4c69fdd..0000000
++++--- a/target/classes/conf/portal/jcr-configuration.xml
+++++++ /dev/null
++++@@ -1,25 +0,0 @@
++++-<?xml version="1.0" encoding="ISO-8859-1"?>
++++-<configuration
++++-  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
++++-  xsi:schemaLocation="http://www.exoplaform.org/xml/ns/kernel_1_0.xsd http://www.exoplaform.org/xml/ns/kernel_1_0.xsd"
++++-  xmlns="http://www.exoplaform.org/xml/ns/kernel_1_0.xsd">
++++-  <external-component-plugins>
++++-    <!-- The full qualified name of the RepositoryServiceConfiguration -->
++++-    <target-component>org.exoplatform.services.jcr.config.RepositoryServiceConfiguration</target-component>
++++-    <component-plugin>
++++-      <!-- The name of the plugin -->
++++-      <name>Sample RepositoryServiceConfiguration Plugin</name>
++++-      <!-- The name of the method to call on the RepositoryServiceConfiguration in order to add the RepositoryServiceConfigurations -->
++++-      <set-method>addConfig</set-method>
++++-      <!-- The full qualified name of the RepositoryServiceConfigurationPlugin -->
++++-      <type>org.exoplatform.services.jcr.impl.config.RepositoryServiceConfigurationPlugin</type>
++++-      <init-params>
++++-        <value-param>
++++-          <name>conf-path</name>
++++-          <description>JCR configuration file</description>
++++-          <value>jar:/conf/portal/repository-configuration.xml</value>
++++-        </value-param>
++++-      </init-params>
++++-    </component-plugin>
++++-  </external-component-plugins>
++++-</configuration>
++++diff --git a/target/classes/conf/portal/jcr-nodetypes-configuration.xml b/target/classes/conf/portal/jcr-nodetypes-configuration.xml
++++deleted file mode 100644
++++index 41a267c..0000000
++++--- a/target/classes/conf/portal/jcr-nodetypes-configuration.xml
+++++++ /dev/null
++++@@ -1,30 +0,0 @@
++++-<?xml version="1.0" encoding="ISO-8859-1"?>
++++-<configuration xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.exoplaform.org/xml/ns/kernel_1_0.xsd http://www.exoplaform.org/xml/ns/kernel_1_0.xsd"
++++-  xmlns="http://www.exoplaform.org/xml/ns/kernel_1_0.xsd">
++++-  <external-component-plugins>
++++-    <target-component>org.exoplatform.services.jcr.RepositoryService</target-component>  
++++-    <component-plugin>
++++-          <name>add.namespaces</name>
++++-          <set-method>addPlugin</set-method>
++++-          <type>org.exoplatform.services.jcr.impl.AddNamespacesPlugin</type>
++++-          <init-params>
++++-            <properties-param>
++++-              <name>namespaces</name>
++++-              <property name="exostore" value="http://www.exoplatform.org/bookstore/1.0"/>
++++-            </properties-param>
++++-          </init-params>
++++-      </component-plugin>    
++++-    <component-plugin> 
++++-      <name>add.cs.nodeType</name>
++++-      <set-method>addPlugin</set-method>
++++-      <type>org.exoplatform.services.jcr.impl.AddNodeTypePlugin</type>
++++-      <init-params>
++++-        <values-param>
++++-          <name>autoCreatedInNewRepository</name>
++++-          <description>Node types configuration file</description>
++++-          <value>jar:/conf/portal/nodetypes.xml</value>
++++-        </values-param>
++++-      </init-params>
++++-    </component-plugin>
++++-  </external-component-plugins>  
++++-</configuration>
++++diff --git a/target/classes/conf/portal/nodetypes.xml b/target/classes/conf/portal/nodetypes.xml
++++deleted file mode 100644
++++index fba444b..0000000
++++--- a/target/classes/conf/portal/nodetypes.xml
+++++++ /dev/null
++++@@ -1,50 +0,0 @@
++++-<?xml version="1.0" encoding="ISO-8859-1"?>
++++-<nodeTypes xmlns:nt="http://www.jcp.org/jcr/nt/1.0" xmlns:mix="http://www.jcp.org/jcr/mix/1.0" xmlns:jcr="http://www.jcp.org/jcr/1.0">
++++-    
++++-	<nodeType name="exostore:book" isMixin="false" hasOrderableChildNodes="false" primaryItemName="">
++++-		<supertypes>
++++-			<supertype>nt:base</supertype>
++++-			<supertype>mix:referenceable</supertype>
++++-		</supertypes>
++++-		<propertyDefinitions>
++++-			<propertyDefinition name="exostore:bookname" requiredType="String" autoCreated="false" mandatory="false" 
++++-						onParentVersion="COPY" protected="false" multiple="false">
++++-				<valueConstraints/>
++++-			</propertyDefinition>
++++-			<propertyDefinition name="exostore:bookcategory" requiredType="String" autoCreated="false" mandatory="false" 
++++-						onParentVersion="COPY" protected="false" multiple="false">
++++-				<valueConstraints/>
++++-			</propertyDefinition>
++++-			<propertyDefinition name="exostore:bookcontent" requiredType="String" autoCreated="false" mandatory="false" 
++++-						onParentVersion="COPY" protected="false" multiple="false">
++++-				<valueConstraints/>
++++-			</propertyDefinition>
++++-			<propertyDefinition name="exostore:author" requiredType="Reference" autoCreated="false" mandatory="false" 
++++-			    		onParentVersion="COPY" protected="false" multiple="false">
++++-        		<valueConstraints/>
++++-      		</propertyDefinition>
++++-		</propertyDefinitions>
++++-	</nodeType>
++++-	
++++-	<nodeType name="exostore:author" isMixin="false" hasOrderableChildNodes="false" primaryItemName="">
++++-		<supertypes>
++++-			<supertype>nt:base</supertype>
++++-			<supertype>mix:referenceable</supertype>
++++-		</supertypes>
++++-		<propertyDefinitions>
++++-			<propertyDefinition name="exostore:authorname" requiredType="String" autoCreated="false" mandatory="false" 
++++-						onParentVersion="COPY" protected="false" multiple="false">
++++-				<valueConstraints/>
++++-			</propertyDefinition>
++++-			<propertyDefinition name="exostore:authoraddress" requiredType="String" autoCreated="false" mandatory="false" 
++++-						onParentVersion="COPY" protected="false" multiple="false">
++++-				<valueConstraints/>
++++-			</propertyDefinition>
++++-			<propertyDefinition name="exostore:authorphone" requiredType="String" autoCreated="false" mandatory="false" 
++++-						onParentVersion="COPY" protected="false" multiple="false">
++++-				<valueConstraints/>
++++-			</propertyDefinition>
++++-		</propertyDefinitions>
++++-	</nodeType>
++++-	
++++-</nodeTypes>
++++\ No newline at end of file
++++diff --git a/target/classes/conf/portal/repository-configuration.xml b/target/classes/conf/portal/repository-configuration.xml
++++deleted file mode 100644
++++index 6183884..0000000
++++--- a/target/classes/conf/portal/repository-configuration.xml
+++++++ /dev/null
++++@@ -1,78 +0,0 @@
++++-<repository-service default-repository="${gatein.jcr.repository.default}">
++++-  <repositories>
++++-    <repository name="${gatein.jcr.repository.default}" system-workspace="${gatein.jcr.workspace.system}" default-workspace="${gatein.jcr.workspace.default}">
++++-      <security-domain>gatein-domain</security-domain>
++++-      <access-control>optional</access-control>
++++-      <authentication-policy>org.exoplatform.services.jcr.impl.core.access.JAASAuthenticator</authentication-policy>
++++-      <workspaces>
++++-        <workspace name="bookstore">
++++-          <container class="org.exoplatform.services.jcr.impl.storage.jdbc.optimisation.CQJDBCWorkspaceDataContainer">
++++-            <properties>
++++-              <property name="source-name" value="${gatein.jcr.datasource.name}${container.name.suffix}"/>
++++-              <property name="dialect" value="${gatein.jcr.datasource.dialect}"/>
++++-              <property name="multi-db" value="false"/>
++++-              <property name="update-storage" value="true"/>
++++-              <property name="max-buffer-size" value="200k"/>
++++-              <property name="swap-directory" value="${gatein.jcr.data.dir}/swap/bookstore${container.name.suffix}"/>
++++-            </properties>
++++-            <value-storages>
++++-              <value-storage id="bookstore" class="org.exoplatform.services.jcr.impl.storage.value.fs.TreeFileValueStorage">
++++-                <properties>
++++-                  <property name="path" value="${gatein.jcr.storage.data.dir}/bookstore${container.name.suffix}"/>
++++-                </properties>
++++-                <filters>
++++-                  <filter property-type="Binary"/>
++++-                </filters>
++++-              </value-storage>
++++-            </value-storages>
++++-          </container>
++++-          <initializer class="org.exoplatform.services.jcr.impl.core.ScratchWorkspaceInitializer">
++++-            <properties>
++++-              <property name="root-nodetype" value="nt:unstructured"/>
++++-              <property name="root-permissions" value="any read;*:/platform/administrators read;*:/platform/administrators add_node;*:/platform/administrators set_property;*:/platform/administrators remove"/>
++++-            </properties>
++++-          </initializer>
++++-          <cache enabled="true" class="org.exoplatform.services.jcr.impl.dataflow.persistent.jbosscache.JBossCacheWorkspaceStorageCache">
++++-            <properties>
++++-              <property name="jbosscache-configuration" value="${gatein.jcr.cache.config}" />
++++-              <property name="jgroups-configuration" value="${gatein.jcr.jgroups.config}" />
++++-              <property name="jbosscache-cluster-name" value="jcr-cache${container.name.suffix}" />
++++-              <property name="jbosscache-shareable" value="true" />
++++-              <property name="jbosscache-expiration-time" value="${gatein.jcr.cache.expiration.time}" />
++++-            </properties>
++++-          </cache>
++++-          <query-handler class="org.exoplatform.services.jcr.impl.core.query.lucene.SearchIndex">
++++-            <properties>
++++-              <property name="index-dir" value="${gatein.jcr.index.data.dir}/bookstore${container.name.suffix}"/>
++++-              <property name="changesfilter-class" value="${gatein.jcr.index.changefilterclass}" />
++++-              <property name="jbosscache-configuration" value="${gatein.jcr.index.cache.config}" />
++++-              <property name="jgroups-configuration" value="${gatein.jcr.jgroups.config}" />
++++-              <property name="jbosscache-cluster-name" value="jcr-indexer${container.name.suffix}" />
++++-              <property name="jbosscache-shareable" value="true" />
++++-              <property name="max-volatile-time" value="60" />
++++-            </properties>
++++-          </query-handler>
++++-          
++++-          <lock-manager class="org.exoplatform.services.jcr.impl.core.lock.jbosscache.CacheableLockManagerImpl">
++++-            <properties>
++++-              <property name="time-out" value="15m" />
++++-              <property name="jbosscache-configuration" value="${gatein.jcr.lock.cache.config}" />
++++-              <property name="jgroups-configuration" value="${gatein.jcr.jgroups.config}" />
++++-              <property name="jbosscache-cluster-name" value="jcr-lock${container.name.suffix}" />
++++-              <property name="jbosscache-shareable" value="true" />
++++-              <property name="jbosscache-cl-cache.jdbc.table.name" value="jcrlocks" />
++++-              <property name="jbosscache-cl-cache.jdbc.table.create" value="true" />
++++-              <property name="jbosscache-cl-cache.jdbc.table.drop" value="false" />
++++-              <property name="jbosscache-cl-cache.jdbc.table.primarykey" value="pk" />
++++-              <property name="jbosscache-cl-cache.jdbc.fqn.column" value="fqn" />
++++-              <property name="jbosscache-cl-cache.jdbc.node.column" value="node" />
++++-              <property name="jbosscache-cl-cache.jdbc.parent.column" value="parent" />
++++-              <property name="jbosscache-cl-cache.jdbc.datasource" value="${gatein.jcr.datasource.name}${container.name.suffix}" />
++++-            </properties>
++++-          </lock-manager>
++++-
++++-        </workspace>
++++-      </workspaces>
++++-    </repository>
++++-  </repositories>
++++-</repository-service>
++++diff --git a/target/classes/exoplatform/BookNodeTypes.class b/target/classes/exoplatform/BookNodeTypes.class
++++deleted file mode 100644
++++index 4f166ea..0000000
++++Binary files a/target/classes/exoplatform/BookNodeTypes.class and /dev/null differ
++++diff --git a/target/classes/exoplatform/BookStoreService.class b/target/classes/exoplatform/BookStoreService.class
++++deleted file mode 100644
++++index effa12c..0000000
++++Binary files a/target/classes/exoplatform/BookStoreService.class and /dev/null differ
++++diff --git a/target/classes/exoplatform/JCRDataStorage.class b/target/classes/exoplatform/JCRDataStorage.class
++++deleted file mode 100644
++++index 5d409f5..0000000
++++Binary files a/target/classes/exoplatform/JCRDataStorage.class and /dev/null differ
++++diff --git a/target/classes/exoplatform/entity/Author.class b/target/classes/exoplatform/entity/Author.class
++++deleted file mode 100644
++++index 228c835..0000000
++++Binary files a/target/classes/exoplatform/entity/Author.class and /dev/null differ
++++diff --git a/target/classes/exoplatform/entity/Book$CATEGORY.class b/target/classes/exoplatform/entity/Book$CATEGORY.class
++++deleted file mode 100644
++++index d1d2df1..0000000
++++Binary files a/target/classes/exoplatform/entity/Book$CATEGORY.class and /dev/null differ
++++diff --git a/target/classes/exoplatform/entity/Book.class b/target/classes/exoplatform/entity/Book.class
++++deleted file mode 100644
++++index 405876d..0000000
++++Binary files a/target/classes/exoplatform/entity/Book.class and /dev/null differ
++++diff --git a/target/classes/exoplatform/exception/BookNotFoundException.class b/target/classes/exoplatform/exception/BookNotFoundException.class
++++deleted file mode 100644
++++index 7734ac4..0000000
++++Binary files a/target/classes/exoplatform/exception/BookNotFoundException.class and /dev/null differ
++++diff --git a/target/classes/exoplatform/exception/DuplicateBookException.class b/target/classes/exoplatform/exception/DuplicateBookException.class
++++deleted file mode 100644
++++index a3a5435..0000000
++++Binary files a/target/classes/exoplatform/exception/DuplicateBookException.class and /dev/null differ
++++diff --git a/target/classes/exoplatform/utils/PropertyReader.class b/target/classes/exoplatform/utils/PropertyReader.class
++++deleted file mode 100644
++++index 0aaf2d2..0000000
++++Binary files a/target/classes/exoplatform/utils/PropertyReader.class and /dev/null differ
++++diff --git a/target/classes/exoplatform/utils/Utils.class b/target/classes/exoplatform/utils/Utils.class
++++deleted file mode 100644
++++index 1ebaaf7..0000000
++++Binary files a/target/classes/exoplatform/utils/Utils.class and /dev/null differ
++++diff --git a/target/jcr-exo-1.0-SNAPSHOT.jar b/target/jcr-exo-1.0-SNAPSHOT.jar
++++deleted file mode 100644
++++index 848c9f8..0000000
++++Binary files a/target/jcr-exo-1.0-SNAPSHOT.jar and /dev/null differ
++++diff --git a/target/maven-archiver/pom.properties b/target/maven-archiver/pom.properties
++++deleted file mode 100644
++++index dd69bd4..0000000
++++--- a/target/maven-archiver/pom.properties
+++++++ /dev/null
++++@@ -1,5 +0,0 @@
++++-#Generated by Maven
++++-#Fri Jul 13 18:56:27 ICT 2012
++++-version=1.0-SNAPSHOT
++++-groupId=exoplatform
++++-artifactId=jcr-exo
++++diff --git a/target/surefire-reports/TEST-exoplatform.AppTest.xml b/target/surefire-reports/TEST-exoplatform.AppTest.xml
++++deleted file mode 100644
++++index c6bb568..0000000
++++--- a/target/surefire-reports/TEST-exoplatform.AppTest.xml
+++++++ /dev/null
++++@@ -1,62 +0,0 @@
++++-<?xml version="1.0" encoding="UTF-8" ?>
++++-<testsuite failures="0" time="0.019" errors="0" skipped="0" tests="1" name="exoplatform.AppTest">
++++-  <properties>
++++-    <property name="java.runtime.name" value="Java(TM) SE Runtime Environment"/>
++++-    <property name="sun.boot.library.path" value="/home/binhnv/java/jdk1.6/jre/lib/amd64"/>
++++-    <property name="java.vm.version" value="20.2-b06"/>
++++-    <property name="java.vm.vendor" value="Sun Microsystems Inc."/>
++++-    <property name="java.vendor.url" value="http://java.sun.com/"/>
++++-    <property name="path.separator" value=":"/>
++++-    <property name="guice.disable.misplaced.annotation.check" value="true"/>
++++-    <property name="java.vm.name" value="Java HotSpot(TM) 64-Bit Server VM"/>
++++-    <property name="file.encoding.pkg" value="sun.io"/>
++++-    <property name="user.country" value="US"/>
++++-    <property name="sun.java.launcher" value="SUN_STANDARD"/>
++++-    <property name="sun.os.patch.level" value="unknown"/>
++++-    <property name="java.vm.specification.name" value="Java Virtual Machine Specification"/>
++++-    <property name="user.dir" value="/home/binhnv/java/jcr-exo"/>
++++-    <property name="java.runtime.version" value="1.6.0_27-b07"/>
++++-    <property name="java.awt.graphicsenv" value="sun.awt.X11GraphicsEnvironment"/>
++++-    <property name="java.endorsed.dirs" value="/home/binhnv/java/jdk1.6/jre/lib/endorsed"/>
++++-    <property name="os.arch" value="amd64"/>
++++-    <property name="java.io.tmpdir" value="/tmp"/>
++++-    <property name="line.separator" value="
++++-"/>
++++-    <property name="java.vm.specification.vendor" value="Sun Microsystems Inc."/>
++++-    <property name="os.name" value="Linux"/>
++++-    <property name="classworlds.conf" value="/home/binhnv/java/apache-maven-3.0.4/bin/m2.conf"/>
++++-    <property name="sun.jnu.encoding" value="UTF-8"/>
++++-    <property name="java.library.path" value="/home/binhnv/java/jdk1.6/jre/lib/amd64/server:/home/binhnv/java/jdk1.6/jre/lib/amd64:/home/binhnv/java/jdk1.6/jre/../lib/amd64:/usr/java/packages/lib/amd64:/usr/lib64:/lib64:/lib:/usr/lib"/>
++++-    <property name="java.specification.name" value="Java Platform API Specification"/>
++++-    <property name="java.class.version" value="50.0"/>
++++-    <property name="sun.management.compiler" value="HotSpot 64-Bit Tiered Compilers"/>
++++-    <property name="os.version" value="3.2.0-23-generic"/>
++++-    <property name="user.home" value="/home/binhnv"/>
++++-    <property name="user.timezone" value="Asia/Ho_Chi_Minh"/>
++++-    <property name="java.awt.printerjob" value="sun.print.PSPrinterJob"/>
++++-    <property name="file.encoding" value="UTF-8"/>
++++-    <property name="java.specification.version" value="1.6"/>
++++-    <property name="user.name" value="binhnv"/>
++++-    <property name="java.class.path" value="/home/binhnv/java/apache-maven-3.0.4/boot/plexus-classworlds-2.4.jar"/>
++++-    <property name="java.vm.specification.version" value="1.0"/>
++++-    <property name="sun.arch.data.model" value="64"/>
++++-    <property name="java.home" value="/home/binhnv/java/jdk1.6/jre"/>
++++-    <property name="sun.java.command" value="org.codehaus.plexus.classworlds.launcher.Launcher clean install"/>
++++-    <property name="java.specification.vendor" value="Sun Microsystems Inc."/>
++++-    <property name="user.language" value="en"/>
++++-    <property name="java.vm.info" value="mixed mode"/>
++++-    <property name="java.version" value="1.6.0_27"/>
++++-    <property name="java.ext.dirs" value="/home/binhnv/java/jdk1.6/jre/lib/ext:/usr/java/packages/lib/ext"/>
++++-    <property name="securerandom.source" value="file:/dev/./urandom"/>
++++-    <property name="sun.boot.class.path" value="/home/binhnv/java/jdk1.6/jre/lib/resources.jar:/home/binhnv/java/jdk1.6/jre/lib/rt.jar:/home/binhnv/java/jdk1.6/jre/lib/sunrsasign.jar:/home/binhnv/java/jdk1.6/jre/lib/jsse.jar:/home/binhnv/java/jdk1.6/jre/lib/jce.jar:/home/binhnv/java/jdk1.6/jre/lib/charsets.jar:/home/binhnv/java/jdk1.6/jre/lib/modules/jdk.boot.jar:/home/binhnv/java/jdk1.6/jre/classes"/>
++++-    <property name="java.vendor" value="Sun Microsystems Inc."/>
++++-    <property name="maven.home" value="/home/binhnv/java/apache-maven-3.0.4"/>
++++-    <property name="file.separator" value="/"/>
++++-    <property name="java.vendor.url.bug" value="http://java.sun.com/cgi-bin/bugreport.cgi"/>
++++-    <property name="sun.cpu.endian" value="little"/>
++++-    <property name="sun.io.unicode.encoding" value="UnicodeLittle"/>
++++-    <property name="sun.desktop" value="gnome"/>
++++-    <property name="sun.cpu.isalist" value=""/>
++++-  </properties>
++++-  <testcase time="0.003" classname="exoplatform.AppTest" name="testApp"/>
++++-</testsuite>
++++\ No newline at end of file
++++diff --git a/target/surefire-reports/exoplatform.AppTest.txt b/target/surefire-reports/exoplatform.AppTest.txt
++++deleted file mode 100644
++++index 8f1ce6d..0000000
++++--- a/target/surefire-reports/exoplatform.AppTest.txt
+++++++ /dev/null
++++@@ -1,4 +0,0 @@
++++--------------------------------------------------------------------------------
++++-Test set: exoplatform.AppTest
++++--------------------------------------------------------------------------------
++++-Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.018 sec
++++diff --git a/target/test-classes/exoplatform/AppTest.class b/target/test-classes/exoplatform/AppTest.class
++++deleted file mode 100644
++++index 5788b9e..0000000
++++Binary files a/target/test-classes/exoplatform/AppTest.class and /dev/null differ
+++diff --git a/738d597.patch b/738d597.patch
+++new file mode 100644
+++index 0000000..b391be7
+++--- /dev/null
++++++ b/738d597.patch
+++@@ -0,0 +1,97 @@
++++commit 738d597814c0ec0124edfad3e7417f11be3c0f7b
++++Author: BinhNV <binhnv@exoplatform.com>
++++Date:   Mon Jul 16 17:48:04 2012 +0700
++++
++++    add reference from user to books
++++
++++diff --git a/src/main/java/exoplatform/BookStoreService.java b/src/main/java/exoplatform/BookStoreService.java
++++index c132cd9..0754c07 100644
++++--- a/src/main/java/exoplatform/BookStoreService.java
+++++++ b/src/main/java/exoplatform/BookStoreService.java
++++@@ -22,7 +22,6 @@ import java.util.List;
++++ 
++++ import javax.jcr.Node;
++++ import javax.jcr.RepositoryException;
++++-import javax.jcr.Value;
++++ 
++++ import org.exoplatform.services.cache.CacheService;
++++ import org.exoplatform.services.cache.ExoCache;
++++diff --git a/src/main/java/exoplatform/JCRDataStorage.java b/src/main/java/exoplatform/JCRDataStorage.java
++++index d7ba3f1..37addf1 100644
++++--- a/src/main/java/exoplatform/JCRDataStorage.java
+++++++ b/src/main/java/exoplatform/JCRDataStorage.java
++++@@ -144,6 +144,19 @@ public class JCRDataStorage {
++++     }
++++   }
++++   
+++++  public User getUser(String id) {
+++++    SessionProvider sProvider = SessionProvider.createSystemProvider();
+++++    try {
+++++      Node node = getNodeByPath(DEFAULT_PARENT_PATH + DEFAULT_PARENT_USER_PATH, sProvider);
+++++      return createUserByNode(node);
+++++    } catch (RepositoryException re) {
+++++      log.error("Can not find this user", re);
+++++      return null;
+++++    } finally {
+++++      sProvider.close();
+++++    }
+++++  }
+++++  
++++   /**
++++    * The function which add new book to workspace
++++    * 
++++@@ -560,4 +573,54 @@ public class JCRDataStorage {
++++     return null;
++++   }
++++   
+++++  /**
+++++   * 
+++++   * @param node
+++++   * @return
+++++   * @throws RepositoryException
+++++   */
+++++  private User createUserByNode(Node node) throws RepositoryException {
+++++    if (node != null) {
+++++      User user = new User();
+++++      try {
+++++        user.setUserId(Integer.valueOf(node.getName()));
+++++      } catch (RepositoryException re) {
+++++        log.error("Error in convert integer", re);
+++++        return null;
+++++      }
+++++      PropertyReader reader = new PropertyReader(node);
+++++      user.setUsername(reader.string(BookNodeTypes.EXO_USER_NAME));
+++++      user.setPassword(reader.string(BookNodeTypes.EXO_USER_PASSWORD));
+++++      user.setFullname(reader.string(BookNodeTypes.EXO_USER_FULLNAME));
+++++      user.setAddress(reader.string(BookNodeTypes.EXO_USER_ADDRESS));
+++++      user.setPhone(reader.string(BookNodeTypes.EXO_USER_PHONE));
+++++      return user;
+++++    }
+++++    return null;
+++++  }
+++++  
+++++  /**
+++++   * 
+++++   * @param node
+++++   * @return
+++++   * @throws RepositoryException
+++++   */
+++++  private Author createAuthorByNode(Node node) throws RepositoryException {
+++++    if (node != null) {
+++++      Author author = new Author();
+++++      try {
+++++        author.setAuthorId(Integer.valueOf(node.getName()));
+++++      } catch (RepositoryException re) {
+++++        log.error("Error in convert integer", re);
+++++        return null;
+++++      }
+++++      PropertyReader reader = new PropertyReader(node);
+++++      author.setName(reader.string(BookNodeTypes.EXO_AUTHOR_NAME));
+++++      author.setPhone(reader.string(BookNodeTypes.EXO_AUTHOR_PHONE));
+++++      author.setAddress(reader.string(BookNodeTypes.EXO_AUTHOR_ADDRESS));
+++++      return author;
+++++    }
+++++    return null;
+++++  }
+++++  
++++ }
+++diff --git a/756b2ab.patch b/756b2ab.patch
+++new file mode 100644
+++index 0000000..6c3ced3
+++--- /dev/null
++++++ b/756b2ab.patch
+++@@ -0,0 +1,40 @@
++++commit 756b2abf0d4db86052b09576613b2fa0ce4d435b
++++Author: BinhNV <binhnv@exoplatform.com>
++++Date:   Fri Jul 13 16:46:24 2012 +0700
++++
++++    modified file
++++
++++diff --git a/src/main/java/exoplatform/BookStoreService.java b/src/main/java/exoplatform/BookStoreService.java
++++index 5c265d5..8e45abd 100644
++++--- a/src/main/java/exoplatform/BookStoreService.java
+++++++ b/src/main/java/exoplatform/BookStoreService.java
++++@@ -17,7 +17,6 @@
++++ package exoplatform;
++++ 
++++ import java.io.Serializable;
++++-import java.util.ArrayList;
++++ import java.util.List;
++++ 
++++ import javax.jcr.RepositoryException;
++++@@ -33,7 +32,6 @@ import exoplatform.entity.Author;
++++ import exoplatform.entity.Book;
++++ import exoplatform.entity.Book.CATEGORY;
++++ import exoplatform.exception.DuplicateBookException;
++++-import exoplatform.utils.Utils;
++++ 
++++ /**
++++  * Created by The eXo Platform SAS
++++@@ -149,8 +147,8 @@ public class BookStoreService implements Startable {
++++       addBook("Hibernate in action", CATEGORY.TECHNICAL, "Hibernate");
++++       addBook("Napoleon", CATEGORY.HISTORY, "Napoleon");
++++       addBook("Jouney to the West", CATEGORY.COMICS, "Jouney to the West");
++++-    } catch (DuplicateBookException e) {
++++-      e.printStackTrace();
+++++    } catch (DuplicateBookException de) {
+++++      log.error("Duplicate book", de);
++++     }
++++   } 
++++   
++++diff --git a/target/classes/exoplatform/BookStoreService.class b/target/classes/exoplatform/BookStoreService.class
++++index 04e4b93..a0ea9a7 100644
++++Binary files a/target/classes/exoplatform/BookStoreService.class and b/target/classes/exoplatform/BookStoreService.class differ
+++diff --git a/7ad1315.patch b/7ad1315.patch
+++new file mode 100644
+++index 0000000..9dff68b
+++--- /dev/null
++++++ b/7ad1315.patch
+++@@ -0,0 +1,275 @@
++++commit 7ad13154ab82e342ed2df3886609e003eec257c3
++++Author: BinhNV <binhnv@exoplatform.com>
++++Date:   Fri Jul 13 19:04:30 2012 +0700
++++
++++    add
++++
++++diff --git a/src/main/java/exoplatform/BookNodeTypes.java b/src/main/java/exoplatform/BookNodeTypes.java
++++index 1cc8a6a..058d142 100644
++++--- a/src/main/java/exoplatform/BookNodeTypes.java
+++++++ b/src/main/java/exoplatform/BookNodeTypes.java
++++@@ -32,6 +32,8 @@ public interface BookNodeTypes {
++++   public static final String EXO_BOOK_CATEGORY = "exostore:bookcategory";
++++   /* exostore:bookcontent is a property of exostore:book */
++++   public static final String EXO_BOOK_CONTENT = "exostore:bookcontent";
+++++  /* exostore:bookcontent is a property of exostore:book */
+++++  public static final String EXO_BOOK_AUTHOR = "exostore:author";
++++   
++++   /* define parent node of author */
++++   public static final String EXO_AUTHOR = "exostore:author";
++++diff --git a/src/main/java/exoplatform/BookStoreService.java b/src/main/java/exoplatform/BookStoreService.java
++++index 8e45abd..0b117f7 100644
++++--- a/src/main/java/exoplatform/BookStoreService.java
+++++++ b/src/main/java/exoplatform/BookStoreService.java
++++@@ -19,6 +19,7 @@ package exoplatform;
++++ import java.io.Serializable;
++++ import java.util.List;
++++ 
+++++import javax.jcr.Node;
++++ import javax.jcr.RepositoryException;
++++ 
++++ import org.exoplatform.services.cache.CacheService;
++++@@ -70,14 +71,15 @@ public class BookStoreService implements Startable {
++++   public void start() {
++++     jcrDataStorage.init();
++++ //    List<Book> books = new ArrayList<Book>(); 
++++-//    try {
++++-//      addBook("The Mask", CATEGORY.NOVEL, "Test");
++++-//    } catch (DuplicateBookException e) {
++++-//      // TODO Auto-generated catch block
++++-//      e.printStackTrace();
++++-//    }
++++-    addMultiBook();
++++-    addMultiAuthor();
+++++    try {
+++++      Node authorNode = addAuthor("Conan Doyle", "England", "123456789");
+++++      addBook("The Mask", CATEGORY.NOVEL, "Test", authorNode);
+++++    } catch (DuplicateBookException e) {
+++++      // TODO Auto-generated catch block
+++++      e.printStackTrace();
+++++    }
+++++//    addMultiBook();
+++++//    addMultiAuthor();
++++ //    books = searchBookByNameLikeXPath("Holme");
++++ //    if (books != null && books.size() > 0) {
++++ //      for (Book book : books) {
++++@@ -107,9 +109,9 @@ public class BookStoreService implements Startable {
++++    * @return
++++    * @throws DuplicateBookException
++++    */
++++-  public Book addBook(String bookName, CATEGORY category, String content) throws DuplicateBookException {
+++++  public Book addBook(String bookName, CATEGORY category, String content, Node node) throws DuplicateBookException {
++++     Book book = new Book(bookName, category, content);
++++-    return jcrDataStorage.addBook(book);
+++++    return jcrDataStorage.addBook(book, node);
++++   }
++++   
++++   /**
++++@@ -119,7 +121,7 @@ public class BookStoreService implements Startable {
++++    * @param authorPhone
++++    * @return
++++    */
++++-  public Author addAuthor(String authorName, String authorAddress, String authorPhone) {
+++++  public Node addAuthor(String authorName, String authorAddress, String authorPhone) {
++++     Author author = new Author(authorName, authorAddress, authorPhone);
++++     return jcrDataStorage.addAuthor(author);
++++   }
++++@@ -140,16 +142,16 @@ public class BookStoreService implements Startable {
++++    * This function support for add multi book to datastorage
++++    */
++++   public void addMultiBook() {
++++-    try {
++++-      addBook("Shelock Holme", CATEGORY.NOVEL, "The sign of the Four");
++++-      addBook("Alice in wonder land", CATEGORY.COMICS, "Alice in wonder land");
++++-      addBook("Seal team six", CATEGORY.NOVEL, "Seal team six");
++++-      addBook("Hibernate in action", CATEGORY.TECHNICAL, "Hibernate");
++++-      addBook("Napoleon", CATEGORY.HISTORY, "Napoleon");
++++-      addBook("Jouney to the West", CATEGORY.COMICS, "Jouney to the West");
++++-    } catch (DuplicateBookException de) {
++++-      log.error("Duplicate book", de);
++++-    }
+++++//    try {
+++++//      addBook("Shelock Holme", CATEGORY.NOVEL, "The sign of the Four");
+++++//      addBook("Alice in wonder land", CATEGORY.COMICS, "Alice in wonder land");
+++++//      addBook("Seal team six", CATEGORY.NOVEL, "Seal team six");
+++++//      addBook("Hibernate in action", CATEGORY.TECHNICAL, "Hibernate");
+++++//      addBook("Napoleon", CATEGORY.HISTORY, "Napoleon");
+++++//      addBook("Jouney to the West", CATEGORY.COMICS, "Jouney to the West");
+++++//    } catch (DuplicateBookException de) {
+++++//      log.error("Duplicate book", de);
+++++//    }
++++   } 
++++   
++++   /**
++++diff --git a/src/main/java/exoplatform/JCRDataStorage.java b/src/main/java/exoplatform/JCRDataStorage.java
++++index ef23941..e7fba58 100644
++++--- a/src/main/java/exoplatform/JCRDataStorage.java
+++++++ b/src/main/java/exoplatform/JCRDataStorage.java
++++@@ -147,10 +147,7 @@ public class JCRDataStorage {
++++    * @return Book
++++    * @throws DuplicateBookException
++++    */
++++-  public Book addBook(Book book) throws DuplicateBookException {
++++-    System.out.println("+ ========================================================================== +");
++++-    System.out.println("+                         add book function                                  +");
++++-    System.out.println("+ ========================================================================== +");
+++++  public Book addBook(Book book, Node node) throws DuplicateBookException {
++++     SessionProvider sProvider = SessionProvider.createSystemProvider();
++++     /* Check exist of book */
++++     if (isExistBookName(book.getName(), sProvider)) {
++++@@ -163,32 +160,24 @@ public class JCRDataStorage {
++++     try {
++++       /* execute set data to node and save to workspace */
++++       Node parentNode = getNodeByPath(DEFAULT_PARENT_PATH + DEFAULT_PARENT_BOOK_PATH, sProvider);
++++-      System.out.println("+ ========================================================================== +");
++++-      System.out.println("+                         " + parentNode.getPath() + "                       +");
++++-      System.out.println("+ ========================================================================== +");
++++       Node bookNode = parentNode.addNode("" + book.getId(), BookNodeTypes.EXO_BOOK);
++++       bookNode.setProperty(BookNodeTypes.EXO_BOOK_NAME, book.getName());
++++       bookNode.setProperty(BookNodeTypes.EXO_BOOK_CATEGORY, Utils.bookCategoryEnumToString(book.getCategory()));
++++       bookNode.setProperty(BookNodeTypes.EXO_BOOK_CONTENT, book.getContent());
+++++      bookNode.setProperty(BookNodeTypes.EXO_BOOK_AUTHOR, node);
++++       parentNode.getSession().save();
++++       return book;
++++     } catch (PathNotFoundException e) {
++++-      System.out.println("+ ========================================================================== +");
++++-      System.out.println("+                         Path not found exception                           +");
++++-      System.out.println("+ ========================================================================== +");
++++       return null;
++++     } catch (RepositoryException e) {
++++       log.error("Failed to add book", e);
++++-      System.out.println("+ ========================================================================== +");
++++-      System.out.println("+                              Repository exception                          +");
++++-      System.out.println("+ ========================================================================== +");
++++       return null;
++++     } finally {
++++       sProvider.close();
++++     }
++++   }
++++   
++++-  public Author addAuthor(Author author) {
+++++  public Node addAuthor(Author author) {
++++     SessionProvider sProvider = SessionProvider.createSystemProvider();
++++     author.setId(Utils.authorId++);
++++     try {
++++@@ -198,7 +187,7 @@ public class JCRDataStorage {
++++       authorNode.setProperty(BookNodeTypes.EXO_AUTHOR_ADDRESS, author.getAddress());
++++       authorNode.setProperty(BookNodeTypes.EXO_AUTHOR_PHONE, author.getPhone());
++++       parentNode.getSession().save();
++++-      return author;
+++++      return authorNode;
++++     } catch (RepositoryException re) {
++++       log.error("Failed to add author", re);
++++       return null;
++++diff --git a/src/main/resources/conf/portal/nodetypes.xml b/src/main/resources/conf/portal/nodetypes.xml
++++index 6f40180..fba444b 100644
++++--- a/src/main/resources/conf/portal/nodetypes.xml
+++++++ b/src/main/resources/conf/portal/nodetypes.xml
++++@@ -4,6 +4,7 @@
++++ 	<nodeType name="exostore:book" isMixin="false" hasOrderableChildNodes="false" primaryItemName="">
++++ 		<supertypes>
++++ 			<supertype>nt:base</supertype>
+++++			<supertype>mix:referenceable</supertype>
++++ 		</supertypes>
++++ 		<propertyDefinitions>
++++ 			<propertyDefinition name="exostore:bookname" requiredType="String" autoCreated="false" mandatory="false" 
++++@@ -18,12 +19,17 @@
++++ 						onParentVersion="COPY" protected="false" multiple="false">
++++ 				<valueConstraints/>
++++ 			</propertyDefinition>
+++++			<propertyDefinition name="exostore:author" requiredType="Reference" autoCreated="false" mandatory="false" 
+++++			    		onParentVersion="COPY" protected="false" multiple="false">
+++++        		<valueConstraints/>
+++++      		</propertyDefinition>
++++ 		</propertyDefinitions>
++++ 	</nodeType>
++++ 	
++++ 	<nodeType name="exostore:author" isMixin="false" hasOrderableChildNodes="false" primaryItemName="">
++++ 		<supertypes>
++++ 			<supertype>nt:base</supertype>
+++++			<supertype>mix:referenceable</supertype>
++++ 		</supertypes>
++++ 		<propertyDefinitions>
++++ 			<propertyDefinition name="exostore:authorname" requiredType="String" autoCreated="false" mandatory="false" 
++++diff --git a/target/classes/conf/portal/nodetypes.xml b/target/classes/conf/portal/nodetypes.xml
++++index 6f40180..fba444b 100644
++++--- a/target/classes/conf/portal/nodetypes.xml
+++++++ b/target/classes/conf/portal/nodetypes.xml
++++@@ -4,6 +4,7 @@
++++ 	<nodeType name="exostore:book" isMixin="false" hasOrderableChildNodes="false" primaryItemName="">
++++ 		<supertypes>
++++ 			<supertype>nt:base</supertype>
+++++			<supertype>mix:referenceable</supertype>
++++ 		</supertypes>
++++ 		<propertyDefinitions>
++++ 			<propertyDefinition name="exostore:bookname" requiredType="String" autoCreated="false" mandatory="false" 
++++@@ -18,12 +19,17 @@
++++ 						onParentVersion="COPY" protected="false" multiple="false">
++++ 				<valueConstraints/>
++++ 			</propertyDefinition>
+++++			<propertyDefinition name="exostore:author" requiredType="Reference" autoCreated="false" mandatory="false" 
+++++			    		onParentVersion="COPY" protected="false" multiple="false">
+++++        		<valueConstraints/>
+++++      		</propertyDefinition>
++++ 		</propertyDefinitions>
++++ 	</nodeType>
++++ 	
++++ 	<nodeType name="exostore:author" isMixin="false" hasOrderableChildNodes="false" primaryItemName="">
++++ 		<supertypes>
++++ 			<supertype>nt:base</supertype>
+++++			<supertype>mix:referenceable</supertype>
++++ 		</supertypes>
++++ 		<propertyDefinitions>
++++ 			<propertyDefinition name="exostore:authorname" requiredType="String" autoCreated="false" mandatory="false" 
++++diff --git a/target/classes/exoplatform/BookNodeTypes.class b/target/classes/exoplatform/BookNodeTypes.class
++++index 97e72a8..4f166ea 100644
++++Binary files a/target/classes/exoplatform/BookNodeTypes.class and b/target/classes/exoplatform/BookNodeTypes.class differ
++++diff --git a/target/classes/exoplatform/BookStoreService.class b/target/classes/exoplatform/BookStoreService.class
++++index a0ea9a7..effa12c 100644
++++Binary files a/target/classes/exoplatform/BookStoreService.class and b/target/classes/exoplatform/BookStoreService.class differ
++++diff --git a/target/classes/exoplatform/JCRDataStorage.class b/target/classes/exoplatform/JCRDataStorage.class
++++index 879d1a5..5d409f5 100644
++++Binary files a/target/classes/exoplatform/JCRDataStorage.class and b/target/classes/exoplatform/JCRDataStorage.class differ
++++diff --git a/target/jcr-exo-1.0-SNAPSHOT.jar b/target/jcr-exo-1.0-SNAPSHOT.jar
++++index 4da898f..848c9f8 100644
++++Binary files a/target/jcr-exo-1.0-SNAPSHOT.jar and b/target/jcr-exo-1.0-SNAPSHOT.jar differ
++++diff --git a/target/maven-archiver/pom.properties b/target/maven-archiver/pom.properties
++++index 9c401b4..dd69bd4 100644
++++--- a/target/maven-archiver/pom.properties
+++++++ b/target/maven-archiver/pom.properties
++++@@ -1,5 +1,5 @@
++++ #Generated by Maven
++++-#Fri Jul 13 14:57:28 ICT 2012
+++++#Fri Jul 13 18:56:27 ICT 2012
++++ version=1.0-SNAPSHOT
++++ groupId=exoplatform
++++ artifactId=jcr-exo
++++diff --git a/target/surefire-reports/TEST-exoplatform.AppTest.xml b/target/surefire-reports/TEST-exoplatform.AppTest.xml
++++index f731d34..c6bb568 100644
++++--- a/target/surefire-reports/TEST-exoplatform.AppTest.xml
+++++++ b/target/surefire-reports/TEST-exoplatform.AppTest.xml
++++@@ -1,5 +1,5 @@
++++ <?xml version="1.0" encoding="UTF-8" ?>
++++-<testsuite failures="0" time="0.013" errors="0" skipped="0" tests="1" name="exoplatform.AppTest">
+++++<testsuite failures="0" time="0.019" errors="0" skipped="0" tests="1" name="exoplatform.AppTest">
++++   <properties>
++++     <property name="java.runtime.name" value="Java(TM) SE Runtime Environment"/>
++++     <property name="sun.boot.library.path" value="/home/binhnv/java/jdk1.6/jre/lib/amd64"/>
++++@@ -58,5 +58,5 @@
++++     <property name="sun.desktop" value="gnome"/>
++++     <property name="sun.cpu.isalist" value=""/>
++++   </properties>
++++-  <testcase time="0.002" classname="exoplatform.AppTest" name="testApp"/>
+++++  <testcase time="0.003" classname="exoplatform.AppTest" name="testApp"/>
++++ </testsuite>
++++\ No newline at end of file
++++diff --git a/target/surefire-reports/exoplatform.AppTest.txt b/target/surefire-reports/exoplatform.AppTest.txt
++++index 87ea500..8f1ce6d 100644
++++--- a/target/surefire-reports/exoplatform.AppTest.txt
+++++++ b/target/surefire-reports/exoplatform.AppTest.txt
++++@@ -1,4 +1,4 @@
++++ -------------------------------------------------------------------------------
++++ Test set: exoplatform.AppTest
++++ -------------------------------------------------------------------------------
++++-Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.013 sec
+++++Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.018 sec
+++diff --git a/abc.patch b/abc.patch
+++new file mode 100644
+++index 0000000..b391be7
+++--- /dev/null
++++++ b/abc.patch
+++@@ -0,0 +1,97 @@
++++commit 738d597814c0ec0124edfad3e7417f11be3c0f7b
++++Author: BinhNV <binhnv@exoplatform.com>
++++Date:   Mon Jul 16 17:48:04 2012 +0700
++++
++++    add reference from user to books
++++
++++diff --git a/src/main/java/exoplatform/BookStoreService.java b/src/main/java/exoplatform/BookStoreService.java
++++index c132cd9..0754c07 100644
++++--- a/src/main/java/exoplatform/BookStoreService.java
+++++++ b/src/main/java/exoplatform/BookStoreService.java
++++@@ -22,7 +22,6 @@ import java.util.List;
++++ 
++++ import javax.jcr.Node;
++++ import javax.jcr.RepositoryException;
++++-import javax.jcr.Value;
++++ 
++++ import org.exoplatform.services.cache.CacheService;
++++ import org.exoplatform.services.cache.ExoCache;
++++diff --git a/src/main/java/exoplatform/JCRDataStorage.java b/src/main/java/exoplatform/JCRDataStorage.java
++++index d7ba3f1..37addf1 100644
++++--- a/src/main/java/exoplatform/JCRDataStorage.java
+++++++ b/src/main/java/exoplatform/JCRDataStorage.java
++++@@ -144,6 +144,19 @@ public class JCRDataStorage {
++++     }
++++   }
++++   
+++++  public User getUser(String id) {
+++++    SessionProvider sProvider = SessionProvider.createSystemProvider();
+++++    try {
+++++      Node node = getNodeByPath(DEFAULT_PARENT_PATH + DEFAULT_PARENT_USER_PATH, sProvider);
+++++      return createUserByNode(node);
+++++    } catch (RepositoryException re) {
+++++      log.error("Can not find this user", re);
+++++      return null;
+++++    } finally {
+++++      sProvider.close();
+++++    }
+++++  }
+++++  
++++   /**
++++    * The function which add new book to workspace
++++    * 
++++@@ -560,4 +573,54 @@ public class JCRDataStorage {
++++     return null;
++++   }
++++   
+++++  /**
+++++   * 
+++++   * @param node
+++++   * @return
+++++   * @throws RepositoryException
+++++   */
+++++  private User createUserByNode(Node node) throws RepositoryException {
+++++    if (node != null) {
+++++      User user = new User();
+++++      try {
+++++        user.setUserId(Integer.valueOf(node.getName()));
+++++      } catch (RepositoryException re) {
+++++        log.error("Error in convert integer", re);
+++++        return null;
+++++      }
+++++      PropertyReader reader = new PropertyReader(node);
+++++      user.setUsername(reader.string(BookNodeTypes.EXO_USER_NAME));
+++++      user.setPassword(reader.string(BookNodeTypes.EXO_USER_PASSWORD));
+++++      user.setFullname(reader.string(BookNodeTypes.EXO_USER_FULLNAME));
+++++      user.setAddress(reader.string(BookNodeTypes.EXO_USER_ADDRESS));
+++++      user.setPhone(reader.string(BookNodeTypes.EXO_USER_PHONE));
+++++      return user;
+++++    }
+++++    return null;
+++++  }
+++++  
+++++  /**
+++++   * 
+++++   * @param node
+++++   * @return
+++++   * @throws RepositoryException
+++++   */
+++++  private Author createAuthorByNode(Node node) throws RepositoryException {
+++++    if (node != null) {
+++++      Author author = new Author();
+++++      try {
+++++        author.setAuthorId(Integer.valueOf(node.getName()));
+++++      } catch (RepositoryException re) {
+++++        log.error("Error in convert integer", re);
+++++        return null;
+++++      }
+++++      PropertyReader reader = new PropertyReader(node);
+++++      author.setName(reader.string(BookNodeTypes.EXO_AUTHOR_NAME));
+++++      author.setPhone(reader.string(BookNodeTypes.EXO_AUTHOR_PHONE));
+++++      author.setAddress(reader.string(BookNodeTypes.EXO_AUTHOR_ADDRESS));
+++++      return author;
+++++    }
+++++    return null;
+++++  }
+++++  
++++ }
+++diff --git a/f8cc23e.patch b/f8cc23e.patch
+++new file mode 100644
+++index 0000000..4629a88
+++--- /dev/null
++++++ b/f8cc23e.patch
+++@@ -0,0 +1,1328 @@
++++commit f8cc23e632d47b4f9175d2fedb64e636ccb786e8
++++Author: BinhNV <binhnv@exoplatform.com>
++++Date:   Mon Jul 16 16:44:58 2012 +0700
++++
++++    commit after completed 3 table with multi-refer
++++
++++diff --git a/jcr_exo_20120715.patch b/jcr_exo_20120715.patch
++++new file mode 100644
++++index 0000000..57888dd
++++--- /dev/null
+++++++ b/jcr_exo_20120715.patch
++++@@ -0,0 +1,695 @@
+++++diff --git a/src/main/java/exoplatform/BookNodeTypes.java b/src/main/java/exoplatform/BookNodeTypes.java
+++++index 058d142..1cc8a6a 100644
+++++--- a/src/main/java/exoplatform/BookNodeTypes.java
++++++++ b/src/main/java/exoplatform/BookNodeTypes.java
+++++@@ -32,8 +32,6 @@ public interface BookNodeTypes {
+++++   public static final String EXO_BOOK_CATEGORY = "exostore:bookcategory";
+++++   /* exostore:bookcontent is a property of exostore:book */
+++++   public static final String EXO_BOOK_CONTENT = "exostore:bookcontent";
+++++-  /* exostore:bookcontent is a property of exostore:book */
+++++-  public static final String EXO_BOOK_AUTHOR = "exostore:author";
+++++   
+++++   /* define parent node of author */
+++++   public static final String EXO_AUTHOR = "exostore:author";
+++++diff --git a/src/main/java/exoplatform/BookStoreService.java b/src/main/java/exoplatform/BookStoreService.java
+++++index 0b117f7..5c265d5 100644
+++++--- a/src/main/java/exoplatform/BookStoreService.java
++++++++ b/src/main/java/exoplatform/BookStoreService.java
+++++@@ -17,9 +17,9 @@
+++++ package exoplatform;
+++++ 
+++++ import java.io.Serializable;
++++++import java.util.ArrayList;
+++++ import java.util.List;
+++++ 
+++++-import javax.jcr.Node;
+++++ import javax.jcr.RepositoryException;
+++++ 
+++++ import org.exoplatform.services.cache.CacheService;
+++++@@ -33,6 +33,7 @@ import exoplatform.entity.Author;
+++++ import exoplatform.entity.Book;
+++++ import exoplatform.entity.Book.CATEGORY;
+++++ import exoplatform.exception.DuplicateBookException;
++++++import exoplatform.utils.Utils;
+++++ 
+++++ /**
+++++  * Created by The eXo Platform SAS
+++++@@ -71,15 +72,14 @@ public class BookStoreService implements Startable {
+++++   public void start() {
+++++     jcrDataStorage.init();
+++++ //    List<Book> books = new ArrayList<Book>(); 
+++++-    try {
+++++-      Node authorNode = addAuthor("Conan Doyle", "England", "123456789");
+++++-      addBook("The Mask", CATEGORY.NOVEL, "Test", authorNode);
+++++-    } catch (DuplicateBookException e) {
+++++-      // TODO Auto-generated catch block
+++++-      e.printStackTrace();
+++++-    }
+++++-//    addMultiBook();
+++++-//    addMultiAuthor();
++++++//    try {
++++++//      addBook("The Mask", CATEGORY.NOVEL, "Test");
++++++//    } catch (DuplicateBookException e) {
++++++//      // TODO Auto-generated catch block
++++++//      e.printStackTrace();
++++++//    }
++++++    addMultiBook();
++++++    addMultiAuthor();
+++++ //    books = searchBookByNameLikeXPath("Holme");
+++++ //    if (books != null && books.size() > 0) {
+++++ //      for (Book book : books) {
+++++@@ -109,9 +109,9 @@ public class BookStoreService implements Startable {
+++++    * @return
+++++    * @throws DuplicateBookException
+++++    */
+++++-  public Book addBook(String bookName, CATEGORY category, String content, Node node) throws DuplicateBookException {
++++++  public Book addBook(String bookName, CATEGORY category, String content) throws DuplicateBookException {
+++++     Book book = new Book(bookName, category, content);
+++++-    return jcrDataStorage.addBook(book, node);
++++++    return jcrDataStorage.addBook(book);
+++++   }
+++++   
+++++   /**
+++++@@ -121,7 +121,7 @@ public class BookStoreService implements Startable {
+++++    * @param authorPhone
+++++    * @return
+++++    */
+++++-  public Node addAuthor(String authorName, String authorAddress, String authorPhone) {
++++++  public Author addAuthor(String authorName, String authorAddress, String authorPhone) {
+++++     Author author = new Author(authorName, authorAddress, authorPhone);
+++++     return jcrDataStorage.addAuthor(author);
+++++   }
+++++@@ -142,16 +142,16 @@ public class BookStoreService implements Startable {
+++++    * This function support for add multi book to datastorage
+++++    */
+++++   public void addMultiBook() {
+++++-//    try {
+++++-//      addBook("Shelock Holme", CATEGORY.NOVEL, "The sign of the Four");
+++++-//      addBook("Alice in wonder land", CATEGORY.COMICS, "Alice in wonder land");
+++++-//      addBook("Seal team six", CATEGORY.NOVEL, "Seal team six");
+++++-//      addBook("Hibernate in action", CATEGORY.TECHNICAL, "Hibernate");
+++++-//      addBook("Napoleon", CATEGORY.HISTORY, "Napoleon");
+++++-//      addBook("Jouney to the West", CATEGORY.COMICS, "Jouney to the West");
+++++-//    } catch (DuplicateBookException de) {
+++++-//      log.error("Duplicate book", de);
+++++-//    }
++++++    try {
++++++      addBook("Shelock Holme", CATEGORY.NOVEL, "The sign of the Four");
++++++      addBook("Alice in wonder land", CATEGORY.COMICS, "Alice in wonder land");
++++++      addBook("Seal team six", CATEGORY.NOVEL, "Seal team six");
++++++      addBook("Hibernate in action", CATEGORY.TECHNICAL, "Hibernate");
++++++      addBook("Napoleon", CATEGORY.HISTORY, "Napoleon");
++++++      addBook("Jouney to the West", CATEGORY.COMICS, "Jouney to the West");
++++++    } catch (DuplicateBookException e) {
++++++      e.printStackTrace();
++++++    }
+++++   } 
+++++   
+++++   /**
+++++diff --git a/src/main/java/exoplatform/JCRDataStorage.java b/src/main/java/exoplatform/JCRDataStorage.java
+++++index e7fba58..ef23941 100644
+++++--- a/src/main/java/exoplatform/JCRDataStorage.java
++++++++ b/src/main/java/exoplatform/JCRDataStorage.java
+++++@@ -147,7 +147,10 @@ public class JCRDataStorage {
+++++    * @return Book
+++++    * @throws DuplicateBookException
+++++    */
+++++-  public Book addBook(Book book, Node node) throws DuplicateBookException {
++++++  public Book addBook(Book book) throws DuplicateBookException {
++++++    System.out.println("+ ========================================================================== +");
++++++    System.out.println("+                         add book function                                  +");
++++++    System.out.println("+ ========================================================================== +");
+++++     SessionProvider sProvider = SessionProvider.createSystemProvider();
+++++     /* Check exist of book */
+++++     if (isExistBookName(book.getName(), sProvider)) {
+++++@@ -160,24 +163,32 @@ public class JCRDataStorage {
+++++     try {
+++++       /* execute set data to node and save to workspace */
+++++       Node parentNode = getNodeByPath(DEFAULT_PARENT_PATH + DEFAULT_PARENT_BOOK_PATH, sProvider);
++++++      System.out.println("+ ========================================================================== +");
++++++      System.out.println("+                         " + parentNode.getPath() + "                       +");
++++++      System.out.println("+ ========================================================================== +");
+++++       Node bookNode = parentNode.addNode("" + book.getId(), BookNodeTypes.EXO_BOOK);
+++++       bookNode.setProperty(BookNodeTypes.EXO_BOOK_NAME, book.getName());
+++++       bookNode.setProperty(BookNodeTypes.EXO_BOOK_CATEGORY, Utils.bookCategoryEnumToString(book.getCategory()));
+++++       bookNode.setProperty(BookNodeTypes.EXO_BOOK_CONTENT, book.getContent());
+++++-      bookNode.setProperty(BookNodeTypes.EXO_BOOK_AUTHOR, node);
+++++       parentNode.getSession().save();
+++++       return book;
+++++     } catch (PathNotFoundException e) {
++++++      System.out.println("+ ========================================================================== +");
++++++      System.out.println("+                         Path not found exception                           +");
++++++      System.out.println("+ ========================================================================== +");
+++++       return null;
+++++     } catch (RepositoryException e) {
+++++       log.error("Failed to add book", e);
++++++      System.out.println("+ ========================================================================== +");
++++++      System.out.println("+                              Repository exception                          +");
++++++      System.out.println("+ ========================================================================== +");
+++++       return null;
+++++     } finally {
+++++       sProvider.close();
+++++     }
+++++   }
+++++   
+++++-  public Node addAuthor(Author author) {
++++++  public Author addAuthor(Author author) {
+++++     SessionProvider sProvider = SessionProvider.createSystemProvider();
+++++     author.setId(Utils.authorId++);
+++++     try {
+++++@@ -187,7 +198,7 @@ public class JCRDataStorage {
+++++       authorNode.setProperty(BookNodeTypes.EXO_AUTHOR_ADDRESS, author.getAddress());
+++++       authorNode.setProperty(BookNodeTypes.EXO_AUTHOR_PHONE, author.getPhone());
+++++       parentNode.getSession().save();
+++++-      return authorNode;
++++++      return author;
+++++     } catch (RepositoryException re) {
+++++       log.error("Failed to add author", re);
+++++       return null;
+++++diff --git a/src/main/resources/conf/portal/nodetypes.xml b/src/main/resources/conf/portal/nodetypes.xml
+++++index fba444b..6f40180 100644
+++++--- a/src/main/resources/conf/portal/nodetypes.xml
++++++++ b/src/main/resources/conf/portal/nodetypes.xml
+++++@@ -4,7 +4,6 @@
+++++ 	<nodeType name="exostore:book" isMixin="false" hasOrderableChildNodes="false" primaryItemName="">
+++++ 		<supertypes>
+++++ 			<supertype>nt:base</supertype>
+++++-			<supertype>mix:referenceable</supertype>
+++++ 		</supertypes>
+++++ 		<propertyDefinitions>
+++++ 			<propertyDefinition name="exostore:bookname" requiredType="String" autoCreated="false" mandatory="false" 
+++++@@ -19,17 +18,12 @@
+++++ 						onParentVersion="COPY" protected="false" multiple="false">
+++++ 				<valueConstraints/>
+++++ 			</propertyDefinition>
+++++-			<propertyDefinition name="exostore:author" requiredType="Reference" autoCreated="false" mandatory="false" 
+++++-			    		onParentVersion="COPY" protected="false" multiple="false">
+++++-        		<valueConstraints/>
+++++-      		</propertyDefinition>
+++++ 		</propertyDefinitions>
+++++ 	</nodeType>
+++++ 	
+++++ 	<nodeType name="exostore:author" isMixin="false" hasOrderableChildNodes="false" primaryItemName="">
+++++ 		<supertypes>
+++++ 			<supertype>nt:base</supertype>
+++++-			<supertype>mix:referenceable</supertype>
+++++ 		</supertypes>
+++++ 		<propertyDefinitions>
+++++ 			<propertyDefinition name="exostore:authorname" requiredType="String" autoCreated="false" mandatory="false" 
+++++diff --git a/target/classes/conf/portal/bookstore-configuration.xml b/target/classes/conf/portal/bookstore-configuration.xml
+++++new file mode 100644
+++++index 0000000..29f1ffb
+++++--- /dev/null
++++++++ b/target/classes/conf/portal/bookstore-configuration.xml
+++++@@ -0,0 +1,13 @@
++++++<?xml version="1.0" encoding="ISO-8859-1"?>
++++++<configuration xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.exoplaform.org/xml/ns/kernel_1_0.xsd
++++++	http://www.exoplaform.org/xml/ns/kernel_1_0.xsd" xmlns="http://www.exoplaform.org/xml/ns/kernel_1_0.xsd">
++++++	<component>
++++++		<key>exoplatform.JCRDataStorage</key>
++++++		<type>exoplatform.JCRDataStorage</type>
++++++	</component>
++++++	<component>
++++++	    <key>exoplatform.BookStoreService</key>
++++++	    <type>exoplatform.BookStoreService</type>
++++++    </component>
++++++
++++++</configuration>
+++++\ No newline at end of file
+++++diff --git a/target/classes/conf/portal/configuration.xml b/target/classes/conf/portal/configuration.xml
+++++new file mode 100644
+++++index 0000000..50e229b
+++++--- /dev/null
++++++++ b/target/classes/conf/portal/configuration.xml
+++++@@ -0,0 +1,10 @@
++++++<?xml version="1.0" encoding="ISO-8859-1"?>
++++++<configuration 
++++++	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
++++++	xsi:schemaLocation="http://www.exoplaform.org/xml/ns/kernel_1_0.xsd http://www.exoplaform.org/xml/ns/kernel_1_0.xsd"
++++++	 xmlns="http://www.exoplaform.org/xml/ns/kernel_1_0.xsd">
++++++	<import>jar:/conf/portal/jcr-configuration.xml</import>
++++++	<import>jar:/conf/portal/jcr-component-plugins-configuration.xml</import>
++++++	<import>jar:/conf/portal/jcr-nodetypes-configuration.xml</import>
++++++	<import>jar:/conf/portal/bookstore-configuration.xml</import>
++++++</configuration>
+++++\ No newline at end of file
+++++diff --git a/target/classes/conf/portal/jcr-component-plugins-configuration.xml b/target/classes/conf/portal/jcr-component-plugins-configuration.xml
+++++new file mode 100644
+++++index 0000000..04ff268
+++++--- /dev/null
++++++++ b/target/classes/conf/portal/jcr-component-plugins-configuration.xml
+++++@@ -0,0 +1,114 @@
++++++<?xml version="1.0" encoding="ISO-8859-1"?>
++++++<!-- This file create new root path -->
++++++<configuration xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.exoplaform.org/xml/ns/kernel_1_0.xsd http://www.exoplaform.org/xml/ns/kernel_1_0.xsd"
++++++  xmlns="http://www.exoplaform.org/xml/ns/kernel_1_0.xsd">
++++++  <external-component-plugins>
++++++    <target-component>org.exoplatform.services.jcr.ext.hierarchy.NodeHierarchyCreator</target-component>
++++++    <component-plugin>
++++++      	<name>addPaths</name>
++++++      	<set-method>addPlugin</set-method>
++++++      	<type>org.exoplatform.services.jcr.ext.hierarchy.impl.AddPathPlugin</type>            
++++++      	<init-params>
++++++        	<object-param>
++++++          		<name>cms.configuration</name>
++++++          		<description>configuration for the cms path</description>
++++++          		<object type="org.exoplatform.services.jcr.ext.hierarchy.impl.HierarchyConfig">
++++++		            <field name="workspaces">
++++++		              <collection type="java.util.ArrayList">
++++++		                <value><string>bookstore</string></value>
++++++		              </collection>                
++++++		            </field>
++++++	            	<field  name="jcrPaths">
++++++		 	        	<collection type="java.util.ArrayList">
++++++			            	<value>                
++++++	        		        	<object type="org.exoplatform.services.jcr.ext.hierarchy.impl.HierarchyConfig$JcrPath">                   
++++++		                     		<field  name="alias"><string>exobookstore</string></field>
++++++		                     		<field  name="path"><string>/exostore:bookstore</string></field>                                          
++++++		                     		<field name="permissions">
++++++		                       			<collection type="java.util.ArrayList">               
++++++		                         			<value>                            
++++++		                           				<object type="org.exoplatform.services.jcr.ext.hierarchy.impl.HierarchyConfig$Permission">
++++++													  <field name="identity"><string>*:/platform/administrators</string></field>
++++++						                              <field name="read"><string>true</string></field>                
++++++						                              <field name="addNode"><string>true</string></field>                
++++++						                              <field name="setProperty"><string>true</string></field>                
++++++						                              <field name="remove"><string>true</string></field>                
++++++		                           				</object>  
++++++		                        			</value>     
++++++											<value>                            
++++++		                           				<object type="org.exoplatform.services.jcr.ext.hierarchy.impl.HierarchyConfig$Permission">
++++++						                              <field name="identity"><string>any</string></field>
++++++						                              <field name="read"><string>true</string></field>                
++++++						                              <field name="addNode"><string>false</string></field>                
++++++						                              <field name="setProperty"><string>true</string></field>                
++++++						                              <field name="remove"><string>false</string></field>                
++++++		                           				</object>  
++++++		                        			</value>                   
++++++		                      			</collection>
++++++		                    		</field>                                   
++++++	                  			</object>
++++++	                  		</value>
++++++	                  		<value>
++++++	                  			<object type="org.exoplatform.services.jcr.ext.hierarchy.impl.HierarchyConfig$JcrPath">                   
++++++		                     		<field  name="alias"><string>book</string></field>
++++++		                     		<field  name="path"><string>/exostore:bookstore/exostore:book</string></field>                                          
++++++		                     		<field name="permissions">
++++++		                       			<collection type="java.util.ArrayList">               
++++++		                         			<value>                            
++++++		                           				<object type="org.exoplatform.services.jcr.ext.hierarchy.impl.HierarchyConfig$Permission">
++++++													  <field name="identity"><string>*:/platform/administrators</string></field>
++++++						                              <field name="read"><string>true</string></field>                
++++++						                              <field name="addNode"><string>true</string></field>                
++++++						                              <field name="setProperty"><string>true</string></field>                
++++++						                              <field name="remove"><string>true</string></field>                
++++++		                           				</object>  
++++++		                        			</value>     
++++++											<value>                            
++++++		                           				<object type="org.exoplatform.services.jcr.ext.hierarchy.impl.HierarchyConfig$Permission">
++++++						                              <field name="identity"><string>any</string></field>
++++++						                              <field name="read"><string>true</string></field>                
++++++						                              <field name="addNode"><string>false</string></field>                
++++++						                              <field name="setProperty"><string>true</string></field>                
++++++						                              <field name="remove"><string>false</string></field>                
++++++		                           				</object>  
++++++		                        			</value>                   
++++++		                      			</collection>
++++++		                    		</field>                                   
++++++	                  			</object>
++++++	                  		</value>
++++++	                  		<value>
++++++	                  			<object type="org.exoplatform.services.jcr.ext.hierarchy.impl.HierarchyConfig$JcrPath">                   
++++++		                     		<field  name="alias"><string>author</string></field>
++++++		                     		<field  name="path"><string>/exostore:bookstore/exostore:author</string></field>                                          
++++++		                     		<field name="permissions">
++++++		                       			<collection type="java.util.ArrayList">               
++++++		                         			<value>                            
++++++		                           				<object type="org.exoplatform.services.jcr.ext.hierarchy.impl.HierarchyConfig$Permission">
++++++													  <field name="identity"><string>*:/platform/administrators</string></field>
++++++						                              <field name="read"><string>true</string></field>                
++++++						                              <field name="addNode"><string>true</string></field>                
++++++						                              <field name="setProperty"><string>true</string></field>                
++++++						                              <field name="remove"><string>true</string></field>                
++++++		                           				</object>  
++++++		                        			</value>     
++++++											<value>                            
++++++		                           				<object type="org.exoplatform.services.jcr.ext.hierarchy.impl.HierarchyConfig$Permission">
++++++						                              <field name="identity"><string>any</string></field>
++++++						                              <field name="read"><string>true</string></field>                
++++++						                              <field name="addNode"><string>false</string></field>                
++++++						                              <field name="setProperty"><string>true</string></field>                
++++++						                              <field name="remove"><string>false</string></field>                
++++++		                           				</object>  
++++++		                        			</value>                   
++++++		                      			</collection>
++++++		                    		</field>                                   
++++++	                  			</object>
++++++	                		</value>
++++++	             	</collection>  
++++++	            </field>
++++++        	</object>
++++++        </object-param>
++++++      </init-params>            
++++++    </component-plugin>
++++++  </external-component-plugins>
++++++</configuration>
+++++diff --git a/target/classes/conf/portal/jcr-configuration.xml b/target/classes/conf/portal/jcr-configuration.xml
+++++new file mode 100644
+++++index 0000000..4c69fdd
+++++--- /dev/null
++++++++ b/target/classes/conf/portal/jcr-configuration.xml
+++++@@ -0,0 +1,25 @@
++++++<?xml version="1.0" encoding="ISO-8859-1"?>
++++++<configuration
++++++  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
++++++  xsi:schemaLocation="http://www.exoplaform.org/xml/ns/kernel_1_0.xsd http://www.exoplaform.org/xml/ns/kernel_1_0.xsd"
++++++  xmlns="http://www.exoplaform.org/xml/ns/kernel_1_0.xsd">
++++++  <external-component-plugins>
++++++    <!-- The full qualified name of the RepositoryServiceConfiguration -->
++++++    <target-component>org.exoplatform.services.jcr.config.RepositoryServiceConfiguration</target-component>
++++++    <component-plugin>
++++++      <!-- The name of the plugin -->
++++++      <name>Sample RepositoryServiceConfiguration Plugin</name>
++++++      <!-- The name of the method to call on the RepositoryServiceConfiguration in order to add the RepositoryServiceConfigurations -->
++++++      <set-method>addConfig</set-method>
++++++      <!-- The full qualified name of the RepositoryServiceConfigurationPlugin -->
++++++      <type>org.exoplatform.services.jcr.impl.config.RepositoryServiceConfigurationPlugin</type>
++++++      <init-params>
++++++        <value-param>
++++++          <name>conf-path</name>
++++++          <description>JCR configuration file</description>
++++++          <value>jar:/conf/portal/repository-configuration.xml</value>
++++++        </value-param>
++++++      </init-params>
++++++    </component-plugin>
++++++  </external-component-plugins>
++++++</configuration>
+++++diff --git a/target/classes/conf/portal/jcr-nodetypes-configuration.xml b/target/classes/conf/portal/jcr-nodetypes-configuration.xml
+++++new file mode 100644
+++++index 0000000..41a267c
+++++--- /dev/null
++++++++ b/target/classes/conf/portal/jcr-nodetypes-configuration.xml
+++++@@ -0,0 +1,30 @@
++++++<?xml version="1.0" encoding="ISO-8859-1"?>
++++++<configuration xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.exoplaform.org/xml/ns/kernel_1_0.xsd http://www.exoplaform.org/xml/ns/kernel_1_0.xsd"
++++++  xmlns="http://www.exoplaform.org/xml/ns/kernel_1_0.xsd">
++++++  <external-component-plugins>
++++++    <target-component>org.exoplatform.services.jcr.RepositoryService</target-component>  
++++++    <component-plugin>
++++++          <name>add.namespaces</name>
++++++          <set-method>addPlugin</set-method>
++++++          <type>org.exoplatform.services.jcr.impl.AddNamespacesPlugin</type>
++++++          <init-params>
++++++            <properties-param>
++++++              <name>namespaces</name>
++++++              <property name="exostore" value="http://www.exoplatform.org/bookstore/1.0"/>
++++++            </properties-param>
++++++          </init-params>
++++++      </component-plugin>    
++++++    <component-plugin> 
++++++      <name>add.cs.nodeType</name>
++++++      <set-method>addPlugin</set-method>
++++++      <type>org.exoplatform.services.jcr.impl.AddNodeTypePlugin</type>
++++++      <init-params>
++++++        <values-param>
++++++          <name>autoCreatedInNewRepository</name>
++++++          <description>Node types configuration file</description>
++++++          <value>jar:/conf/portal/nodetypes.xml</value>
++++++        </values-param>
++++++      </init-params>
++++++    </component-plugin>
++++++  </external-component-plugins>  
++++++</configuration>
+++++diff --git a/target/classes/conf/portal/nodetypes.xml b/target/classes/conf/portal/nodetypes.xml
+++++new file mode 100644
+++++index 0000000..6f40180
+++++--- /dev/null
++++++++ b/target/classes/conf/portal/nodetypes.xml
+++++@@ -0,0 +1,44 @@
++++++<?xml version="1.0" encoding="ISO-8859-1"?>
++++++<nodeTypes xmlns:nt="http://www.jcp.org/jcr/nt/1.0" xmlns:mix="http://www.jcp.org/jcr/mix/1.0" xmlns:jcr="http://www.jcp.org/jcr/1.0">
++++++    
++++++	<nodeType name="exostore:book" isMixin="false" hasOrderableChildNodes="false" primaryItemName="">
++++++		<supertypes>
++++++			<supertype>nt:base</supertype>
++++++		</supertypes>
++++++		<propertyDefinitions>
++++++			<propertyDefinition name="exostore:bookname" requiredType="String" autoCreated="false" mandatory="false" 
++++++						onParentVersion="COPY" protected="false" multiple="false">
++++++				<valueConstraints/>
++++++			</propertyDefinition>
++++++			<propertyDefinition name="exostore:bookcategory" requiredType="String" autoCreated="false" mandatory="false" 
++++++						onParentVersion="COPY" protected="false" multiple="false">
++++++				<valueConstraints/>
++++++			</propertyDefinition>
++++++			<propertyDefinition name="exostore:bookcontent" requiredType="String" autoCreated="false" mandatory="false" 
++++++						onParentVersion="COPY" protected="false" multiple="false">
++++++				<valueConstraints/>
++++++			</propertyDefinition>
++++++		</propertyDefinitions>
++++++	</nodeType>
++++++	
++++++	<nodeType name="exostore:author" isMixin="false" hasOrderableChildNodes="false" primaryItemName="">
++++++		<supertypes>
++++++			<supertype>nt:base</supertype>
++++++		</supertypes>
++++++		<propertyDefinitions>
++++++			<propertyDefinition name="exostore:authorname" requiredType="String" autoCreated="false" mandatory="false" 
++++++						onParentVersion="COPY" protected="false" multiple="false">
++++++				<valueConstraints/>
++++++			</propertyDefinition>
++++++			<propertyDefinition name="exostore:authoraddress" requiredType="String" autoCreated="false" mandatory="false" 
++++++						onParentVersion="COPY" protected="false" multiple="false">
++++++				<valueConstraints/>
++++++			</propertyDefinition>
++++++			<propertyDefinition name="exostore:authorphone" requiredType="String" autoCreated="false" mandatory="false" 
++++++						onParentVersion="COPY" protected="false" multiple="false">
++++++				<valueConstraints/>
++++++			</propertyDefinition>
++++++		</propertyDefinitions>
++++++	</nodeType>
++++++	
++++++</nodeTypes>
+++++\ No newline at end of file
+++++diff --git a/target/classes/conf/portal/repository-configuration.xml b/target/classes/conf/portal/repository-configuration.xml
+++++new file mode 100644
+++++index 0000000..6183884
+++++--- /dev/null
++++++++ b/target/classes/conf/portal/repository-configuration.xml
+++++@@ -0,0 +1,78 @@
++++++<repository-service default-repository="${gatein.jcr.repository.default}">
++++++  <repositories>
++++++    <repository name="${gatein.jcr.repository.default}" system-workspace="${gatein.jcr.workspace.system}" default-workspace="${gatein.jcr.workspace.default}">
++++++      <security-domain>gatein-domain</security-domain>
++++++      <access-control>optional</access-control>
++++++      <authentication-policy>org.exoplatform.services.jcr.impl.core.access.JAASAuthenticator</authentication-policy>
++++++      <workspaces>
++++++        <workspace name="bookstore">
++++++          <container class="org.exoplatform.services.jcr.impl.storage.jdbc.optimisation.CQJDBCWorkspaceDataContainer">
++++++            <properties>
++++++              <property name="source-name" value="${gatein.jcr.datasource.name}${container.name.suffix}"/>
++++++              <property name="dialect" value="${gatein.jcr.datasource.dialect}"/>
++++++              <property name="multi-db" value="false"/>
++++++              <property name="update-storage" value="true"/>
++++++              <property name="max-buffer-size" value="200k"/>
++++++              <property name="swap-directory" value="${gatein.jcr.data.dir}/swap/bookstore${container.name.suffix}"/>
++++++            </properties>
++++++            <value-storages>
++++++              <value-storage id="bookstore" class="org.exoplatform.services.jcr.impl.storage.value.fs.TreeFileValueStorage">
++++++                <properties>
++++++                  <property name="path" value="${gatein.jcr.storage.data.dir}/bookstore${container.name.suffix}"/>
++++++                </properties>
++++++                <filters>
++++++                  <filter property-type="Binary"/>
++++++                </filters>
++++++              </value-storage>
++++++            </value-storages>
++++++          </container>
++++++          <initializer class="org.exoplatform.services.jcr.impl.core.ScratchWorkspaceInitializer">
++++++            <properties>
++++++              <property name="root-nodetype" value="nt:unstructured"/>
++++++              <property name="root-permissions" value="any read;*:/platform/administrators read;*:/platform/administrators add_node;*:/platform/administrators set_property;*:/platform/administrators remove"/>
++++++            </properties>
++++++          </initializer>
++++++          <cache enabled="true" class="org.exoplatform.services.jcr.impl.dataflow.persistent.jbosscache.JBossCacheWorkspaceStorageCache">
++++++            <properties>
++++++              <property name="jbosscache-configuration" value="${gatein.jcr.cache.config}" />
++++++              <property name="jgroups-configuration" value="${gatein.jcr.jgroups.config}" />
++++++              <property name="jbosscache-cluster-name" value="jcr-cache${container.name.suffix}" />
++++++              <property name="jbosscache-shareable" value="true" />
++++++              <property name="jbosscache-expiration-time" value="${gatein.jcr.cache.expiration.time}" />
++++++            </properties>
++++++          </cache>
++++++          <query-handler class="org.exoplatform.services.jcr.impl.core.query.lucene.SearchIndex">
++++++            <properties>
++++++              <property name="index-dir" value="${gatein.jcr.index.data.dir}/bookstore${container.name.suffix}"/>
++++++              <property name="changesfilter-class" value="${gatein.jcr.index.changefilterclass}" />
++++++              <property name="jbosscache-configuration" value="${gatein.jcr.index.cache.config}" />
++++++              <property name="jgroups-configuration" value="${gatein.jcr.jgroups.config}" />
++++++              <property name="jbosscache-cluster-name" value="jcr-indexer${container.name.suffix}" />
++++++              <property name="jbosscache-shareable" value="true" />
++++++              <property name="max-volatile-time" value="60" />
++++++            </properties>
++++++          </query-handler>
++++++          
++++++          <lock-manager class="org.exoplatform.services.jcr.impl.core.lock.jbosscache.CacheableLockManagerImpl">
++++++            <properties>
++++++              <property name="time-out" value="15m" />
++++++              <property name="jbosscache-configuration" value="${gatein.jcr.lock.cache.config}" />
++++++              <property name="jgroups-configuration" value="${gatein.jcr.jgroups.config}" />
++++++              <property name="jbosscache-cluster-name" value="jcr-lock${container.name.suffix}" />
++++++              <property name="jbosscache-shareable" value="true" />
++++++              <property name="jbosscache-cl-cache.jdbc.table.name" value="jcrlocks" />
++++++              <property name="jbosscache-cl-cache.jdbc.table.create" value="true" />
++++++              <property name="jbosscache-cl-cache.jdbc.table.drop" value="false" />
++++++              <property name="jbosscache-cl-cache.jdbc.table.primarykey" value="pk" />
++++++              <property name="jbosscache-cl-cache.jdbc.fqn.column" value="fqn" />
++++++              <property name="jbosscache-cl-cache.jdbc.node.column" value="node" />
++++++              <property name="jbosscache-cl-cache.jdbc.parent.column" value="parent" />
++++++              <property name="jbosscache-cl-cache.jdbc.datasource" value="${gatein.jcr.datasource.name}${container.name.suffix}" />
++++++            </properties>
++++++          </lock-manager>
++++++
++++++        </workspace>
++++++      </workspaces>
++++++    </repository>
++++++  </repositories>
++++++</repository-service>
+++++diff --git a/target/classes/exoplatform/BookNodeTypes.class b/target/classes/exoplatform/BookNodeTypes.class
+++++new file mode 100644
+++++index 0000000..97e72a8
+++++Binary files /dev/null and b/target/classes/exoplatform/BookNodeTypes.class differ
+++++diff --git a/target/classes/exoplatform/BookStoreService.class b/target/classes/exoplatform/BookStoreService.class
+++++new file mode 100644
+++++index 0000000..04e4b93
+++++Binary files /dev/null and b/target/classes/exoplatform/BookStoreService.class differ
+++++diff --git a/target/classes/exoplatform/JCRDataStorage.class b/target/classes/exoplatform/JCRDataStorage.class
+++++new file mode 100644
+++++index 0000000..879d1a5
+++++Binary files /dev/null and b/target/classes/exoplatform/JCRDataStorage.class differ
+++++diff --git a/target/classes/exoplatform/entity/Author.class b/target/classes/exoplatform/entity/Author.class
+++++new file mode 100644
+++++index 0000000..228c835
+++++Binary files /dev/null and b/target/classes/exoplatform/entity/Author.class differ
+++++diff --git a/target/classes/exoplatform/entity/Book$CATEGORY.class b/target/classes/exoplatform/entity/Book$CATEGORY.class
+++++new file mode 100644
+++++index 0000000..d1d2df1
+++++Binary files /dev/null and b/target/classes/exoplatform/entity/Book$CATEGORY.class differ
+++++diff --git a/target/classes/exoplatform/entity/Book.class b/target/classes/exoplatform/entity/Book.class
+++++new file mode 100644
+++++index 0000000..405876d
+++++Binary files /dev/null and b/target/classes/exoplatform/entity/Book.class differ
+++++diff --git a/target/classes/exoplatform/exception/BookNotFoundException.class b/target/classes/exoplatform/exception/BookNotFoundException.class
+++++new file mode 100644
+++++index 0000000..7734ac4
+++++Binary files /dev/null and b/target/classes/exoplatform/exception/BookNotFoundException.class differ
+++++diff --git a/target/classes/exoplatform/exception/DuplicateBookException.class b/target/classes/exoplatform/exception/DuplicateBookException.class
+++++new file mode 100644
+++++index 0000000..a3a5435
+++++Binary files /dev/null and b/target/classes/exoplatform/exception/DuplicateBookException.class differ
+++++diff --git a/target/classes/exoplatform/utils/PropertyReader.class b/target/classes/exoplatform/utils/PropertyReader.class
+++++new file mode 100644
+++++index 0000000..0aaf2d2
+++++Binary files /dev/null and b/target/classes/exoplatform/utils/PropertyReader.class differ
+++++diff --git a/target/classes/exoplatform/utils/Utils.class b/target/classes/exoplatform/utils/Utils.class
+++++new file mode 100644
+++++index 0000000..1ebaaf7
+++++Binary files /dev/null and b/target/classes/exoplatform/utils/Utils.class differ
+++++diff --git a/target/jcr-exo-1.0-SNAPSHOT.jar b/target/jcr-exo-1.0-SNAPSHOT.jar
+++++new file mode 100644
+++++index 0000000..4da898f
+++++Binary files /dev/null and b/target/jcr-exo-1.0-SNAPSHOT.jar differ
+++++diff --git a/target/maven-archiver/pom.properties b/target/maven-archiver/pom.properties
+++++new file mode 100644
+++++index 0000000..9c401b4
+++++--- /dev/null
++++++++ b/target/maven-archiver/pom.properties
+++++@@ -0,0 +1,5 @@
++++++#Generated by Maven
++++++#Fri Jul 13 14:57:28 ICT 2012
++++++version=1.0-SNAPSHOT
++++++groupId=exoplatform
++++++artifactId=jcr-exo
+++++diff --git a/target/surefire-reports/TEST-exoplatform.AppTest.xml b/target/surefire-reports/TEST-exoplatform.AppTest.xml
+++++new file mode 100644
+++++index 0000000..f731d34
+++++--- /dev/null
++++++++ b/target/surefire-reports/TEST-exoplatform.AppTest.xml
+++++@@ -0,0 +1,62 @@
++++++<?xml version="1.0" encoding="UTF-8" ?>
++++++<testsuite failures="0" time="0.013" errors="0" skipped="0" tests="1" name="exoplatform.AppTest">
++++++  <properties>
++++++    <property name="java.runtime.name" value="Java(TM) SE Runtime Environment"/>
++++++    <property name="sun.boot.library.path" value="/home/binhnv/java/jdk1.6/jre/lib/amd64"/>
++++++    <property name="java.vm.version" value="20.2-b06"/>
++++++    <property name="java.vm.vendor" value="Sun Microsystems Inc."/>
++++++    <property name="java.vendor.url" value="http://java.sun.com/"/>
++++++    <property name="path.separator" value=":"/>
++++++    <property name="guice.disable.misplaced.annotation.check" value="true"/>
++++++    <property name="java.vm.name" value="Java HotSpot(TM) 64-Bit Server VM"/>
++++++    <property name="file.encoding.pkg" value="sun.io"/>
++++++    <property name="user.country" value="US"/>
++++++    <property name="sun.java.launcher" value="SUN_STANDARD"/>
++++++    <property name="sun.os.patch.level" value="unknown"/>
++++++    <property name="java.vm.specification.name" value="Java Virtual Machine Specification"/>
++++++    <property name="user.dir" value="/home/binhnv/java/jcr-exo"/>
++++++    <property name="java.runtime.version" value="1.6.0_27-b07"/>
++++++    <property name="java.awt.graphicsenv" value="sun.awt.X11GraphicsEnvironment"/>
++++++    <property name="java.endorsed.dirs" value="/home/binhnv/java/jdk1.6/jre/lib/endorsed"/>
++++++    <property name="os.arch" value="amd64"/>
++++++    <property name="java.io.tmpdir" value="/tmp"/>
++++++    <property name="line.separator" value="
++++++"/>
++++++    <property name="java.vm.specification.vendor" value="Sun Microsystems Inc."/>
++++++    <property name="os.name" value="Linux"/>
++++++    <property name="classworlds.conf" value="/home/binhnv/java/apache-maven-3.0.4/bin/m2.conf"/>
++++++    <property name="sun.jnu.encoding" value="UTF-8"/>
++++++    <property name="java.library.path" value="/home/binhnv/java/jdk1.6/jre/lib/amd64/server:/home/binhnv/java/jdk1.6/jre/lib/amd64:/home/binhnv/java/jdk1.6/jre/../lib/amd64:/usr/java/packages/lib/amd64:/usr/lib64:/lib64:/lib:/usr/lib"/>
++++++    <property name="java.specification.name" value="Java Platform API Specification"/>
++++++    <property name="java.class.version" value="50.0"/>
++++++    <property name="sun.management.compiler" value="HotSpot 64-Bit Tiered Compilers"/>
++++++    <property name="os.version" value="3.2.0-23-generic"/>
++++++    <property name="user.home" value="/home/binhnv"/>
++++++    <property name="user.timezone" value="Asia/Ho_Chi_Minh"/>
++++++    <property name="java.awt.printerjob" value="sun.print.PSPrinterJob"/>
++++++    <property name="file.encoding" value="UTF-8"/>
++++++    <property name="java.specification.version" value="1.6"/>
++++++    <property name="user.name" value="binhnv"/>
++++++    <property name="java.class.path" value="/home/binhnv/java/apache-maven-3.0.4/boot/plexus-classworlds-2.4.jar"/>
++++++    <property name="java.vm.specification.version" value="1.0"/>
++++++    <property name="sun.arch.data.model" value="64"/>
++++++    <property name="java.home" value="/home/binhnv/java/jdk1.6/jre"/>
++++++    <property name="sun.java.command" value="org.codehaus.plexus.classworlds.launcher.Launcher clean install"/>
++++++    <property name="java.specification.vendor" value="Sun Microsystems Inc."/>
++++++    <property name="user.language" value="en"/>
++++++    <property name="java.vm.info" value="mixed mode"/>
++++++    <property name="java.version" value="1.6.0_27"/>
++++++    <property name="java.ext.dirs" value="/home/binhnv/java/jdk1.6/jre/lib/ext:/usr/java/packages/lib/ext"/>
++++++    <property name="securerandom.source" value="file:/dev/./urandom"/>
++++++    <property name="sun.boot.class.path" value="/home/binhnv/java/jdk1.6/jre/lib/resources.jar:/home/binhnv/java/jdk1.6/jre/lib/rt.jar:/home/binhnv/java/jdk1.6/jre/lib/sunrsasign.jar:/home/binhnv/java/jdk1.6/jre/lib/jsse.jar:/home/binhnv/java/jdk1.6/jre/lib/jce.jar:/home/binhnv/java/jdk1.6/jre/lib/charsets.jar:/home/binhnv/java/jdk1.6/jre/lib/modules/jdk.boot.jar:/home/binhnv/java/jdk1.6/jre/classes"/>
++++++    <property name="java.vendor" value="Sun Microsystems Inc."/>
++++++    <property name="maven.home" value="/home/binhnv/java/apache-maven-3.0.4"/>
++++++    <property name="file.separator" value="/"/>
++++++    <property name="java.vendor.url.bug" value="http://java.sun.com/cgi-bin/bugreport.cgi"/>
++++++    <property name="sun.cpu.endian" value="little"/>
++++++    <property name="sun.io.unicode.encoding" value="UnicodeLittle"/>
++++++    <property name="sun.desktop" value="gnome"/>
++++++    <property name="sun.cpu.isalist" value=""/>
++++++  </properties>
++++++  <testcase time="0.002" classname="exoplatform.AppTest" name="testApp"/>
++++++</testsuite>
+++++\ No newline at end of file
+++++diff --git a/target/surefire-reports/exoplatform.AppTest.txt b/target/surefire-reports/exoplatform.AppTest.txt
+++++new file mode 100644
+++++index 0000000..87ea500
+++++--- /dev/null
++++++++ b/target/surefire-reports/exoplatform.AppTest.txt
+++++@@ -0,0 +1,4 @@
++++++-------------------------------------------------------------------------------
++++++Test set: exoplatform.AppTest
++++++-------------------------------------------------------------------------------
++++++Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.013 sec
+++++diff --git a/target/test-classes/exoplatform/AppTest.class b/target/test-classes/exoplatform/AppTest.class
+++++new file mode 100644
+++++index 0000000..5788b9e
+++++Binary files /dev/null and b/target/test-classes/exoplatform/AppTest.class differ
++++diff --git a/src/main/java/exoplatform/BookNodeTypes.java b/src/main/java/exoplatform/BookNodeTypes.java
++++index 058d142..e3cf21f 100644
++++--- a/src/main/java/exoplatform/BookNodeTypes.java
+++++++ b/src/main/java/exoplatform/BookNodeTypes.java
++++@@ -44,4 +44,17 @@ public interface BookNodeTypes {
++++   /* exostore:authorphone is a property of exostore:author */
++++   public static final String EXO_AUTHOR_PHONE = "exostore:authorphone";
++++   
+++++  /* define parent node of user */
+++++  public static final String EXO_USER = "exostore:user";
+++++  /* exostore:username is a property of exostore:user */
+++++  public static final String EXO_USER_NAME = "exostore:username";
+++++  /* exostore:password is a property of exostore:user */
+++++  public static final String EXO_USER_PASSWORD = "exostore:password";
+++++  /* exostore:fullname is a property of exostore:user */
+++++  public static final String EXO_USER_FULLNAME = "exostore:fullname";
+++++  /* exostore:useraddress is a property of exostore:user */
+++++  public static final String EXO_USER_ADDRESS = "exostore:useraddress";
+++++  /* exostore:userphone is a property of exostore:user */
+++++  public static final String EXO_USER_PHONE = "exostore:userphone";
+++++  
++++ }
++++diff --git a/src/main/java/exoplatform/BookStoreService.java b/src/main/java/exoplatform/BookStoreService.java
++++index 0b117f7..c132cd9 100644
++++--- a/src/main/java/exoplatform/BookStoreService.java
+++++++ b/src/main/java/exoplatform/BookStoreService.java
++++@@ -17,10 +17,12 @@
++++ package exoplatform;
++++ 
++++ import java.io.Serializable;
+++++import java.util.ArrayList;
++++ import java.util.List;
++++ 
++++ import javax.jcr.Node;
++++ import javax.jcr.RepositoryException;
+++++import javax.jcr.Value;
++++ 
++++ import org.exoplatform.services.cache.CacheService;
++++ import org.exoplatform.services.cache.ExoCache;
++++@@ -32,6 +34,7 @@ import org.picocontainer.Startable;
++++ import exoplatform.entity.Author;
++++ import exoplatform.entity.Book;
++++ import exoplatform.entity.Book.CATEGORY;
+++++import exoplatform.entity.User;
++++ import exoplatform.exception.DuplicateBookException;
++++ 
++++ /**
++++@@ -73,9 +76,15 @@ public class BookStoreService implements Startable {
++++ //    List<Book> books = new ArrayList<Book>(); 
++++     try {
++++       Node authorNode = addAuthor("Conan Doyle", "England", "123456789");
++++-      addBook("The Mask", CATEGORY.NOVEL, "Test", authorNode);
+++++      Node bookNode = addBook("The Mask", CATEGORY.NOVEL, "Test", authorNode.getPath());
+++++      Node bookNode1 = addBook("The Sign of the four", CATEGORY.NOVEL, "Test", authorNode.getPath());
+++++      List<String> nodes = new ArrayList<String>();
+++++      nodes.add(bookNode.getPath());
+++++      nodes.add(bookNode1.getPath());
+++++      Node userNode = addUser("binhnv", "12345", "Nguyen Vinh Binh", "Hanoi", "123456789", nodes);
++++     } catch (DuplicateBookException e) {
++++-      // TODO Auto-generated catch block
+++++      e.printStackTrace();
+++++    } catch (RepositoryException e) {
++++       e.printStackTrace();
++++     }
++++ //    addMultiBook();
++++@@ -109,9 +118,9 @@ public class BookStoreService implements Startable {
++++    * @return
++++    * @throws DuplicateBookException
++++    */
++++-  public Book addBook(String bookName, CATEGORY category, String content, Node node) throws DuplicateBookException {
+++++  public Node addBook(String bookName, CATEGORY category, String content, String nodePath) throws DuplicateBookException {
++++     Book book = new Book(bookName, category, content);
++++-    return jcrDataStorage.addBook(book, node);
+++++    return jcrDataStorage.addBook(book, nodePath);
++++   }
++++   
++++   /**
++++@@ -126,6 +135,11 @@ public class BookStoreService implements Startable {
++++     return jcrDataStorage.addAuthor(author);
++++   }
++++   
+++++  public Node addUser(String username, String password, String fullname, String address, String phone, List<String> nodes) {
+++++    User user = new User(username, password, fullname, address, phone);
+++++    return jcrDataStorage.addUser(user, nodes);
+++++  }
+++++  
++++   /**
++++    * This function support for add multi book to datastorage
++++    */
++++diff --git a/src/main/java/exoplatform/JCRDataStorage.java b/src/main/java/exoplatform/JCRDataStorage.java
++++index e7fba58..d7ba3f1 100644
++++--- a/src/main/java/exoplatform/JCRDataStorage.java
+++++++ b/src/main/java/exoplatform/JCRDataStorage.java
++++@@ -24,6 +24,7 @@ import javax.jcr.NodeIterator;
++++ import javax.jcr.PathNotFoundException;
++++ import javax.jcr.RepositoryException;
++++ import javax.jcr.Session;
+++++import javax.jcr.Value;
++++ import javax.jcr.query.Query;
++++ import javax.jcr.query.QueryManager;
++++ import javax.jcr.query.QueryResult;
++++@@ -38,6 +39,7 @@ import org.exoplatform.services.log.Log;
++++ 
++++ import exoplatform.entity.Author;
++++ import exoplatform.entity.Book;
+++++import exoplatform.entity.User;
++++ import exoplatform.exception.BookNotFoundException;
++++ import exoplatform.exception.DuplicateBookException;
++++ import exoplatform.utils.PropertyReader;
++++@@ -57,6 +59,8 @@ public class JCRDataStorage {
++++   public static final String DEFAULT_PARENT_PATH = "/exostore:bookstore";
++++   public static final String DEFAULT_PARENT_BOOK_PATH = "/exostore:book";
++++   public static final String DEFAULT_PARENT_AUTHOR_PATH = "/exostore:author";
+++++  public static final String DEFAULT_PARENT_USER_PATH = "/exostore:user";
+++++  public static final String DEFAULT_PARENT_BOOK_USER_PATH = "/exostore:bookuser";
++++   public static final String DEFAULT_WORKSPACE_NAME = "bookstore";
++++   /* Define a RepositoryService which support integrate with repository */
++++   private RepositoryService repoService;
++++@@ -147,27 +151,29 @@ public class JCRDataStorage {
++++    * @return Book
++++    * @throws DuplicateBookException
++++    */
++++-  public Book addBook(Book book, Node node) throws DuplicateBookException {
+++++  public Node addBook(Book book, String nodePath) throws DuplicateBookException {
++++     SessionProvider sProvider = SessionProvider.createSystemProvider();
+++++    
++++     /* Check exist of book */
++++     if (isExistBookName(book.getName(), sProvider)) {
++++       throw new DuplicateBookException(String.format("Book %s is existed", book.getName()));
++++     }
++++     
++++     /* get id and set to new book */
++++-    book.setId(Utils.bookId++);
+++++    book.setBookId(Utils.bookId++);
++++     
++++     try {
++++       /* execute set data to node and save to workspace */
++++       Node parentNode = getNodeByPath(DEFAULT_PARENT_PATH + DEFAULT_PARENT_BOOK_PATH, sProvider);
++++-      Node bookNode = parentNode.addNode("" + book.getId(), BookNodeTypes.EXO_BOOK);
+++++      Node bookNode = parentNode.addNode("" + book.getBookId(), BookNodeTypes.EXO_BOOK);
++++       bookNode.setProperty(BookNodeTypes.EXO_BOOK_NAME, book.getName());
++++       bookNode.setProperty(BookNodeTypes.EXO_BOOK_CATEGORY, Utils.bookCategoryEnumToString(book.getCategory()));
++++       bookNode.setProperty(BookNodeTypes.EXO_BOOK_CONTENT, book.getContent());
++++-      bookNode.setProperty(BookNodeTypes.EXO_BOOK_AUTHOR, node);
+++++      bookNode.setProperty(BookNodeTypes.EXO_BOOK_AUTHOR, getNodeByPath(nodePath, sProvider));
++++       parentNode.getSession().save();
++++-      return book;
+++++      return bookNode;
++++     } catch (PathNotFoundException e) {
+++++      log.error("Path not found", e);
++++       return null;
++++     } catch (RepositoryException e) {
++++       log.error("Failed to add book", e);
++++@@ -179,10 +185,10 @@ public class JCRDataStorage {
++++   
++++   public Node addAuthor(Author author) {
++++     SessionProvider sProvider = SessionProvider.createSystemProvider();
++++-    author.setId(Utils.authorId++);
+++++    author.setAuthorId(Utils.authorId++);
++++     try {
++++       Node parentNode = getNodeByPath(DEFAULT_PARENT_PATH + DEFAULT_PARENT_AUTHOR_PATH, sProvider);
++++-      Node authorNode = parentNode.addNode("" + author.getId(), BookNodeTypes.EXO_AUTHOR);
+++++      Node authorNode = parentNode.addNode("" + author.getAuthorId(), BookNodeTypes.EXO_AUTHOR);
++++       authorNode.setProperty(BookNodeTypes.EXO_AUTHOR_NAME, author.getName());
++++       authorNode.setProperty(BookNodeTypes.EXO_AUTHOR_ADDRESS, author.getAddress());
++++       authorNode.setProperty(BookNodeTypes.EXO_AUTHOR_PHONE, author.getPhone());
++++@@ -196,6 +202,33 @@ public class JCRDataStorage {
++++     }
++++   }
++++   
+++++  public Node addUser(User user, List<String> nodes) {
+++++    SessionProvider sProvider = SessionProvider.createSystemProvider();
+++++    user.setUserId(Utils.userId++);
+++++    try {
+++++      Node parentNode = getNodeByPath(DEFAULT_PARENT_PATH + DEFAULT_PARENT_USER_PATH, sProvider);
+++++      Node userNode = parentNode.addNode("" + user.getUserId(), BookNodeTypes.EXO_USER);
+++++      userNode.setProperty(BookNodeTypes.EXO_USER_NAME, user.getUsername());
+++++      userNode.setProperty(BookNodeTypes.EXO_USER_PASSWORD, user.getPassword());
+++++      userNode.setProperty(BookNodeTypes.EXO_USER_FULLNAME, user.getFullname());
+++++      userNode.setProperty(BookNodeTypes.EXO_USER_ADDRESS, user.getAddress());
+++++      userNode.setProperty(BookNodeTypes.EXO_USER_PHONE, user.getPhone());
+++++      List<Value> values = new ArrayList<Value>();
+++++      for (String string : nodes) {
+++++        Value val = parentNode.getSession().getValueFactory().createValue(getNodeByPath(string, sProvider));
+++++        values.add(val);
+++++      }
+++++      userNode.setProperty(BookNodeTypes.EXO_BOOK, values.toArray(new Value[values.size()]));
+++++      parentNode.getSession().save();
+++++      return userNode;
+++++    } catch (RepositoryException re) {
+++++      log.error("Failed to add user", re);
+++++      return null;
+++++    } finally {
+++++      sProvider.close();
+++++    }
+++++  }
+++++  
++++   /**
++++    * The function support delete a book by book id
++++    * 
++++@@ -245,14 +278,14 @@ public class JCRDataStorage {
++++     SessionProvider sProvider = SessionProvider.createSystemProvider();
++++     try {
++++       /* execute modify data and set to workspace */
++++-      Node node = getNodeByPath(DEFAULT_PARENT_PATH + "/" + book.getId(), sProvider);
+++++      Node node = getNodeByPath(DEFAULT_PARENT_PATH + "/" + book.getBookId(), sProvider);
++++       node.setProperty(BookNodeTypes.EXO_BOOK_NAME, book.getName());
++++       node.setProperty(BookNodeTypes.EXO_BOOK_CONTENT, book.getContent());
++++       node.setProperty(BookNodeTypes.EXO_BOOK_CATEGORY, Utils.bookCategoryEnumToString(book.getCategory()));
++++       node.getSession().save();
++++     } catch (RepositoryException re) {
++++-      log.error(String.format("Book %s is not found", book.getId()), re);
++++-      throw new BookNotFoundException(String.format("Book %s is not found", book.getId()));
+++++      log.error(String.format("Book %s is not found", book.getBookId()), re);
+++++      throw new BookNotFoundException(String.format("Book %s is not found", book.getBookId()));
++++     } finally {
++++       sProvider.close();
++++     }
++++@@ -514,7 +547,7 @@ public class JCRDataStorage {
++++     if (node != null) {
++++       Book book = new Book();
++++       try {
++++-        book.setId(Integer.valueOf(node.getName()));
+++++        book.setBookId(Integer.valueOf(node.getName()));
++++       } catch (Exception e) {
++++         return null;
++++       }
++++diff --git a/src/main/java/exoplatform/entity/Author.java b/src/main/java/exoplatform/entity/Author.java
++++index 06c5a07..e44dcd2 100644
++++--- a/src/main/java/exoplatform/entity/Author.java
+++++++ b/src/main/java/exoplatform/entity/Author.java
++++@@ -24,7 +24,7 @@ package exoplatform.entity;
++++  */
++++ public class Author {
++++ 
++++-  private int id;
+++++  private int authorId;
++++   private String name;
++++   private String address;
++++   private String phone;
++++@@ -52,15 +52,15 @@ public class Author {
++++   /**
++++    * @return the id
++++    */
++++-  public int getId() {
++++-    return id;
+++++  public int getAuthorId() {
+++++    return authorId;
++++   }
++++ 
++++   /**
++++    * @param id the id to set
++++    */
++++-  public void setId(int id) {
++++-    this.id = id;
+++++  public void setAuthorId(int authorId) {
+++++    this.authorId = authorId;
++++   }
++++ 
++++   /**
++++diff --git a/src/main/java/exoplatform/entity/Book.java b/src/main/java/exoplatform/entity/Book.java
++++index 8f5daff..152392f 100644
++++--- a/src/main/java/exoplatform/entity/Book.java
+++++++ b/src/main/java/exoplatform/entity/Book.java
++++@@ -30,7 +30,7 @@ public class Book {
++++     NOVEL, MANGA, COMICS, TECHNICAL, MATHS, HISTORY
++++   }
++++   /* id of book */
++++-  private int id;
+++++  private int bookId;
++++   /* name of book */
++++   private String name;
++++   /*category of book*/
++++@@ -63,14 +63,14 @@ public class Book {
++++   /**
++++    * @return the id
++++    */
++++-  public int getId() {
++++-    return id;
+++++  public int getBookId() {
+++++    return bookId;
++++   }
++++   /**
++++    * @param id the id to set
++++    */
++++-  public void setId(int id) {
++++-    this.id = id;
+++++  public void setBookId(int bookId) {
+++++    this.bookId = bookId;
++++   }
++++   /**
++++    * @return the name
++++diff --git a/src/main/java/exoplatform/entity/BookUser.java b/src/main/java/exoplatform/entity/BookUser.java
++++new file mode 100644
++++index 0000000..bc1053b
++++--- /dev/null
+++++++ b/src/main/java/exoplatform/entity/BookUser.java
++++@@ -0,0 +1,75 @@
+++++/*
+++++ * Copyright (C) 2003-2012 eXo Platform SAS.
+++++ *
+++++ * This program is free software: you can redistribute it and/or modify
+++++ * it under the terms of the GNU Affero General Public License as published by
+++++ * the Free Software Foundation, either version 3 of the License, or
+++++ * (at your option) any later version.
+++++ *
+++++ * This program is distributed in the hope that it will be useful,
+++++ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+++++ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+++++ * GNU Affero General Public License for more details.
+++++ *
+++++ * You should have received a copy of the GNU Affero General Public License
+++++ * along with this program. If not, see <http://www.gnu.org/licenses/>.
+++++ */
+++++package exoplatform.entity;
+++++
+++++import org.apache.lucene.store.Lock.With;
+++++
+++++/**
+++++ * Created by The eXo Platform SAS
+++++ * Author : BinhNV
+++++ *          binhnv@exoplatform.com
+++++ * Jul 16, 2012  
+++++ */
+++++public class BookUser {
+++++
+++++  private int userId;
+++++  private int bookId;
+++++  
+++++  /**
+++++   * BookUser constructor without parameter
+++++   */
+++++  public BookUser() {
+++++    
+++++  }
+++++  
+++++  /**
+++++   * BookUser constructor with parameter
+++++   */
+++++  public BookUser(int userId, int bookId) {
+++++    this.userId = userId;
+++++    this.bookId = bookId;
+++++  }
+++++
+++++  /**
+++++   * @return the userId
+++++   */
+++++  public int getUserId() {
+++++    return userId;
+++++  }
+++++
+++++  /**
+++++   * @param userId the userId to set
+++++   */
+++++  public void setUserId(int userId) {
+++++    this.userId = userId;
+++++  }
+++++
+++++  /**
+++++   * @return the bookId
+++++   */
+++++  public int getBookId() {
+++++    return bookId;
+++++  }
+++++
+++++  /**
+++++   * @param bookId the bookId to set
+++++   */
+++++  public void setBookId(int bookId) {
+++++    this.bookId = bookId;
+++++  }
+++++
+++++}
++++diff --git a/src/main/java/exoplatform/entity/User.java b/src/main/java/exoplatform/entity/User.java
++++new file mode 100644
++++index 0000000..aa63150
++++--- /dev/null
+++++++ b/src/main/java/exoplatform/entity/User.java
++++@@ -0,0 +1,142 @@
+++++/*
+++++ * Copyright (C) 2003-2012 eXo Platform SAS.
+++++ *
+++++ * This program is free software: you can redistribute it and/or modify
+++++ * it under the terms of the GNU Affero General Public License as published by
+++++ * the Free Software Foundation, either version 3 of the License, or
+++++ * (at your option) any later version.
+++++ *
+++++ * This program is distributed in the hope that it will be useful,
+++++ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+++++ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+++++ * GNU Affero General Public License for more details.
+++++ *
+++++ * You should have received a copy of the GNU Affero General Public License
+++++ * along with this program. If not, see <http://www.gnu.org/licenses/>.
+++++ */
+++++package exoplatform.entity;
+++++
+++++/**
+++++ * Created by The eXo Platform SAS
+++++ * Author : BinhNV
+++++ *          binhnv@exoplatform.com
+++++ * Jul 16, 2012  
+++++ */
+++++public class User {
+++++
+++++  private int userId;
+++++  private String username;
+++++  private String password;
+++++  private String fullname;
+++++  private String address;
+++++  private String phone;
+++++  
+++++  /**
+++++   * User constructor without parameter
+++++   */
+++++  public User() {
+++++    
+++++  }
+++++  
+++++  /**
+++++   * User constructor with parameter
+++++   * 
+++++   * @param username
+++++   * @param password
+++++   * @param fullname
+++++   * @param address
+++++   * @param phone
+++++   */
+++++  public User(String username, String password, String fullname, String address, String phone) {
+++++    this.username = username;
+++++    this.password = password;
+++++    this.fullname = fullname;
+++++    this.address = address;
+++++    this.phone = phone;
+++++  }
+++++
+++++  /**
+++++   * @return the userId
+++++   */
+++++  public int getUserId() {
+++++    return userId;
+++++  }
+++++
+++++  /**
+++++   * @param userId the userId to set
+++++   */
+++++  public void setUserId(int userId) {
+++++    this.userId = userId;
+++++  }
+++++
+++++  /**
+++++   * @return the username
+++++   */
+++++  public String getUsername() {
+++++    return username;
+++++  }
+++++
+++++  /**
+++++   * @param username the username to set
+++++   */
+++++  public void setUsername(String username) {
+++++    this.username = username;
+++++  }
+++++
+++++  /**
+++++   * @return the password
+++++   */
+++++  public String getPassword() {
+++++    return password;
+++++  }
+++++
+++++  /**
+++++   * @param password the password to set
+++++   */
+++++  public void setPassword(String password) {
+++++    this.password = password;
+++++  }
+++++
+++++  /**
+++++   * @return the fullname
+++++   */
+++++  public String getFullname() {
+++++    return fullname;
+++++  }
+++++
+++++  /**
+++++   * @param fullname the fullname to set
+++++   */
+++++  public void setFullname(String fullname) {
+++++    this.fullname = fullname;
+++++  }
+++++
+++++  /**
+++++   * @return the address
+++++   */
+++++  public String getAddress() {
+++++    return address;
+++++  }
+++++
+++++  /**
+++++   * @param address the address to set
+++++   */
+++++  public void setAddress(String address) {
+++++    this.address = address;
+++++  }
+++++
+++++  /**
+++++   * @return the phone
+++++   */
+++++  public String getPhone() {
+++++    return phone;
+++++  }
+++++
+++++  /**
+++++   * @param phone the phone to set
+++++   */
+++++  public void setPhone(String phone) {
+++++    this.phone = phone;
+++++  }
+++++
+++++}
++++diff --git a/src/main/java/exoplatform/utils/Utils.java b/src/main/java/exoplatform/utils/Utils.java
++++index ca5494b..2e97c21 100644
++++--- a/src/main/java/exoplatform/utils/Utils.java
+++++++ b/src/main/java/exoplatform/utils/Utils.java
++++@@ -40,6 +40,13 @@ public class Utils {
++++    **/
++++   public static int authorId = 0;
++++   
+++++  /** 
+++++   * Define a static variable which contain id of user 
+++++   * id of user will increase 1 value when a new user create
+++++   * 
+++++   **/
+++++  public static int userId = 0;
+++++  
++++   /**
++++    * Convert enum value to String value 
++++    * 
++++diff --git a/src/main/resources/conf/portal/jcr-component-plugins-configuration.xml b/src/main/resources/conf/portal/jcr-component-plugins-configuration.xml
++++index 04ff268..fa9f3ca 100644
++++--- a/src/main/resources/conf/portal/jcr-component-plugins-configuration.xml
+++++++ b/src/main/resources/conf/portal/jcr-component-plugins-configuration.xml
++++@@ -104,6 +104,34 @@
++++ 		                    		</field>                                   
++++ 	                  			</object>
++++ 	                		</value>
+++++	                		<value>
+++++	                  			<object type="org.exoplatform.services.jcr.ext.hierarchy.impl.HierarchyConfig$JcrPath">                   
+++++		                     		<field  name="alias"><string>author</string></field>
+++++		                     		<field  name="path"><string>/exostore:bookstore/exostore:user</string></field>                                          
+++++		                     		<field name="permissions">
+++++		                       			<collection type="java.util.ArrayList">               
+++++		                         			<value>                            
+++++		                           				<object type="org.exoplatform.services.jcr.ext.hierarchy.impl.HierarchyConfig$Permission">
+++++													  <field name="identity"><string>*:/platform/administrators</string></field>
+++++						                              <field name="read"><string>true</string></field>                
+++++						                              <field name="addNode"><string>true</string></field>                
+++++						                              <field name="setProperty"><string>true</string></field>                
+++++						                              <field name="remove"><string>true</string></field>                
+++++		                           				</object>  
+++++		                        			</value>     
+++++											<value>                            
+++++		                           				<object type="org.exoplatform.services.jcr.ext.hierarchy.impl.HierarchyConfig$Permission">
+++++						                              <field name="identity"><string>any</string></field>
+++++						                              <field name="read"><string>true</string></field>                
+++++						                              <field name="addNode"><string>false</string></field>                
+++++						                              <field name="setProperty"><string>true</string></field>                
+++++						                              <field name="remove"><string>false</string></field>                
+++++		                           				</object>  
+++++		                        			</value>                   
+++++		                      			</collection>
+++++		                    		</field>                                   
+++++	                  			</object>
+++++	                		</value>
++++ 	             	</collection>  
++++ 	            </field>
++++         	</object>
++++diff --git a/src/main/resources/conf/portal/nodetypes.xml b/src/main/resources/conf/portal/nodetypes.xml
++++index fba444b..c6482fa 100644
++++--- a/src/main/resources/conf/portal/nodetypes.xml
+++++++ b/src/main/resources/conf/portal/nodetypes.xml
++++@@ -47,4 +47,37 @@
++++ 		</propertyDefinitions>
++++ 	</nodeType>
++++ 	
+++++	<nodeType name="exostore:user" isMixin="false" hasOrderableChildNodes="false" primaryItemName="">
+++++		<supertypes>
+++++			<supertype>nt:base</supertype>
+++++			<supertype>mix:referenceable</supertype>
+++++		</supertypes>
+++++		<propertyDefinitions>
+++++			<propertyDefinition name="exostore:username" requiredType="String" autoCreated="false" mandatory="false" 
+++++						onParentVersion="COPY" protected="false" multiple="false">
+++++				<valueConstraints/>
+++++			</propertyDefinition>
+++++			<propertyDefinition name="exostore:password" requiredType="String" autoCreated="false" mandatory="false" 
+++++						onParentVersion="COPY" protected="false" multiple="false">
+++++				<valueConstraints/>
+++++			</propertyDefinition>
+++++			<propertyDefinition name="exostore:fullname" requiredType="String" autoCreated="false" mandatory="false" 
+++++						onParentVersion="COPY" protected="false" multiple="false">
+++++				<valueConstraints/>
+++++			</propertyDefinition>
+++++			<propertyDefinition name="exostore:useraddress" requiredType="String" autoCreated="false" mandatory="false" 
+++++						onParentVersion="COPY" protected="false" multiple="false">
+++++				<valueConstraints/>
+++++			</propertyDefinition>
+++++			<propertyDefinition name="exostore:userphone" requiredType="String" autoCreated="false" mandatory="false" 
+++++						onParentVersion="COPY" protected="false" multiple="false">
+++++				<valueConstraints/>
+++++			</propertyDefinition>
+++++			<propertyDefinition name="exostore:book" requiredType="Reference" autoCreated="false" mandatory="false" 
+++++			    		onParentVersion="COPY" protected="false" multiple="true">
+++++        		<valueConstraints/>
+++++      		</propertyDefinition>
+++++		</propertyDefinitions>
+++++	</nodeType>
+++++	
++++ </nodeTypes>
++++\ No newline at end of file
+++diff --git a/jcr-exo-183177d.patch b/jcr-exo-183177d.patch
+++new file mode 100644
+++index 0000000..3e34f02
+++--- /dev/null
++++++ b/jcr-exo-183177d.patch
+++@@ -0,0 +1,2719 @@
++++commit 183177d7dc2f8938ea39abdb6aa496a2560ff0e2
++++Author: BinhNV <binhnv@exoplatform.com>
++++Date:   Fri Jul 13 15:38:39 2012 +0700
++++
++++    add jcr-exo within exo gatein portal environment
++++
++++diff --git a/.classpath b/.classpath
++++new file mode 100644
++++index 0000000..9d7da80
++++--- /dev/null
+++++++ b/.classpath
++++@@ -0,0 +1,152 @@
+++++<?xml version="1.0" encoding="UTF-8"?>
+++++<classpath>
+++++	<classpathentry including="**/*.java" kind="src" output="target/test-classes" path="src/test/java"/>
+++++	<classpathentry including="**/*.java" kind="src" path="src/main/java"/>
+++++	<classpathentry kind="src" path="src/main/resources"/>
+++++	<classpathentry kind="var" path="M2_REPO/javax/portlet/portlet-api/2.0/portlet-api-2.0.jar" sourcepath="M2_REPO/javax/portlet/portlet-api/2.0/portlet-api-2.0-sources.jar">
+++++		<attributes>
+++++			<attribute name="javadoc_location" value="jar:file:/home/binhnv/java/exo-dependencies/repository/javax/portlet/portlet-api/2.0/portlet-api-2.0-javadoc.jar!/"/>
+++++		</attributes>
+++++	</classpathentry>
+++++	<classpathentry kind="var" path="M2_REPO/javax/faces/jsf-api/1.2_13/jsf-api-1.2_13.jar" sourcepath="M2_REPO/javax/faces/jsf-api/1.2_13/jsf-api-1.2_13-sources.jar">
+++++		<attributes>
+++++			<attribute name="javadoc_location" value="jar:file:/home/binhnv/java/exo-dependencies/repository/javax/faces/jsf-api/1.2_13/jsf-api-1.2_13-javadoc.jar!/"/>
+++++		</attributes>
+++++	</classpathentry>
+++++	<classpathentry kind="var" path="M2_REPO/javax/servlet/servlet-api/2.4/servlet-api-2.4.jar" sourcepath="M2_REPO/javax/servlet/servlet-api/2.4/servlet-api-2.4-sources.jar"/>
+++++	<classpathentry kind="var" path="M2_REPO/javax/activation/activation/1.1.1/activation-1.1.1.jar" sourcepath="M2_REPO/javax/activation/activation/1.1.1/activation-1.1.1-sources.jar"/>
+++++	<classpathentry kind="var" path="M2_REPO/javax/transaction/jta/1.1/jta-1.1.jar" sourcepath="M2_REPO/javax/transaction/jta/1.1/jta-1.1-sources.jar"/>
+++++	<classpathentry kind="var" path="M2_REPO/javax/mail/mail/1.4.4/mail-1.4.4.jar" sourcepath="M2_REPO/javax/mail/mail/1.4.4/mail-1.4.4-sources.jar"/>
+++++	<classpathentry kind="var" path="M2_REPO/javax/jcr/jcr/1.0/jcr-1.0.jar" sourcepath="M2_REPO/javax/jcr/jcr/1.0/jcr-1.0-sources.jar"/>
+++++	<classpathentry kind="var" path="M2_REPO/javax/xml/stream/stax-api/1.0-2/stax-api-1.0-2.jar" sourcepath="M2_REPO/javax/xml/stream/stax-api/1.0-2/stax-api-1.0-2-sources.jar"/>
+++++	<classpathentry kind="var" path="M2_REPO/javax/resource/connector-api/1.5/connector-api-1.5.jar" sourcepath="M2_REPO/javax/resource/connector-api/1.5/connector-api-1.5-sources.jar"/>
+++++	<classpathentry kind="var" path="M2_REPO/javax/xml/bind/jaxb-api/2.1/jaxb-api-2.1.jar" sourcepath="M2_REPO/javax/xml/bind/jaxb-api/2.1/jaxb-api-2.1-sources.jar"/>
+++++	<classpathentry kind="var" path="M2_REPO/javax/ws/rs/jsr311-api/1.0/jsr311-api-1.0.jar" sourcepath="M2_REPO/javax/ws/rs/jsr311-api/1.0/jsr311-api-1.0-sources.jar"/>
+++++	<classpathentry kind="var" path="M2_REPO/javax/inject/javax.inject/1/javax.inject-1.jar" sourcepath="M2_REPO/javax/inject/javax.inject/1/javax.inject-1-sources.jar"/>
+++++	<classpathentry kind="var" path="M2_REPO/javax/annotation/jsr250-api/1.0/jsr250-api-1.0.jar" sourcepath="M2_REPO/javax/annotation/jsr250-api/1.0/jsr250-api-1.0-sources.jar"/>
+++++	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER"/>
+++++	<classpathentry kind="var" path="M2_REPO/org/hsqldb/hsqldb/2.0.0/hsqldb-2.0.0.jar"/>
+++++	<classpathentry kind="var" path="M2_REPO/org/exoplatform/jcr/exo.jcr.component.ext/1.14.0-CR2/exo.jcr.component.ext-1.14.0-CR2.jar"/>
+++++	<classpathentry kind="var" path="M2_REPO/org/exoplatform/kernel/exo.kernel.commons/2.3.0-CR2/exo.kernel.commons-2.3.0-CR2.jar"/>
+++++	<classpathentry kind="var" path="M2_REPO/xpp3/xpp3/1.1.4c/xpp3-1.1.4c.jar" sourcepath="M2_REPO/xpp3/xpp3/1.1.4c/xpp3-1.1.4c-sources.jar"/>
+++++	<classpathentry kind="var" path="M2_REPO/commons-logging/commons-logging/1.1.1/commons-logging-1.1.1.jar" sourcepath="M2_REPO/commons-logging/commons-logging/1.1.1/commons-logging-1.1.1-sources.jar">
+++++		<attributes>
+++++			<attribute name="javadoc_location" value="jar:file:/home/binhnv/java/exo-dependencies/repository/commons-logging/commons-logging/1.1.1/commons-logging-1.1.1-javadoc.jar!/"/>
+++++		</attributes>
+++++	</classpathentry>
+++++	<classpathentry kind="var" path="M2_REPO/org/slf4j/slf4j-api/1.5.8/slf4j-api-1.5.8.jar" sourcepath="M2_REPO/org/slf4j/slf4j-api/1.5.8/slf4j-api-1.5.8-sources.jar"/>
+++++	<classpathentry kind="var" path="M2_REPO/org/exoplatform/kernel/exo.kernel.container/2.3.0-CR2/exo.kernel.container-2.3.0-CR2.jar"/>
+++++	<classpathentry kind="var" path="M2_REPO/org/exoplatform/tool/exo.tool.framework.junit/1.2.1-GA/exo.tool.framework.junit-1.2.1-GA.jar" sourcepath="M2_REPO/org/exoplatform/tool/exo.tool.framework.junit/1.2.1-GA/exo.tool.framework.junit-1.2.1-GA-sources.jar"/>
+++++	<classpathentry kind="var" path="M2_REPO/junit/junit/3.8.1/junit-3.8.1.jar" sourcepath="M2_REPO/junit/junit/3.8.1/junit-3.8.1-sources.jar"/>
+++++	<classpathentry kind="var" path="M2_REPO/picocontainer/picocontainer/1.1/picocontainer-1.1.jar"/>
+++++	<classpathentry kind="var" path="M2_REPO/jmock/jmock/1.0.1/jmock-1.0.1.jar" sourcepath="M2_REPO/jmock/jmock/1.0.1/jmock-1.0.1-sources.jar">
+++++		<attributes>
+++++			<attribute name="javadoc_location" value="jar:file:/home/binhnv/java/exo-dependencies/repository/jmock/jmock/1.0.1/jmock-1.0.1-javadoc.jar!/"/>
+++++		</attributes>
+++++	</classpathentry>
+++++	<classpathentry kind="var" path="M2_REPO/xstream/xstream/1.0.2/xstream-1.0.2.jar"/>
+++++	<classpathentry kind="var" path="M2_REPO/commons-beanutils/commons-beanutils/1.8.3/commons-beanutils-1.8.3.jar" sourcepath="M2_REPO/commons-beanutils/commons-beanutils/1.8.3/commons-beanutils-1.8.3-sources.jar"/>
+++++	<classpathentry kind="var" path="M2_REPO/org/jibx/jibx-run/1.2.2/jibx-run-1.2.2.jar"/>
+++++	<classpathentry kind="var" path="M2_REPO/org/jibx/jibx-bind/1.2.2/jibx-bind-1.2.2.jar"/>
+++++	<classpathentry kind="var" path="M2_REPO/bcel/bcel/5.1/bcel-5.1.jar" sourcepath="M2_REPO/bcel/bcel/5.1/bcel-5.1-sources.jar"/>
+++++	<classpathentry kind="var" path="M2_REPO/regexp/regexp/1.2/regexp-1.2.jar"/>
+++++	<classpathentry kind="var" path="M2_REPO/org/jibx/jibx-extras/1.2.2/jibx-extras-1.2.2.jar"/>
+++++	<classpathentry kind="var" path="M2_REPO/org/exoplatform/kernel/exo.kernel.component.command/2.3.0-CR2/exo.kernel.component.command-2.3.0-CR2.jar"/>
+++++	<classpathentry kind="var" path="M2_REPO/commons-chain/commons-chain/1.2/commons-chain-1.2.jar" sourcepath="M2_REPO/commons-chain/commons-chain/1.2/commons-chain-1.2-sources.jar"/>
+++++	<classpathentry kind="var" path="M2_REPO/commons-digester/commons-digester/1.8.1/commons-digester-1.8.1.jar" sourcepath="M2_REPO/commons-digester/commons-digester/1.8.1/commons-digester-1.8.1-sources.jar"/>
+++++	<classpathentry kind="var" path="M2_REPO/xml-apis/xml-apis/1.0.b2/xml-apis-1.0.b2.jar" sourcepath="M2_REPO/xml-apis/xml-apis/1.0.b2/xml-apis-1.0.b2-sources.jar"/>
+++++	<classpathentry kind="var" path="M2_REPO/org/exoplatform/core/exo.core.component.database/2.4.0-CR2/exo.core.component.database-2.4.0-CR2.jar"/>
+++++	<classpathentry kind="var" path="M2_REPO/org/exoplatform/kernel/exo.kernel.component.common/2.3.0-CR2/exo.kernel.component.common-2.3.0-CR2.jar"/>
+++++	<classpathentry kind="var" path="M2_REPO/org/ow2/jotm/jotm-core/2.1.9/jotm-core-2.1.9.jar"/>
+++++	<classpathentry kind="var" path="M2_REPO/org/ow2/spec/ee/ow2-jta-1.1-spec/1.0-M1/ow2-jta-1.1-spec-1.0-M1.jar"/>
+++++	<classpathentry kind="var" path="M2_REPO/org/ow2/carol/carol/3.0.6/carol-3.0.6.jar"/>
+++++	<classpathentry kind="var" path="M2_REPO/org/ow2/carol/carol-interceptors/1.0.1/carol-interceptors-1.0.1.jar"/>
+++++	<classpathentry kind="var" path="M2_REPO/org/ow2/carol/irmi/irmi/1.1.2/irmi-1.1.2.jar"/>
+++++	<classpathentry kind="var" path="M2_REPO/commons-collections/commons-collections/3.2.1/commons-collections-3.2.1.jar" sourcepath="M2_REPO/commons-collections/commons-collections/3.2.1/commons-collections-3.2.1-sources.jar"/>
+++++	<classpathentry kind="var" path="M2_REPO/org/jacorb/jacorb/2.2.3-jonas-patch-20071018/jacorb-2.2.3-jonas-patch-20071018.jar"/>
+++++	<classpathentry kind="var" path="M2_REPO/avalon-framework/avalon-framework/4.1.5/avalon-framework-4.1.5.jar"/>
+++++	<classpathentry kind="var" path="M2_REPO/org/jacorb/jacorb-idl/2.2.3-jonas-patch-20071018/jacorb-idl-2.2.3-jonas-patch-20071018.jar"/>
+++++	<classpathentry kind="var" path="M2_REPO/logkit/logkit/1.2/logkit-1.2.jar"/>
+++++	<classpathentry kind="var" path="M2_REPO/commons-logging/commons-logging-api/1.1/commons-logging-api-1.1.jar"/>
+++++	<classpathentry kind="var" path="M2_REPO/org/objectweb/howl/howl/1.0.1-1/howl-1.0.1-1.jar"/>
+++++	<classpathentry kind="var" path="M2_REPO/org/quartz-scheduler/quartz/1.8.4/quartz-1.8.4.jar"/>
+++++	<classpathentry kind="var" path="M2_REPO/org/jgroups/jgroups/2.11.1.Final/jgroups-2.11.1.Final.jar" sourcepath="M2_REPO/org/jgroups/jgroups/2.11.1.Final/jgroups-2.11.1.Final-sources.jar"/>
+++++	<classpathentry kind="var" path="M2_REPO/org/exoplatform/kernel/exo.kernel.component.cache/2.3.0-CR2/exo.kernel.component.cache-2.3.0-CR2.jar"/>
+++++	<classpathentry kind="var" path="M2_REPO/com/experlog/xapool/1.5.0/xapool-1.5.0.jar" sourcepath="M2_REPO/com/experlog/xapool/1.5.0/xapool-1.5.0-sources.jar"/>
+++++	<classpathentry kind="var" path="M2_REPO/org/hibernate/hibernate-core/3.3.2.GA/hibernate-core-3.3.2.GA.jar" sourcepath="M2_REPO/org/hibernate/hibernate-core/3.3.2.GA/hibernate-core-3.3.2.GA-sources.jar"/>
+++++	<classpathentry kind="var" path="M2_REPO/antlr/antlr/2.7.6/antlr-2.7.6.jar" sourcepath="M2_REPO/antlr/antlr/2.7.6/antlr-2.7.6-sources.jar"/>
+++++	<classpathentry kind="var" path="M2_REPO/dom4j/dom4j/1.6.1/dom4j-1.6.1.jar" sourcepath="M2_REPO/dom4j/dom4j/1.6.1/dom4j-1.6.1-sources.jar"/>
+++++	<classpathentry kind="var" path="M2_REPO/org/hibernate/hibernate-annotations/3.4.0.GA/hibernate-annotations-3.4.0.GA.jar" sourcepath="M2_REPO/org/hibernate/hibernate-annotations/3.4.0.GA/hibernate-annotations-3.4.0.GA-sources.jar"/>
+++++	<classpathentry kind="var" path="M2_REPO/org/hibernate/ejb3-persistence/1.0.2.GA/ejb3-persistence-1.0.2.GA.jar" sourcepath="M2_REPO/org/hibernate/ejb3-persistence/1.0.2.GA/ejb3-persistence-1.0.2.GA-sources.jar"/>
+++++	<classpathentry kind="var" path="M2_REPO/org/hibernate/hibernate-commons-annotations/3.1.0.GA/hibernate-commons-annotations-3.1.0.GA.jar" sourcepath="M2_REPO/org/hibernate/hibernate-commons-annotations/3.1.0.GA/hibernate-commons-annotations-3.1.0.GA-sources.jar"/>
+++++	<classpathentry kind="var" path="M2_REPO/commons-dbcp/commons-dbcp/1.4/commons-dbcp-1.4.jar" sourcepath="M2_REPO/commons-dbcp/commons-dbcp/1.4/commons-dbcp-1.4-sources.jar"/>
+++++	<classpathentry kind="var" path="M2_REPO/commons-pool/commons-pool/1.5.5/commons-pool-1.5.5.jar" sourcepath="M2_REPO/commons-pool/commons-pool/1.5.5/commons-pool-1.5.5-sources.jar"/>
+++++	<classpathentry kind="var" path="M2_REPO/org/exoplatform/core/exo.core.component.document/2.4.0-CR2/exo.core.component.document-2.4.0-CR2.jar"/>
+++++	<classpathentry kind="var" path="M2_REPO/org/apache/pdfbox/pdfbox/1.4.0/pdfbox-1.4.0.jar"/>
+++++	<classpathentry kind="var" path="M2_REPO/org/apache/pdfbox/fontbox/1.4.0/fontbox-1.4.0.jar"/>
+++++	<classpathentry kind="var" path="M2_REPO/org/apache/pdfbox/jempbox/1.4.0/jempbox-1.4.0.jar"/>
+++++	<classpathentry kind="var" path="M2_REPO/org/htmlparser/htmlparser/1.6/htmlparser-1.6.jar"/>
+++++	<classpathentry kind="var" path="M2_REPO/org/apache/poi/poi/3.6/poi-3.6.jar" sourcepath="M2_REPO/org/apache/poi/poi/3.6/poi-3.6-sources.jar"/>
+++++	<classpathentry kind="var" path="M2_REPO/org/apache/poi/poi-scratchpad/3.6/poi-scratchpad-3.6.jar" sourcepath="M2_REPO/org/apache/poi/poi-scratchpad/3.6/poi-scratchpad-3.6-sources.jar"/>
+++++	<classpathentry kind="var" path="M2_REPO/org/apache/poi/poi-ooxml/3.6/poi-ooxml-3.6.jar" sourcepath="M2_REPO/org/apache/poi/poi-ooxml/3.6/poi-ooxml-3.6-sources.jar"/>
+++++	<classpathentry kind="var" path="M2_REPO/org/apache/poi/poi-ooxml-schemas/3.6/poi-ooxml-schemas-3.6.jar"/>
+++++	<classpathentry kind="var" path="M2_REPO/org/apache/xmlbeans/xmlbeans/2.3.0/xmlbeans-2.3.0.jar"/>
+++++	<classpathentry kind="var" path="M2_REPO/stax/stax-api/1.0.1/stax-api-1.0.1.jar"/>
+++++	<classpathentry kind="var" path="M2_REPO/org/apache/geronimo/specs/geronimo-stax-api_1.0_spec/1.0.1/geronimo-stax-api_1.0_spec-1.0.1.jar" sourcepath="M2_REPO/org/apache/geronimo/specs/geronimo-stax-api_1.0_spec/1.0.1/geronimo-stax-api_1.0_spec-1.0.1-sources.jar"/>
+++++	<classpathentry kind="var" path="M2_REPO/org/apache/tika/tika-core/0.7/tika-core-0.7.jar" sourcepath="M2_REPO/org/apache/tika/tika-core/0.7/tika-core-0.7-sources.jar"/>
+++++	<classpathentry kind="var" path="M2_REPO/org/apache/tika/tika-parsers/0.7/tika-parsers-0.7.jar" sourcepath="M2_REPO/org/apache/tika/tika-parsers/0.7/tika-parsers-0.7-sources.jar"/>
+++++	<classpathentry kind="var" path="M2_REPO/org/apache/commons/commons-compress/1.0/commons-compress-1.0.jar" sourcepath="M2_REPO/org/apache/commons/commons-compress/1.0/commons-compress-1.0-sources.jar"/>
+++++	<classpathentry kind="var" path="M2_REPO/org/bouncycastle/bcmail-jdk15/1.45/bcmail-jdk15-1.45.jar" sourcepath="M2_REPO/org/bouncycastle/bcmail-jdk15/1.45/bcmail-jdk15-1.45-sources.jar"/>
+++++	<classpathentry kind="var" path="M2_REPO/org/bouncycastle/bcprov-jdk15/1.45/bcprov-jdk15-1.45.jar" sourcepath="M2_REPO/org/bouncycastle/bcprov-jdk15/1.45/bcprov-jdk15-1.45-sources.jar"/>
+++++	<classpathentry kind="var" path="M2_REPO/org/ccil/cowan/tagsoup/tagsoup/1.2/tagsoup-1.2.jar"/>
+++++	<classpathentry kind="var" path="M2_REPO/asm/asm/3.1/asm-3.1.jar" sourcepath="M2_REPO/asm/asm/3.1/asm-3.1-sources.jar"/>
+++++	<classpathentry kind="var" path="M2_REPO/log4j/log4j/1.2.14/log4j-1.2.14.jar" sourcepath="M2_REPO/log4j/log4j/1.2.14/log4j-1.2.14-sources.jar"/>
+++++	<classpathentry kind="var" path="M2_REPO/com/drewnoakes/metadata-extractor/2.4.0-beta-1/metadata-extractor-2.4.0-beta-1.jar" sourcepath="M2_REPO/com/drewnoakes/metadata-extractor/2.4.0-beta-1/metadata-extractor-2.4.0-beta-1-sources.jar"/>
+++++	<classpathentry kind="var" path="M2_REPO/org/exoplatform/core/exo.core.component.organization.api/2.4.0-CR2/exo.core.component.organization.api-2.4.0-CR2.jar"/>
+++++	<classpathentry kind="var" path="M2_REPO/org/exoplatform/core/exo.core.component.security.core/2.4.0-CR2/exo.core.component.security.core-2.4.0-CR2.jar"/>
+++++	<classpathentry kind="var" path="M2_REPO/commons-lang/commons-lang/2.6/commons-lang-2.6.jar" sourcepath="M2_REPO/commons-lang/commons-lang/2.6/commons-lang-2.6-sources.jar"/>
+++++	<classpathentry kind="var" path="M2_REPO/xdoclet/xdoclet-hibernate-module/1.2.3/xdoclet-hibernate-module-1.2.3.jar"/>
+++++	<classpathentry kind="var" path="M2_REPO/xdoclet/xdoclet/1.2.3/xdoclet-1.2.3.jar" sourcepath="M2_REPO/xdoclet/xdoclet/1.2.3/xdoclet-1.2.3-sources.jar"/>
+++++	<classpathentry kind="var" path="M2_REPO/xdoclet/xdoclet-xdoclet-module/1.2.3/xdoclet-xdoclet-module-1.2.3.jar"/>
+++++	<classpathentry kind="var" path="M2_REPO/xdoclet/xjavadoc/1.2.3/xjavadoc-1.2.3.jar"/>
+++++	<classpathentry kind="var" path="M2_REPO/org/exoplatform/jcr/exo.jcr.component.core/1.14.0-CR2/exo.jcr.component.core-1.14.0-CR2.jar"/>
+++++	<classpathentry kind="var" path="M2_REPO/org/apache/lucene/lucene-core/2.9.4/lucene-core-2.9.4.jar" sourcepath="M2_REPO/org/apache/lucene/lucene-core/2.9.4/lucene-core-2.9.4-sources.jar"/>
+++++	<classpathentry kind="var" path="M2_REPO/org/apache/lucene/lucene-spellchecker/2.9.4/lucene-spellchecker-2.9.4.jar" sourcepath="M2_REPO/org/apache/lucene/lucene-spellchecker/2.9.4/lucene-spellchecker-2.9.4-sources.jar"/>
+++++	<classpathentry kind="var" path="M2_REPO/org/apache/lucene/lucene-memory/2.9.4/lucene-memory-2.9.4.jar" sourcepath="M2_REPO/org/apache/lucene/lucene-memory/2.9.4/lucene-memory-2.9.4-sources.jar"/>
+++++	<classpathentry kind="var" path="M2_REPO/com/sun/xml/stream/sjsxp/1.0.1/sjsxp-1.0.1.jar"/>
+++++	<classpathentry kind="var" path="M2_REPO/concurrent/concurrent/1.3.4/concurrent-1.3.4.jar" sourcepath="M2_REPO/concurrent/concurrent/1.3.4/concurrent-1.3.4-sources.jar"/>
+++++	<classpathentry kind="var" path="M2_REPO/commons-io/commons-io/1.4/commons-io-1.4.jar" sourcepath="M2_REPO/commons-io/commons-io/1.4/commons-io-1.4-sources.jar"/>
+++++	<classpathentry kind="var" path="M2_REPO/jboss/jbossts/jbossjts/4.6.1.GA/jbossjts-4.6.1.GA.jar"/>
+++++	<classpathentry kind="var" path="M2_REPO/jboss/jbossts/jbossts-common/4.6.1.GA/jbossts-common-4.6.1.GA.jar"/>
+++++	<classpathentry kind="var" path="M2_REPO/org/apache/ws/commons/ws-commons-util/1.0.1/ws-commons-util-1.0.1.jar" sourcepath="M2_REPO/org/apache/ws/commons/ws-commons-util/1.0.1/ws-commons-util-1.0.1-sources.jar"/>
+++++	<classpathentry kind="var" path="M2_REPO/org/jboss/cache/jbosscache-core/3.2.6.GA/jbosscache-core-3.2.6.GA.jar" sourcepath="M2_REPO/org/jboss/cache/jbosscache-core/3.2.6.GA/jbosscache-core-3.2.6.GA-sources.jar"/>
+++++	<classpathentry kind="var" path="M2_REPO/org/jboss/javaee/jboss-transaction-api/1.0.1.GA/jboss-transaction-api-1.0.1.GA.jar" sourcepath="M2_REPO/org/jboss/javaee/jboss-transaction-api/1.0.1.GA/jboss-transaction-api-1.0.1.GA-sources.jar">
+++++		<attributes>
+++++			<attribute name="javadoc_location" value="jar:file:/home/binhnv/java/exo-dependencies/repository/org/jboss/javaee/jboss-transaction-api/1.0.1.GA/jboss-transaction-api-1.0.1.GA-javadoc.jar!/"/>
+++++		</attributes>
+++++	</classpathentry>
+++++	<classpathentry kind="var" path="M2_REPO/org/jboss/jboss-common-core/2.2.14.GA/jboss-common-core-2.2.14.GA.jar" sourcepath="M2_REPO/org/jboss/jboss-common-core/2.2.14.GA/jboss-common-core-2.2.14.GA-sources.jar"/>
+++++	<classpathentry kind="var" path="M2_REPO/org/jboss/logging/jboss-logging-spi/2.0.5.GA/jboss-logging-spi-2.0.5.GA.jar" sourcepath="M2_REPO/org/jboss/logging/jboss-logging-spi/2.0.5.GA/jboss-logging-spi-2.0.5.GA-sources.jar">
+++++		<attributes>
+++++			<attribute name="javadoc_location" value="jar:file:/home/binhnv/java/exo-dependencies/repository/org/jboss/logging/jboss-logging-spi/2.0.5.GA/jboss-logging-spi-2.0.5.GA-javadoc.jar!/"/>
+++++		</attributes>
+++++	</classpathentry>
+++++	<classpathentry kind="var" path="M2_REPO/org/infinispan/infinispan-core/4.2.1.FINAL/infinispan-core-4.2.1.FINAL.jar"/>
+++++	<classpathentry kind="var" path="M2_REPO/org/jboss/marshalling/river/1.2.3.GA/river-1.2.3.GA.jar"/>
+++++	<classpathentry kind="var" path="M2_REPO/org/jboss/marshalling/marshalling-api/1.2.3.GA/marshalling-api-1.2.3.GA.jar"/>
+++++	<classpathentry kind="var" path="M2_REPO/org/rhq/helpers/rhq-pluginAnnotations/3.0.1/rhq-pluginAnnotations-3.0.1.jar"/>
+++++	<classpathentry kind="var" path="M2_REPO/i18nlog/i18nlog/1.0.10/i18nlog-1.0.10.jar"/>
+++++	<classpathentry kind="var" path="M2_REPO/org/infinispan/infinispan-cachestore-jdbc/4.2.1.FINAL/infinispan-cachestore-jdbc-4.2.1.FINAL.jar"/>
+++++	<classpathentry kind="var" path="M2_REPO/c3p0/c3p0/0.9.1.2/c3p0-0.9.1.2.jar"/>
+++++	<classpathentry kind="var" path="M2_REPO/org/exoplatform/core/exo.core.component.script.groovy/2.4.0-CR2/exo.core.component.script.groovy-2.4.0-CR2.jar"/>
+++++	<classpathentry kind="var" path="M2_REPO/org/codehaus/groovy/groovy-all/1.7.6/groovy-all-1.7.6.jar" sourcepath="M2_REPO/org/codehaus/groovy/groovy-all/1.7.6/groovy-all-1.7.6-sources.jar"/>
+++++	<classpathentry kind="var" path="M2_REPO/org/exoplatform/ws/exo.ws.rest.core/2.2.0-CR2/exo.ws.rest.core-2.2.0-CR2.jar"/>
+++++	<classpathentry kind="var" path="M2_REPO/org/exoplatform/ws/exo.ws.frameworks.json/2.2.0-CR2/exo.ws.frameworks.json-2.2.0-CR2.jar"/>
+++++	<classpathentry kind="var" path="M2_REPO/net/sf/jtidy/jtidy/r938/jtidy-r938.jar" sourcepath="M2_REPO/net/sf/jtidy/jtidy/r938/jtidy-r938-sources.jar"/>
+++++	<classpathentry kind="var" path="M2_REPO/commons-fileupload/commons-fileupload/1.2.1/commons-fileupload-1.2.1.jar" sourcepath="M2_REPO/commons-fileupload/commons-fileupload/1.2.1/commons-fileupload-1.2.1-sources.jar"/>
+++++	<classpathentry kind="var" path="M2_REPO/org/exoplatform/ws/exo.ws.rest.ext/2.2.0-CR2/exo.ws.rest.ext-2.2.0-CR2.jar"/>
+++++	<classpathentry kind="var" path="M2_REPO/org/exoplatform/core/exo.core.component.xml-processing/2.4.0-CR2/exo.core.component.xml-processing-2.4.0-CR2.jar"/>
+++++	<classpathentry kind="var" path="M2_REPO/org/exoplatform/ws/exo.ws.commons/2.2.0-CR2/exo.ws.commons-2.2.0-CR2.jar"/>
+++++	<classpathentry kind="var" path="M2_REPO/org/slf4j/slf4j-log4j12/1.5.8/slf4j-log4j12-1.5.8.jar" sourcepath="M2_REPO/org/slf4j/slf4j-log4j12/1.5.8/slf4j-log4j12-1.5.8-sources.jar"/>
+++++	<classpathentry kind="output" path="target/classes"/>
+++++</classpath>
++++diff --git a/.project b/.project
++++new file mode 100644
++++index 0000000..5e970c1
++++--- /dev/null
+++++++ b/.project
++++@@ -0,0 +1,14 @@
+++++<?xml version="1.0" encoding="UTF-8"?>
+++++<projectDescription>
+++++  <name>jcr-exo</name>
+++++  <comment>NO_M2ECLIPSE_SUPPORT: Project files created with the maven-eclipse-plugin are not supported in M2Eclipse.</comment>
+++++  <projects/>
+++++  <buildSpec>
+++++    <buildCommand>
+++++      <name>org.eclipse.jdt.core.javabuilder</name>
+++++    </buildCommand>
+++++  </buildSpec>
+++++  <natures>
+++++    <nature>org.eclipse.jdt.core.javanature</nature>
+++++  </natures>
+++++</projectDescription>
++++\ No newline at end of file
++++diff --git a/.settings/org.eclipse.jdt.core.prefs b/.settings/org.eclipse.jdt.core.prefs
++++new file mode 100644
++++index 0000000..0a88698
++++--- /dev/null
+++++++ b/.settings/org.eclipse.jdt.core.prefs
++++@@ -0,0 +1,5 @@
+++++#Mon Jul 09 14:07:58 ICT 2012
+++++org.eclipse.jdt.core.compiler.codegen.targetPlatform=1.5
+++++eclipse.preferences.version=1
+++++org.eclipse.jdt.core.compiler.source=1.5
+++++org.eclipse.jdt.core.compiler.compliance=1.5
++++diff --git a/pom.xml b/pom.xml
++++new file mode 100644
++++index 0000000..65d0e39
++++--- /dev/null
+++++++ b/pom.xml
++++@@ -0,0 +1,76 @@
+++++<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+++++  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
+++++  <modelVersion>4.0.0</modelVersion>
+++++
+++++  <groupId>exoplatform</groupId>
+++++  <artifactId>jcr-exo</artifactId>
+++++  <version>1.0-SNAPSHOT</version>
+++++  <packaging>jar</packaging>
+++++
+++++  <name>jcr-exo</name>
+++++  <url>http://maven.apache.org</url>
+++++
+++++  <properties>
+++++    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
+++++  </properties>
+++++
+++++  <build>
+++++    <testResources>
+++++      <testResource>
+++++        <directory>src/test/resources</directory>
+++++        <includes>
+++++          <include>**/*.properties</include>
+++++          <include>**/*.xml</include>
+++++          <include>**/*.conf</include>
+++++        </includes>
+++++      </testResource>
+++++    </testResources>
+++++    <plugins>
+++++      <plugin>
+++++        <groupId>org.apache.maven.plugins</groupId>
+++++        <artifactId>maven-compiler-plugin</artifactId>
+++++        <configuration>
+++++          <source>1.5</source>
+++++          <target>1.5</target>
+++++        </configuration>
+++++      </plugin>
+++++    </plugins>
+++++  </build>
+++++  <dependencies>
+++++    <dependency>
+++++      <groupId>org.hsqldb</groupId>
+++++      <artifactId>hsqldb</artifactId>
+++++      <version>2.0.0</version>
+++++    </dependency>
+++++    <dependency>
+++++      <groupId>org.exoplatform.jcr</groupId>
+++++      <artifactId>exo.jcr.component.ext</artifactId>
+++++      <version>1.14.0-CR2</version>
+++++      <scope>provided</scope>
+++++    </dependency>
+++++    <dependency>
+++++      <groupId>junit</groupId>
+++++      <artifactId>junit</artifactId>
+++++      <version>3.8.1</version>
+++++      <scope>test</scope>
+++++    </dependency>
+++++    <dependency>
+++++      <groupId>org.exoplatform.kernel</groupId>
+++++      <artifactId>exo.kernel.component.cache</artifactId>
+++++      <version>2.3.0-CR2</version>
+++++      <scope>provided</scope>
+++++    </dependency>
+++++    <dependency>
+++++      <groupId>org.slf4j</groupId>
+++++      <artifactId>slf4j-log4j12</artifactId>
+++++      <version>1.5.8</version>
+++++      <scope>test</scope>
+++++    </dependency>
+++++    <dependency>
+++++      <groupId>org.exoplatform.ws</groupId>
+++++      <artifactId>exo.ws.rest.core</artifactId>
+++++      <version>2.2.0-CR2</version>
+++++      <scope>provided</scope>
+++++    </dependency>
+++++  </dependencies>
+++++</project>
++++diff --git a/pom.xml~ b/pom.xml~
++++new file mode 100644
++++index 0000000..65d0e39
++++--- /dev/null
+++++++ b/pom.xml~
++++@@ -0,0 +1,76 @@
+++++<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+++++  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
+++++  <modelVersion>4.0.0</modelVersion>
+++++
+++++  <groupId>exoplatform</groupId>
+++++  <artifactId>jcr-exo</artifactId>
+++++  <version>1.0-SNAPSHOT</version>
+++++  <packaging>jar</packaging>
+++++
+++++  <name>jcr-exo</name>
+++++  <url>http://maven.apache.org</url>
+++++
+++++  <properties>
+++++    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
+++++  </properties>
+++++
+++++  <build>
+++++    <testResources>
+++++      <testResource>
+++++        <directory>src/test/resources</directory>
+++++        <includes>
+++++          <include>**/*.properties</include>
+++++          <include>**/*.xml</include>
+++++          <include>**/*.conf</include>
+++++        </includes>
+++++      </testResource>
+++++    </testResources>
+++++    <plugins>
+++++      <plugin>
+++++        <groupId>org.apache.maven.plugins</groupId>
+++++        <artifactId>maven-compiler-plugin</artifactId>
+++++        <configuration>
+++++          <source>1.5</source>
+++++          <target>1.5</target>
+++++        </configuration>
+++++      </plugin>
+++++    </plugins>
+++++  </build>
+++++  <dependencies>
+++++    <dependency>
+++++      <groupId>org.hsqldb</groupId>
+++++      <artifactId>hsqldb</artifactId>
+++++      <version>2.0.0</version>
+++++    </dependency>
+++++    <dependency>
+++++      <groupId>org.exoplatform.jcr</groupId>
+++++      <artifactId>exo.jcr.component.ext</artifactId>
+++++      <version>1.14.0-CR2</version>
+++++      <scope>provided</scope>
+++++    </dependency>
+++++    <dependency>
+++++      <groupId>junit</groupId>
+++++      <artifactId>junit</artifactId>
+++++      <version>3.8.1</version>
+++++      <scope>test</scope>
+++++    </dependency>
+++++    <dependency>
+++++      <groupId>org.exoplatform.kernel</groupId>
+++++      <artifactId>exo.kernel.component.cache</artifactId>
+++++      <version>2.3.0-CR2</version>
+++++      <scope>provided</scope>
+++++    </dependency>
+++++    <dependency>
+++++      <groupId>org.slf4j</groupId>
+++++      <artifactId>slf4j-log4j12</artifactId>
+++++      <version>1.5.8</version>
+++++      <scope>test</scope>
+++++    </dependency>
+++++    <dependency>
+++++      <groupId>org.exoplatform.ws</groupId>
+++++      <artifactId>exo.ws.rest.core</artifactId>
+++++      <version>2.2.0-CR2</version>
+++++      <scope>provided</scope>
+++++    </dependency>
+++++  </dependencies>
+++++</project>
++++diff --git a/src/main/java/exoplatform/BookNodeTypes.java b/src/main/java/exoplatform/BookNodeTypes.java
++++new file mode 100644
++++index 0000000..1cc8a6a
++++--- /dev/null
+++++++ b/src/main/java/exoplatform/BookNodeTypes.java
++++@@ -0,0 +1,45 @@
+++++/*
+++++ * Copyright (C) 2003-2012 eXo Platform SAS.
+++++ *
+++++ * This program is free software: you can redistribute it and/or modify
+++++ * it under the terms of the GNU Affero General Public License as published by
+++++ * the Free Software Foundation, either version 3 of the License, or
+++++ * (at your option) any later version.
+++++ *
+++++ * This program is distributed in the hope that it will be useful,
+++++ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+++++ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+++++ * GNU Affero General Public License for more details.
+++++ *
+++++ * You should have received a copy of the GNU Affero General Public License
+++++ * along with this program. If not, see <http://www.gnu.org/licenses/>.
+++++ */
+++++package exoplatform;
+++++
+++++/**
+++++ * Created by The eXo Platform SAS
+++++ * Author : BinhNV
+++++ *          binhnv@exoplatform.com
+++++ * Jul 5, 2012  
+++++ */
+++++public interface BookNodeTypes {
+++++
+++++  /* define parent node of book */
+++++  public static final String EXO_BOOK = "exostore:book";
+++++  /* exostore:bookname is a property of exostore:book */
+++++  public static final String EXO_BOOK_NAME = "exostore:bookname";
+++++  /* exostore:bookcategory is a property of exostore:book */
+++++  public static final String EXO_BOOK_CATEGORY = "exostore:bookcategory";
+++++  /* exostore:bookcontent is a property of exostore:book */
+++++  public static final String EXO_BOOK_CONTENT = "exostore:bookcontent";
+++++  
+++++  /* define parent node of author */
+++++  public static final String EXO_AUTHOR = "exostore:author";
+++++  /* exostore:authorname is a property of exostore:author */
+++++  public static final String EXO_AUTHOR_NAME = "exostore:authorname";
+++++  /* exostore:authoraddress is a property of exostore:author */
+++++  public static final String EXO_AUTHOR_ADDRESS = "exostore:authoraddress";
+++++  /* exostore:authorphone is a property of exostore:author */
+++++  public static final String EXO_AUTHOR_PHONE = "exostore:authorphone";
+++++  
+++++}
++++diff --git a/src/main/java/exoplatform/BookStoreService.java b/src/main/java/exoplatform/BookStoreService.java
++++new file mode 100644
++++index 0000000..5c265d5
++++--- /dev/null
+++++++ b/src/main/java/exoplatform/BookStoreService.java
++++@@ -0,0 +1,221 @@
+++++/*
+++++ * Copyright (C) 2003-2012 eXo Platform SAS.
+++++ *
+++++ * This program is free software: you can redistribute it and/or modify
+++++ * it under the terms of the GNU Affero General Public License as published by
+++++ * the Free Software Foundation, either version 3 of the License, or
+++++ * (at your option) any later version.
+++++ *
+++++ * This program is distributed in the hope that it will be useful,
+++++ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+++++ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+++++ * GNU Affero General Public License for more details.
+++++ *
+++++ * You should have received a copy of the GNU Affero General Public License
+++++ * along with this program. If not, see <http://www.gnu.org/licenses/>.
+++++ */
+++++package exoplatform;
+++++
+++++import java.io.Serializable;
+++++import java.util.ArrayList;
+++++import java.util.List;
+++++
+++++import javax.jcr.RepositoryException;
+++++
+++++import org.exoplatform.services.cache.CacheService;
+++++import org.exoplatform.services.cache.ExoCache;
+++++import org.exoplatform.services.jcr.RepositoryService;
+++++import org.exoplatform.services.log.ExoLogger;
+++++import org.exoplatform.services.log.Log;
+++++import org.picocontainer.Startable;
+++++
+++++import exoplatform.entity.Author;
+++++import exoplatform.entity.Book;
+++++import exoplatform.entity.Book.CATEGORY;
+++++import exoplatform.exception.DuplicateBookException;
+++++import exoplatform.utils.Utils;
+++++
+++++/**
+++++ * Created by The eXo Platform SAS
+++++ * Author : BinhNV
+++++ *          binhnv@exoplatform.com
+++++ * Jul 6, 2012  
+++++ */
+++++public class BookStoreService implements Startable {
+++++
+++++  /* Define a exo log */
+++++  private static final Log log = ExoLogger.getLogger(BookStoreService.class);
+++++  /* Define a exo cache */
+++++  private ExoCache<Serializable, Book> cache;
+++++  /* Define a JCRDataStore object */
+++++  private JCRDataStorage jcrDataStorage;
+++++  
+++++  /**
+++++   * BookStoreService constructor
+++++   * @param rservice
+++++   * @param cacheService
+++++   * @param dataStorage
+++++   * @throws RepositoryException
+++++   * @throws DuplicateBookException 
+++++   */
+++++  public BookStoreService(RepositoryService rservice,
+++++                          CacheService cacheService,
+++++                          JCRDataStorage dataStorage) throws RepositoryException,
+++++      DuplicateBookException {
+++++    this.cache = cacheService.getCacheInstance(getClass().getName());
+++++    this.jcrDataStorage = dataStorage;
+++++  }
+++++
+++++  /**
+++++   * The function init data for datastorage
+++++   */
+++++  public void start() {
+++++    jcrDataStorage.init();
+++++//    List<Book> books = new ArrayList<Book>(); 
+++++//    try {
+++++//      addBook("The Mask", CATEGORY.NOVEL, "Test");
+++++//    } catch (DuplicateBookException e) {
+++++//      // TODO Auto-generated catch block
+++++//      e.printStackTrace();
+++++//    }
+++++    addMultiBook();
+++++    addMultiAuthor();
+++++//    books = searchBookByNameLikeXPath("Holme");
+++++//    if (books != null && books.size() > 0) {
+++++//      for (Book book : books) {
+++++//        System.out.println("+ ================================================================== +");
+++++//        System.out.println("+                        book id : " + book.getId() + "              +");
+++++//        System.out.println("+                        book name : " + book.getName() + "              +");
+++++//        System.out.println("+                        book category : " + Utils.bookCategoryEnumToString(book.getCategory()) + "              +");
+++++//        System.out.println("+                        book content : " + book.getContent() + "              +");
+++++//        System.out.println("+ ================================================================== +");
+++++//      }
+++++//    }
+++++  }
+++++
+++++  /* (non-Javadoc)
+++++   * @see org.picocontainer.Startable#stop()
+++++   */
+++++  public void stop() {
+++++
+++++  }
+++++  
+++++  /**
+++++   * This function support for add new book to datastorage
+++++   * 
+++++   * @param bookName
+++++   * @param category
+++++   * @param content
+++++   * @return
+++++   * @throws DuplicateBookException
+++++   */
+++++  public Book addBook(String bookName, CATEGORY category, String content) throws DuplicateBookException {
+++++    Book book = new Book(bookName, category, content);
+++++    return jcrDataStorage.addBook(book);
+++++  }
+++++  
+++++  /**
+++++   * 
+++++   * @param authorName
+++++   * @param authorAddress
+++++   * @param authorPhone
+++++   * @return
+++++   */
+++++  public Author addAuthor(String authorName, String authorAddress, String authorPhone) {
+++++    Author author = new Author(authorName, authorAddress, authorPhone);
+++++    return jcrDataStorage.addAuthor(author);
+++++  }
+++++  
+++++  /**
+++++   * This function support for add multi book to datastorage
+++++   */
+++++  public void addMultiAuthor() {
+++++      addAuthor("Conan Doyle", "England", "123456789");
+++++      addAuthor("JK Rowling", "England", "987654321");
+++++      addAuthor("Sydney Sheldon", "US", "678912345");
+++++      addAuthor("Mario Puzzo", "Italia", "012345678");
+++++      addAuthor("Ma Van Khang", "Vietnam", "23451234");
+++++      addAuthor("Victor Huygo", "France", "8760985544");
+++++  } 
+++++  
+++++  /**
+++++   * This function support for add multi book to datastorage
+++++   */
+++++  public void addMultiBook() {
+++++    try {
+++++      addBook("Shelock Holme", CATEGORY.NOVEL, "The sign of the Four");
+++++      addBook("Alice in wonder land", CATEGORY.COMICS, "Alice in wonder land");
+++++      addBook("Seal team six", CATEGORY.NOVEL, "Seal team six");
+++++      addBook("Hibernate in action", CATEGORY.TECHNICAL, "Hibernate");
+++++      addBook("Napoleon", CATEGORY.HISTORY, "Napoleon");
+++++      addBook("Jouney to the West", CATEGORY.COMICS, "Jouney to the West");
+++++    } catch (DuplicateBookException e) {
+++++      e.printStackTrace();
+++++    }
+++++  } 
+++++  
+++++  /**
+++++   * The function support for search book by name(using SQL)
+++++   * 
+++++   * @param name The name of book
+++++   * @return
+++++   */
+++++  public List<Book> searchBookByNameSQL(String name) {
+++++    return jcrDataStorage.searchBookByNameSQL(name);
+++++  }
+++++  
+++++  /**
+++++   * The function support for search book by name(using XPath)
+++++   * 
+++++   * @param name The name of book
+++++   * @return
+++++   */
+++++  public List<Book> searchBookByNameXPath(String name) {
+++++    return jcrDataStorage.searchBookByNameXPath(name);
+++++  }
+++++  
+++++  /**
+++++   * The function support for search book by name but limit amount of records(using SQL)
+++++   * 
+++++   * @param name The name of book
+++++   * @return
+++++   */
+++++  public List<Book> searchBookByNameLimitSQL(String name) {
+++++    return jcrDataStorage.searchBookByNameLimitSQL(name);
+++++  }
+++++  
+++++  /**
+++++   * The function support search book by name with like condition(using SQL)
+++++   * 
+++++   * @param name The name of book
+++++   * @return
+++++   */
+++++  public List<Book> searchBookByNameLikeSQL(String name) {
+++++    return jcrDataStorage.searchBookByNameLikeSQL(name);
+++++  }
+++++  
+++++  /**
+++++   * The function support search book by name with like condition(using XPath)
+++++   * 
+++++   * @param name The name of book
+++++   * @return
+++++   */
+++++  public List<Book> searchBookByNameLikeXPath(String name) {
+++++    return jcrDataStorage.searchBookByNameLikeSQL(name);
+++++  }
+++++  
+++++  /**
+++++   * The function support get book by book's id
+++++   * 
+++++   * @param id The id of book
+++++   * @return
+++++   */
+++++  public Book getBook(String id) {
+++++    Book book = cache.get(id);
+++++    if (book != null) {
+++++      return book;
+++++    }
+++++    return jcrDataStorage.getBook(id);
+++++  }
+++++
+++++}
++++diff --git a/src/main/java/exoplatform/JCRDataStorage.java b/src/main/java/exoplatform/JCRDataStorage.java
++++new file mode 100644
++++index 0000000..ef23941
++++--- /dev/null
+++++++ b/src/main/java/exoplatform/JCRDataStorage.java
++++@@ -0,0 +1,541 @@
+++++/*
+++++ * Copyright (C) 2003-2012 eXo Platform SAS.
+++++ *
+++++ * This program is free software: you can redistribute it and/or modify
+++++ * it under the terms of the GNU Affero General Public License as published by
+++++ * the Free Software Foundation, either version 3 of the License, or
+++++ * (at your option) any later version.
+++++ *
+++++ * This program is distributed in the hope that it will be useful,
+++++ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+++++ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+++++ * GNU Affero General Public License for more details.
+++++ *
+++++ * You should have received a copy of the GNU Affero General Public License
+++++ * along with this program. If not, see <http://www.gnu.org/licenses/>.
+++++ */
+++++package exoplatform;
+++++
+++++import java.util.ArrayList;
+++++import java.util.List;
+++++
+++++import javax.jcr.Node;
+++++import javax.jcr.NodeIterator;
+++++import javax.jcr.PathNotFoundException;
+++++import javax.jcr.RepositoryException;
+++++import javax.jcr.Session;
+++++import javax.jcr.query.Query;
+++++import javax.jcr.query.QueryManager;
+++++import javax.jcr.query.QueryResult;
+++++
+++++import org.apache.commons.lang.StringUtils;
+++++import org.exoplatform.services.jcr.RepositoryService;
+++++import org.exoplatform.services.jcr.core.ManageableRepository;
+++++import org.exoplatform.services.jcr.ext.common.SessionProvider;
+++++import org.exoplatform.services.jcr.impl.core.query.QueryImpl;
+++++import org.exoplatform.services.log.ExoLogger;
+++++import org.exoplatform.services.log.Log;
+++++
+++++import exoplatform.entity.Author;
+++++import exoplatform.entity.Book;
+++++import exoplatform.exception.BookNotFoundException;
+++++import exoplatform.exception.DuplicateBookException;
+++++import exoplatform.utils.PropertyReader;
+++++import exoplatform.utils.Utils;
+++++
+++++/**
+++++ * Created by The eXo Platform SAS
+++++ * Author : BinhNV
+++++ *          binhnv@exoplatform.com
+++++ * Jul 6, 2012  
+++++ */
+++++public class JCRDataStorage {
+++++
+++++  /* Define a exo log */
+++++  private static final Log log = ExoLogger.getLogger(JCRDataStorage.class);
+++++  /* Define a constant of parent path */
+++++  public static final String DEFAULT_PARENT_PATH = "/exostore:bookstore";
+++++  public static final String DEFAULT_PARENT_BOOK_PATH = "/exostore:book";
+++++  public static final String DEFAULT_PARENT_AUTHOR_PATH = "/exostore:author";
+++++  public static final String DEFAULT_WORKSPACE_NAME = "bookstore";
+++++  /* Define a RepositoryService which support integrate with repository */
+++++  private RepositoryService repoService;
+++++  
+++++  /**
+++++   * JCRDataStorage constructor
+++++   * @param repositoryService
+++++   */
+++++  public JCRDataStorage(RepositoryService repositoryService) {
+++++      this.repoService = repositoryService;
+++++  }
+++++  
+++++  /**
+++++   * The function prepare node and data for repository
+++++   */
+++++  public void init() {
+++++    /* create SessionProvider */
+++++    SessionProvider sProvider = SessionProvider.createSystemProvider();
+++++    Node node = null;
+++++    try {
+++++      /* if node exist, get node from parent path */
+++++      node = getNodeByPath(DEFAULT_PARENT_PATH, sProvider);
+++++    } catch (PathNotFoundException e) {
+++++      /*if node doesn't exist, create new node */
+++++      try {
+++++        /* get node */
+++++        node = getNodeByPath(DEFAULT_PARENT_PATH, sProvider);
+++++        node.getSession().save();
+++++      } catch (RepositoryException re) {
+++++        log.error("Failed to init BookStore jcr node's path", re);
+++++      }
+++++    } catch (RepositoryException e) {
+++++      log.error("Failed to init BookStore jcr node's path", e);
+++++    } finally {
+++++      sProvider.close();
+++++    }
+++++  }
+++++  
+++++  /**
+++++   * The function support for get node from path  
+++++   * 
+++++   * @param nodePath The path of node by String type
+++++   * @param sessionProvider The session 
+++++   * @return The node
+++++   * @throws RepositoryException
+++++   */
+++++  private Node getNodeByPath(String nodePath, SessionProvider sessionProvider) throws RepositoryException {
+++++    return (Node) getSession(sessionProvider).getItem(nodePath);
+++++  }
+++++  
+++++  /**
+++++   * The function get session provider and return a session of workspace
+++++   * 
+++++   * @param sessionProvider
+++++   * @return The session
+++++   * @throws RepositoryException
+++++   */
+++++  private Session getSession(SessionProvider sessionProvider) throws RepositoryException {
+++++    ManageableRepository currentRepo = repoService.getCurrentRepository();
+++++    return sessionProvider.getSession(DEFAULT_WORKSPACE_NAME, currentRepo);
+++++  }
+++++  
+++++  /**
+++++   * The function support for get book by book id
+++++   * 
+++++   * @param id The id of book
+++++   * @return Book
+++++   */
+++++  public Book getBook(String id) {
+++++    SessionProvider sProvider = SessionProvider.createSystemProvider();
+++++    try {
+++++      Node node = getNodeByPath(DEFAULT_PARENT_PATH + "/" + id, sProvider);
+++++      return createBookByNode(node);
+++++    } catch (PathNotFoundException pe) {
+++++      return null;
+++++    } catch (RepositoryException re) {
+++++      log.error("Can not find this book", re);
+++++      return null;
+++++    } finally {
+++++      sProvider.close();
+++++    }
+++++  }
+++++  
+++++  /**
+++++   * The function which add new book to workspace
+++++   * 
+++++   * @param book The new book which want to add
+++++   * @return Book
+++++   * @throws DuplicateBookException
+++++   */
+++++  public Book addBook(Book book) throws DuplicateBookException {
+++++    System.out.println("+ ========================================================================== +");
+++++    System.out.println("+                         add book function                                  +");
+++++    System.out.println("+ ========================================================================== +");
+++++    SessionProvider sProvider = SessionProvider.createSystemProvider();
+++++    /* Check exist of book */
+++++    if (isExistBookName(book.getName(), sProvider)) {
+++++      throw new DuplicateBookException(String.format("Book %s is existed", book.getName()));
+++++    }
+++++    
+++++    /* get id and set to new book */
+++++    book.setId(Utils.bookId++);
+++++    
+++++    try {
+++++      /* execute set data to node and save to workspace */
+++++      Node parentNode = getNodeByPath(DEFAULT_PARENT_PATH + DEFAULT_PARENT_BOOK_PATH, sProvider);
+++++      System.out.println("+ ========================================================================== +");
+++++      System.out.println("+                         " + parentNode.getPath() + "                       +");
+++++      System.out.println("+ ========================================================================== +");
+++++      Node bookNode = parentNode.addNode("" + book.getId(), BookNodeTypes.EXO_BOOK);
+++++      bookNode.setProperty(BookNodeTypes.EXO_BOOK_NAME, book.getName());
+++++      bookNode.setProperty(BookNodeTypes.EXO_BOOK_CATEGORY, Utils.bookCategoryEnumToString(book.getCategory()));
+++++      bookNode.setProperty(BookNodeTypes.EXO_BOOK_CONTENT, book.getContent());
+++++      parentNode.getSession().save();
+++++      return book;
+++++    } catch (PathNotFoundException e) {
+++++      System.out.println("+ ========================================================================== +");
+++++      System.out.println("+                         Path not found exception                           +");
+++++      System.out.println("+ ========================================================================== +");
+++++      return null;
+++++    } catch (RepositoryException e) {
+++++      log.error("Failed to add book", e);
+++++      System.out.println("+ ========================================================================== +");
+++++      System.out.println("+                              Repository exception                          +");
+++++      System.out.println("+ ========================================================================== +");
+++++      return null;
+++++    } finally {
+++++      sProvider.close();
+++++    }
+++++  }
+++++  
+++++  public Author addAuthor(Author author) {
+++++    SessionProvider sProvider = SessionProvider.createSystemProvider();
+++++    author.setId(Utils.authorId++);
+++++    try {
+++++      Node parentNode = getNodeByPath(DEFAULT_PARENT_PATH + DEFAULT_PARENT_AUTHOR_PATH, sProvider);
+++++      Node authorNode = parentNode.addNode("" + author.getId(), BookNodeTypes.EXO_AUTHOR);
+++++      authorNode.setProperty(BookNodeTypes.EXO_AUTHOR_NAME, author.getName());
+++++      authorNode.setProperty(BookNodeTypes.EXO_AUTHOR_ADDRESS, author.getAddress());
+++++      authorNode.setProperty(BookNodeTypes.EXO_AUTHOR_PHONE, author.getPhone());
+++++      parentNode.getSession().save();
+++++      return author;
+++++    } catch (RepositoryException re) {
+++++      log.error("Failed to add author", re);
+++++      return null;
+++++    } finally {
+++++      sProvider.close();
+++++    }
+++++  }
+++++  
+++++  /**
+++++   * The function support delete a book by book id
+++++   * 
+++++   * @param id The id of book
+++++   * @throws BookNotFoundException
+++++   */
+++++  public void deleteBook(String id) throws BookNotFoundException {
+++++    SessionProvider sProvider = SessionProvider.createSystemProvider();
+++++    try {
+++++      Node node = getNodeByPath(DEFAULT_PARENT_PATH + "/" + id, sProvider);
+++++      node.remove();
+++++      node.getSession().save();
+++++    } catch (PathNotFoundException pe) {
+++++        throw new BookNotFoundException(String.format("Book %s is not found", id));
+++++    } catch (RepositoryException re) {
+++++      log.error("Failed to delete book by id", re);
+++++    } finally {
+++++      sProvider.close();
+++++    }
+++++  }
+++++  
+++++  /**
+++++   * The function support delete all of book in workspace
+++++   */
+++++  public void deleteAll() {
+++++    SessionProvider sProvider = SessionProvider.createSystemProvider();
+++++    try {
+++++      Node parentNode = getNodeByPath(DEFAULT_PARENT_PATH, sProvider);
+++++      parentNode.remove();
+++++      parentNode.getSession().save();
+++++    } catch (PathNotFoundException pe) {
+++++      log.error("Failed to delete all book", pe);
+++++    } catch (RepositoryException e) {
+++++      log.error("Failed to delete all book", e);
+++++    } finally {
+++++      sProvider.close();
+++++    }
+++++  }
+++++  
+++++  /**
+++++   * The function support edit a exist book
+++++   * 
+++++   * @param book The book want to delete
+++++   * @throws BookNotFoundException
+++++   */
+++++  public void editBook(Book book) throws BookNotFoundException {
+++++    SessionProvider sProvider = SessionProvider.createSystemProvider();
+++++    try {
+++++      /* execute modify data and set to workspace */
+++++      Node node = getNodeByPath(DEFAULT_PARENT_PATH + "/" + book.getId(), sProvider);
+++++      node.setProperty(BookNodeTypes.EXO_BOOK_NAME, book.getName());
+++++      node.setProperty(BookNodeTypes.EXO_BOOK_CONTENT, book.getContent());
+++++      node.setProperty(BookNodeTypes.EXO_BOOK_CATEGORY, Utils.bookCategoryEnumToString(book.getCategory()));
+++++      node.getSession().save();
+++++    } catch (RepositoryException re) {
+++++      log.error(String.format("Book %s is not found", book.getId()), re);
+++++      throw new BookNotFoundException(String.format("Book %s is not found", book.getId()));
+++++    } finally {
+++++      sProvider.close();
+++++    }
+++++  }
+++++  
+++++  /**
+++++   * The function support get all book in workspace 
+++++   * 
+++++   * @return List<Book>
+++++   */
+++++  public List<Book> getAllBook() {
+++++    /* create query string */
+++++    StringBuffer sb = new StringBuffer("Select * from " + BookNodeTypes.EXO_BOOK);
+++++    SessionProvider sProvider = SessionProvider.createSystemProvider();
+++++    try {
+++++      /* create QueryManager from session */
+++++      QueryManager queryManager = getSession(sProvider).getWorkspace().getQueryManager();
+++++      /* create Query object */
+++++      Query query = queryManager.createQuery(sb.toString(), Query.SQL);
+++++      /* execute query and return result to QueryResult */
+++++      QueryResult result = query.execute();
+++++      /* transfer data to NodeIterator */
+++++      NodeIterator nodes = result.getNodes();
+++++      List<Book> books = new ArrayList<Book>();
+++++      while (nodes.hasNext()) {
+++++        Node node = nodes.nextNode();
+++++        books.add(createBookByNode(node));
+++++      }
+++++      return books;
+++++    } catch (RepositoryException re) {
+++++      log.error("Can not find book", re);
+++++      return null;
+++++    } finally {
+++++      sProvider.close();
+++++    }
+++++  }
+++++  
+++++  /**
+++++   * The function support search book by name(using SQL)
+++++   * 
+++++   * @param name The name of book
+++++   * @return List<Book>
+++++   */
+++++  public List<Book> searchBookByNameSQL(String name) {
+++++    /* replace "" sign and - sign */
+++++    name = name.replaceAll("\"", "\\\"").replaceAll("-", StringUtils.EMPTY);
+++++    /* create query string */
+++++    StringBuffer sb = new StringBuffer("Select * from " + BookNodeTypes.EXO_BOOK);
+++++    sb.append(" where " + BookNodeTypes.EXO_BOOK_NAME + " = '" + name + "'");
+++++    SessionProvider sProvider = SessionProvider.createSystemProvider();
+++++    try {
+++++      /* create QueryManager from session */
+++++      QueryManager queryManager = getSession(sProvider).getWorkspace().getQueryManager();
+++++      /* create Query object */
+++++      Query query = queryManager.createQuery(sb.toString(), Query.SQL);
+++++      /* execute query and return result to QueryResult */
+++++      QueryResult result = query.execute();
+++++      /* transfer data to NodeIterator */
+++++      NodeIterator nodes = result.getNodes();
+++++      List<Book> books = new ArrayList<Book>();
+++++      while (nodes.hasNext()) {
+++++        Node node = nodes.nextNode();
+++++        Book book = createBookByNode(node);
+++++        books.add(book);
+++++      }
+++++      return books;
+++++    } catch (RepositoryException re) {
+++++      log.error("Can not find book", re);
+++++      return null;
+++++    } finally {
+++++      sProvider.close();
+++++    }
+++++  }
+++++  
+++++  /**
+++++   * The function support search book by name(using XPath)
+++++   * 
+++++   * @param name The name of book
+++++   * @return List<Book>
+++++   */
+++++  public List<Book> searchBookByNameXPath(String name) {
+++++    /* replace "" sign and - sign */
+++++    name = name.replaceAll("\"", "\\\"").replaceAll("-", StringUtils.EMPTY);
+++++    /* create query string */
+++++    StringBuffer sb = new StringBuffer("//element(*," + BookNodeTypes.EXO_BOOK + ")[@"
+++++        + BookNodeTypes.EXO_BOOK_NAME + "='" + name + "']/@" + BookNodeTypes.EXO_BOOK_NAME);
+++++    SessionProvider sProvider = SessionProvider.createSystemProvider();
+++++    try {
+++++      /* create QueryManager from session */
+++++      QueryManager queryManager = getSession(sProvider).getWorkspace().getQueryManager();
+++++      /* create Query object */
+++++      Query query = queryManager.createQuery(sb.toString(), Query.XPATH);
+++++      /* execute query and return result to QueryResult */
+++++      QueryResult result = query.execute();
+++++      /* transfer data to NodeIterator */
+++++      NodeIterator nodes = result.getNodes();
+++++      List<Book> books = new ArrayList<Book>();
+++++      while (nodes.hasNext()) {
+++++        Node node = nodes.nextNode();
+++++        books.add(createBookByNode(node));
+++++      }
+++++      return books;
+++++    } catch (RepositoryException re) {
+++++      log.error("Can not find book", re);
+++++      return null;
+++++    } finally {
+++++      sProvider.close();
+++++    }
+++++  }
+++++  
+++++  /**
+++++   * The function support search book by name with limit of result(using SQL)
+++++   * 
+++++   * @param name The name of book
+++++   * @return List<Book>
+++++   */
+++++  public List<Book> searchBookByNameLimitSQL(String name) {
+++++    /* replace "" sign and - sign */
+++++    name = name.replaceAll("\"", "\\\"").replaceAll("-", StringUtils.EMPTY);
+++++    /* create query string */
+++++    StringBuffer sb = new StringBuffer("Select * from " + BookNodeTypes.EXO_BOOK);
+++++    SessionProvider sProvider = SessionProvider.createSystemProvider();
+++++    try {
+++++      /* create QueryManager from session */
+++++      QueryManager queryManager = getSession(sProvider).getWorkspace().getQueryManager();
+++++      /* create QueryImpl object */
+++++      QueryImpl query = (QueryImpl) queryManager.createQuery(sb.toString(), QueryImpl.SQL);
+++++      /* set offset(which first record will be get) */
+++++      query.setOffset(2);
+++++      /* set limit(how many record will be get after offset) */
+++++      query.setLimit(3);
+++++      /* execute query and return result to QueryResult */
+++++      QueryResult result = query.execute();
+++++      /* transfer data to NodeIterator */
+++++      NodeIterator nodes = result.getNodes();
+++++      List<Book> books = new ArrayList<Book>();
+++++      while (nodes.hasNext()) {
+++++        Node node = nodes.nextNode();
+++++        books.add(createBookByNode(node));
+++++      }
+++++      return books;
+++++    } catch (RepositoryException re) {
+++++      log.error("Can not find book", re);
+++++      return null;
+++++    } finally {
+++++      sProvider.close();
+++++    }
+++++  }
+++++  
+++++  /**
+++++   * The function support search book by name with like condition(using SQL)
+++++   * 
+++++   * @param name The name of book
+++++   * @return List<Book>
+++++   */
+++++  public List<Book> searchBookByNameLikeSQL(String name) {
+++++    /* replace "" sign and - sign */
+++++    name.replaceAll("\"", "\\\"").replaceAll("-", StringUtils.EMPTY);
+++++    /* create query string */
+++++    StringBuffer sb = new StringBuffer("Select * from " + BookNodeTypes.EXO_BOOK);
+++++    sb.append(" where " + BookNodeTypes.EXO_BOOK_NAME + " like '%" + name + "%'");
+++++    SessionProvider sProvider = SessionProvider.createSystemProvider();
+++++    try {
+++++      /* create QueryManager from session */
+++++      QueryManager queryManager = getSession(sProvider).getWorkspace().getQueryManager();
+++++      /* create Query object */
+++++      Query query = queryManager.createQuery(sb.toString(), Query.SQL);
+++++      /* execute query and return result to QueryResult */
+++++      QueryResult result = query.execute();
+++++      /* transfer data to NodeIterator */
+++++      NodeIterator nodes = result.getNodes();
+++++      List<Book> books = new ArrayList<Book>();
+++++      while (nodes.hasNext()) {
+++++        Node node = nodes.nextNode();
+++++        books.add(createBookByNode(node));        
+++++      }
+++++      return books;
+++++    } catch (RepositoryException re) {
+++++      log.error("Can not find book", re);
+++++      return null;
+++++    } finally {
+++++      sProvider.close();
+++++    }
+++++  }
+++++  
+++++  /**
+++++   * The function support search book by name with like condition(using XPath)
+++++   * 
+++++   * @param name The name of book
+++++   * @return List<Book>
+++++   */
+++++  public List<Book> searchBookByNameLikeXPath(String name) {
+++++    /* replace "" sign and - sign */
+++++    name.replaceAll("\"", "\\\"").replaceAll("-", StringUtils.EMPTY);
+++++    /* create query string */
+++++    StringBuffer sb = new StringBuffer("//element(*," + BookNodeTypes.EXO_BOOK + ")[jcr:like(@"
+++++        + BookNodeTypes.EXO_BOOK_NAME + ",'%" + name + "%')]");
+++++    SessionProvider sProvider = SessionProvider.createSystemProvider();
+++++    try {
+++++      /* create QueryManager from session */
+++++      QueryManager queryManager = getSession(sProvider).getWorkspace().getQueryManager();
+++++      /* create Query object */
+++++      Query query = queryManager.createQuery(sb.toString(), Query.XPATH);
+++++      /* execute query and return result to QueryResult */
+++++      QueryResult result = query.execute();
+++++      /* transfer data to NodeIterator */
+++++      NodeIterator nodes = result.getNodes();
+++++      List<Book> books = new ArrayList<Book>();
+++++      while (nodes.hasNext()) {
+++++        Node node = nodes.nextNode();
+++++        books.add(createBookByNode(node));        
+++++      }
+++++      return books;
+++++    } catch (RepositoryException re) {
+++++      log.error("Can not find book", re);
+++++      return null;
+++++    } finally {
+++++      sProvider.close();
+++++    }
+++++  }
+++++  
+++++  /**
+++++   * The function check book exist by name
+++++   * 
+++++   * @param bookName The name of book
+++++   * @param sProvider
+++++   * @return boolean
+++++   */
+++++  private boolean isExistBookName(String bookName, SessionProvider sProvider) {
+++++    /* replace "" sign and - sign */
+++++    bookName.replace("\"", "\\\"").replaceAll("-", StringUtils.EMPTY);
+++++    /* create query string */
+++++    StringBuffer queryString = new StringBuffer("select * from " + BookNodeTypes.EXO_BOOK);
+++++    queryString.append(" where " + BookNodeTypes.EXO_BOOK_NAME + " = '" + bookName + "'");
+++++    try {
+++++      /* create QueryManager from session */
+++++      QueryManager queryManager = getSession(sProvider).getWorkspace().getQueryManager();
+++++      /* create Query object */
+++++      Query query = queryManager.createQuery(queryString.toString(), Query.SQL);
+++++      /* execute query and return result to QueryResult */
+++++      QueryResult result = query.execute();
+++++      /* transfer data to NodeIterator */
+++++      NodeIterator iterator = result.getNodes();
+++++      return iterator.hasNext();
+++++    } catch (RepositoryException re) {
+++++      log.error("Failed to check exist book name", re);
+++++      return false;
+++++    }
+++++  }
+++++  
+++++  /**
+++++   * Create book by node data
+++++   * 
+++++   * @param node
+++++   * @return
+++++   * @throws RepositoryException
+++++   */
+++++  private Book createBookByNode(Node node) throws RepositoryException {
+++++    if (node != null) {
+++++      Book book = new Book();
+++++      try {
+++++        book.setId(Integer.valueOf(node.getName()));
+++++      } catch (Exception e) {
+++++        return null;
+++++      }
+++++      PropertyReader reader = new PropertyReader(node);
+++++      book.setCategory(Utils.bookCategoryStringToEnum(reader.string(BookNodeTypes.EXO_BOOK_CATEGORY)));
+++++      book.setName(reader.string(BookNodeTypes.EXO_BOOK_NAME));
+++++      book.setContent(reader.string(BookNodeTypes.EXO_BOOK_CONTENT));
+++++      return book;
+++++    }
+++++    return null;
+++++  }
+++++  
+++++}
++++diff --git a/src/main/java/exoplatform/entity/Author.java b/src/main/java/exoplatform/entity/Author.java
++++new file mode 100644
++++index 0000000..06c5a07
++++--- /dev/null
+++++++ b/src/main/java/exoplatform/entity/Author.java
++++@@ -0,0 +1,108 @@
+++++/*
+++++ * Copyright (C) 2003-2012 eXo Platform SAS.
+++++ *
+++++ * This program is free software: you can redistribute it and/or modify
+++++ * it under the terms of the GNU Affero General Public License as published by
+++++ * the Free Software Foundation, either version 3 of the License, or
+++++ * (at your option) any later version.
+++++ *
+++++ * This program is distributed in the hope that it will be useful,
+++++ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+++++ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+++++ * GNU Affero General Public License for more details.
+++++ *
+++++ * You should have received a copy of the GNU Affero General Public License
+++++ * along with this program. If not, see <http://www.gnu.org/licenses/>.
+++++ */
+++++package exoplatform.entity;
+++++
+++++/**
+++++ * Created by The eXo Platform SAS
+++++ * Author : BinhNV
+++++ *          binhnv@exoplatform.com
+++++ * Jul 13, 2012  
+++++ */
+++++public class Author {
+++++
+++++  private int id;
+++++  private String name;
+++++  private String address;
+++++  private String phone;
+++++  
+++++  /**
+++++   * Author constructor without param
+++++   */
+++++  public Author() {
+++++    
+++++  }
+++++  
+++++  /**
+++++   * Author constructor with param
+++++   * 
+++++   * @param name The name of author
+++++   * @param address The address of author
+++++   * @param phone The phone of author
+++++   */
+++++  public Author(String name, String address, String phone) {
+++++    this.name = name;
+++++    this.address = address;
+++++    this.phone = phone;
+++++  }
+++++
+++++  /**
+++++   * @return the id
+++++   */
+++++  public int getId() {
+++++    return id;
+++++  }
+++++
+++++  /**
+++++   * @param id the id to set
+++++   */
+++++  public void setId(int id) {
+++++    this.id = id;
+++++  }
+++++
+++++  /**
+++++   * @return the name
+++++   */
+++++  public String getName() {
+++++    return name;
+++++  }
+++++
+++++  /**
+++++   * @param name the name to set
+++++   */
+++++  public void setName(String name) {
+++++    this.name = name;
+++++  }
+++++
+++++  /**
+++++   * @return the address
+++++   */
+++++  public String getAddress() {
+++++    return address;
+++++  }
+++++
+++++  /**
+++++   * @param address the address to set
+++++   */
+++++  public void setAddress(String address) {
+++++    this.address = address;
+++++  }
+++++
+++++  /**
+++++   * @return the phone
+++++   */
+++++  public String getPhone() {
+++++    return phone;
+++++  }
+++++
+++++  /**
+++++   * @param phone the phone to set
+++++   */
+++++  public void setPhone(String phone) {
+++++    this.phone = phone;
+++++  }
+++++
+++++}
++++diff --git a/src/main/java/exoplatform/entity/Book.java b/src/main/java/exoplatform/entity/Book.java
++++new file mode 100644
++++index 0000000..8f5daff
++++--- /dev/null
+++++++ b/src/main/java/exoplatform/entity/Book.java
++++@@ -0,0 +1,112 @@
+++++/*
+++++ * Copyright (C) 2003-2012 eXo Platform SAS.
+++++ *
+++++ * This program is free software: you can redistribute it and/or modify
+++++ * it under the terms of the GNU Affero General Public License as published by
+++++ * the Free Software Foundation, either version 3 of the License, or
+++++ * (at your option) any later version.
+++++ *
+++++ * This program is distributed in the hope that it will be useful,
+++++ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+++++ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+++++ * GNU Affero General Public License for more details.
+++++ *
+++++ * You should have received a copy of the GNU Affero General Public License
+++++ * along with this program. If not, see <http://www.gnu.org/licenses/>.
+++++ */
+++++package exoplatform.entity;
+++++
+++++
+++++/**
+++++ * Created by The eXo Platform SAS
+++++ * Author : BinhNV
+++++ *          binhnv@exoplatform.com
+++++ * Jul 5, 2012  
+++++ */
+++++public class Book {
+++++
+++++  /* Define book category */
+++++  public enum CATEGORY {
+++++    NOVEL, MANGA, COMICS, TECHNICAL, MATHS, HISTORY
+++++  }
+++++  /* id of book */
+++++  private int id;
+++++  /* name of book */
+++++  private String name;
+++++  /*category of book*/
+++++  private CATEGORY category;
+++++  /* content of book */
+++++  private String content;
+++++  
+++++  /**
+++++   * Book constructor
+++++   * 
+++++   */
+++++  public Book() {
+++++    
+++++  }
+++++  
+++++  /**
+++++   * Book constructor
+++++   * 
+++++   * @param name The name of book
+++++   * @param category The category of book
+++++   * @param content The content of book
+++++   * 
+++++   */
+++++  public Book(String name, CATEGORY category, String content) {
+++++    this.name = name;
+++++    this.category = category;
+++++    this.content = content;
+++++  }
+++++  
+++++  /**
+++++   * @return the id
+++++   */
+++++  public int getId() {
+++++    return id;
+++++  }
+++++  /**
+++++   * @param id the id to set
+++++   */
+++++  public void setId(int id) {
+++++    this.id = id;
+++++  }
+++++  /**
+++++   * @return the name
+++++   */
+++++  public String getName() {
+++++    return name;
+++++  }
+++++  /**
+++++   * @param name the name to set
+++++   */
+++++  public void setName(String name) {
+++++    this.name = name;
+++++  }
+++++  /**
+++++   * @return the category
+++++   */
+++++  public CATEGORY getCategory() {
+++++    return category;
+++++  }
+++++  /**
+++++   * @param category the category to set
+++++   */
+++++  public void setCategory(CATEGORY category) {
+++++    this.category = category;
+++++  }
+++++  /**
+++++   * @return the content
+++++   */
+++++  public String getContent() {
+++++    return content;
+++++  }
+++++  /**
+++++   * @param content the content to set
+++++   */
+++++  public void setContent(String content) {
+++++    this.content = content;
+++++  }
+++++  
+++++}
++++diff --git a/src/main/java/exoplatform/exception/BookNotFoundException.java b/src/main/java/exoplatform/exception/BookNotFoundException.java
++++new file mode 100644
++++index 0000000..0276656
++++--- /dev/null
+++++++ b/src/main/java/exoplatform/exception/BookNotFoundException.java
++++@@ -0,0 +1,61 @@
+++++/*
+++++ * Copyright (C) 2003-2012 eXo Platform SAS.
+++++ *
+++++ * This program is free software: you can redistribute it and/or modify
+++++ * it under the terms of the GNU Affero General Public License as published by
+++++ * the Free Software Foundation, either version 3 of the License, or
+++++ * (at your option) any later version.
+++++ *
+++++ * This program is distributed in the hope that it will be useful,
+++++ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+++++ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+++++ * GNU Affero General Public License for more details.
+++++ *
+++++ * You should have received a copy of the GNU Affero General Public License
+++++ * along with this program. If not, see <http://www.gnu.org/licenses/>.
+++++ */
+++++package exoplatform.exception;
+++++
+++++/**
+++++ * Created by The eXo Platform SAS
+++++ * Author : BinhNV
+++++ *          binhnv@exoplatform.com
+++++ * Jul 5, 2012  
+++++ */
+++++public class BookNotFoundException extends Exception {
+++++
+++++  /**
+++++   * The serialVersionUID generate
+++++   */
+++++  private static final long serialVersionUID = -6563284439822341457L;
+++++
+++++  /**
+++++   * BookNotFoundException constructor
+++++   */
+++++  public BookNotFoundException() {
+++++    super();
+++++  }
+++++
+++++  /**
+++++   * @param message
+++++   */
+++++  public BookNotFoundException(String message) {
+++++    super(message);
+++++  }
+++++
+++++  /**
+++++   * @param cause
+++++   */
+++++  public BookNotFoundException(Throwable cause) {
+++++    super(cause);
+++++  }
+++++
+++++  /**
+++++   * @param message
+++++   * @param cause
+++++   */
+++++  public BookNotFoundException(String message, Throwable cause) {
+++++    super(message, cause);
+++++  }
+++++
+++++}
++++diff --git a/src/main/java/exoplatform/exception/DuplicateBookException.java b/src/main/java/exoplatform/exception/DuplicateBookException.java
++++new file mode 100644
++++index 0000000..85a2545
++++--- /dev/null
+++++++ b/src/main/java/exoplatform/exception/DuplicateBookException.java
++++@@ -0,0 +1,62 @@
+++++/*
+++++ * Copyright (C) 2003-2012 eXo Platform SAS.
+++++ *
+++++ * This program is free software: you can redistribute it and/or modify
+++++ * it under the terms of the GNU Affero General Public License as published by
+++++ * the Free Software Foundation, either version 3 of the License, or
+++++ * (at your option) any later version.
+++++ *
+++++ * This program is distributed in the hope that it will be useful,
+++++ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+++++ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+++++ * GNU Affero General Public License for more details.
+++++ *
+++++ * You should have received a copy of the GNU Affero General Public License
+++++ * along with this program. If not, see <http://www.gnu.org/licenses/>.
+++++ */
+++++package exoplatform.exception;
+++++
+++++/**
+++++ * Created by The eXo Platform SAS
+++++ * Author : BinhNV
+++++ *          binhnv@exoplatform.com
+++++ * Jul 5, 2012  
+++++ */
+++++public class DuplicateBookException extends Exception {
+++++
+++++  /**
+++++   * The serialVersionUID generate
+++++   * 
+++++   */
+++++  private static final long serialVersionUID = 5782743207363254715L;
+++++
+++++  /**
+++++   * DuplicateBookException constructor
+++++   */
+++++  public DuplicateBookException() {
+++++    super();
+++++  }
+++++
+++++  /**
+++++   * @param message
+++++   */
+++++  public DuplicateBookException(String message) {
+++++    super(message);
+++++  }
+++++
+++++  /**
+++++   * @param cause
+++++   */
+++++  public DuplicateBookException(Throwable cause) {
+++++    super(cause);
+++++  }
+++++
+++++  /**
+++++   * @param message
+++++   * @param cause
+++++   */
+++++  public DuplicateBookException(String message, Throwable cause) {
+++++    super(message, cause);
+++++  }
+++++
+++++}
++++diff --git a/src/main/java/exoplatform/utils/PropertyReader.java b/src/main/java/exoplatform/utils/PropertyReader.java
++++new file mode 100644
++++index 0000000..98018bb
++++--- /dev/null
+++++++ b/src/main/java/exoplatform/utils/PropertyReader.java
++++@@ -0,0 +1,186 @@
+++++/*
+++++ * Copyright (C) 2003-2012 eXo Platform SAS.
+++++ *
+++++ * This program is free software: you can redistribute it and/or modify
+++++ * it under the terms of the GNU Affero General Public License as published by
+++++ * the Free Software Foundation, either version 3 of the License, or
+++++ * (at your option) any later version.
+++++ *
+++++ * This program is distributed in the hope that it will be useful,
+++++ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+++++ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+++++ * GNU Affero General Public License for more details.
+++++ *
+++++ * You should have received a copy of the GNU Affero General Public License
+++++ * along with this program. If not, see <http://www.gnu.org/licenses/>.
+++++ */
+++++package exoplatform.utils;
+++++
+++++import java.util.ArrayList;
+++++import java.util.Date;
+++++import java.util.HashSet;
+++++import java.util.List;
+++++import java.util.Set;
+++++
+++++import javax.jcr.Node;
+++++import javax.jcr.RepositoryException;
+++++import javax.jcr.Value;
+++++
+++++/**
+++++ * Created by The eXo Platform SAS
+++++ * Author : BinhNV
+++++ *          binhnv@exoplatform.com
+++++ * Jul 6, 2012  
+++++ */
+++++public class PropertyReader {
+++++
+++++  Node node = null;
+++++  
+++++  /**
+++++   * PropertyReader constructor
+++++   * @param node 
+++++   * 
+++++   */
+++++  public PropertyReader(Node node) {
+++++    this.node = node;
+++++  }
+++++  
+++++  /**
+++++   * The function get property of node 
+++++   * and change to Double type 
+++++   * 
+++++   * @param name The name of node
+++++   * @return Double value
+++++   * @throws RepositoryException
+++++   */
+++++  public Double d(String name) throws RepositoryException {
+++++    return node.getProperty(name).getDouble();
+++++  }
+++++  
+++++  /**
+++++   * The function get property of node 
+++++   * and change to Long type
+++++   * 
+++++   * @param name The name of node
+++++   * @return Long value
+++++   * @throws RepositoryException
+++++   */
+++++  public Long l(String name) throws RepositoryException {
+++++    return node.getProperty(name).getLong();
+++++  }
+++++  
+++++  /**
+++++   * The function get property of node
+++++   * and change to String type
+++++   * 
+++++   * @param name The name of node
+++++   * @return String value
+++++   * @throws RepositoryException
+++++   */
+++++  public String string(String name) throws RepositoryException {
+++++    return node.getProperty(name).getString();
+++++  }
+++++  
+++++  /**
+++++   * The function get property of node
+++++   * and change to Date type
+++++   * 
+++++   * @param name The name of node
+++++   * @return Date value
+++++   * @throws RepositoryException
+++++   */
+++++  public Date date(String name) throws RepositoryException {
+++++    return node.getProperty(name).getDate().getTime();
+++++  }
+++++  
+++++  /**
+++++   * The function get property of node
+++++   * and change to Boolean type
+++++   * 
+++++   * @param name The name of node
+++++   * @return Boolean value
+++++   * @throws RepositoryException
+++++   */
+++++  public Boolean bool(String name) throws RepositoryException {
+++++    return node.getProperty(name).getBoolean();
+++++  }
+++++  
+++++  /**
+++++   * The function get value properties of node 
+++++   * and change to String array
+++++   * 
+++++   * @param name The name of node
+++++   * @return String array
+++++   * @throws RepositoryException
+++++   */
+++++  public String[] strings(String name) throws RepositoryException {
+++++      return valueToArray(node.getProperty(name).getValues());
+++++  }
+++++  
+++++  /**
+++++   * The function get value properties of node
+++++   * and change to List<String>
+++++   * 
+++++   * @param name The name of node
+++++   * @return List<String>
+++++   * @throws RepositoryException
+++++   */
+++++  public List<String> list(String name) throws RepositoryException {
+++++    Value[] values = node.getProperty(name).getValues();
+++++    return valueToList(values);
+++++  }
+++++  
+++++  /**
+++++   * The function get value properties of node
+++++   * and change to Set<String>
+++++   * 
+++++   * @param name The name of node
+++++   * @return Set<String>
+++++   * @throws RepositoryException
+++++   */
+++++  public Set<String> set(String name) throws RepositoryException {
+++++      Value[] values = node.getProperty(name).getValues();
+++++      Set<String> result = new HashSet<String>();
+++++      result.addAll(valueToList(values));
+++++      return result;
+++++  }
+++++  
+++++  /**
+++++   * The function get value properties of node
+++++   * and change to String array
+++++   * 
+++++   * @param values The array of value
+++++   * @return String array
+++++   * @throws RepositoryException
+++++   */
+++++  private String[] valueToArray(Value[] values) throws RepositoryException {
+++++    if (values.length < 1) {
+++++      return new String[] {};
+++++    }
+++++    List<String> list = valueToList(values);
+++++    return list.toArray(new String[list.size()]);
+++++  }
+++++  
+++++  /**
+++++   * The function get value properties of node
+++++   * and return List<String>
+++++   * @param values The Value array
+++++   * @return List<String>
+++++   * @throws RepositoryException
+++++   */
+++++  private List<String> valueToList(Value[] values) throws RepositoryException {
+++++    List<String> list = new ArrayList<String>();
+++++    if (values.length < 1) {
+++++      return list;
+++++    }
+++++    String s = "";
+++++    for (Value value : values) {
+++++      s = value.getString();
+++++      if (s != null && s.trim().length() > 0) {
+++++        list.add(s);
+++++      }
+++++    }
+++++    return list;
+++++  }
+++++
+++++}
++++diff --git a/src/main/java/exoplatform/utils/Utils.java b/src/main/java/exoplatform/utils/Utils.java
++++new file mode 100644
++++index 0000000..ca5494b
++++--- /dev/null
+++++++ b/src/main/java/exoplatform/utils/Utils.java
++++@@ -0,0 +1,69 @@
+++++/*
+++++ * Copyright (C) 2003-2012 eXo Platform SAS.
+++++ *
+++++ * This program is free software: you can redistribute it and/or modify
+++++ * it under the terms of the GNU Affero General Public License as published by
+++++ * the Free Software Foundation, either version 3 of the License, or
+++++ * (at your option) any later version.
+++++ *
+++++ * This program is distributed in the hope that it will be useful,
+++++ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+++++ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+++++ * GNU Affero General Public License for more details.
+++++ *
+++++ * You should have received a copy of the GNU Affero General Public License
+++++ * along with this program. If not, see <http://www.gnu.org/licenses/>.
+++++ */
+++++package exoplatform.utils;
+++++
+++++import exoplatform.entity.Book;
+++++
+++++/**
+++++ * Created by The eXo Platform SAS
+++++ * Author : BinhNV
+++++ *          binhnv@exoplatform.com
+++++ * Jul 5, 2012  
+++++ */
+++++public class Utils {
+++++
+++++  /** 
+++++   * Define a static variable which contain id of book 
+++++   * id of book will increase 1 value when a new book create
+++++   * 
+++++   **/
+++++  public static int bookId = 0;
+++++  
+++++  /** 
+++++   * Define a static variable which contain id of author 
+++++   * id of author will increase 1 value when a new author create
+++++   * 
+++++   **/
+++++  public static int authorId = 0;
+++++  
+++++  /**
+++++   * Convert enum value to String value 
+++++   * 
+++++   * @param category Enum value of category
+++++   * @return String value of category
+++++   */
+++++  public static String bookCategoryEnumToString(Book.CATEGORY category) {
+++++    if (category != null) {
+++++      return category.toString();
+++++    }
+++++    return null;
+++++  }
+++++  
+++++  /**
+++++   * Convert String value to enum value
+++++   * 
+++++   * @param category String value of category
+++++   * @return Book.CATEGORY of category
+++++   */
+++++  public static Book.CATEGORY bookCategoryStringToEnum(String category) {
+++++    if (category != null) {
+++++      return Book.CATEGORY.valueOf(category);
+++++    }
+++++    return null;
+++++  }
+++++  
+++++}
++++diff --git a/src/main/resources/conf/portal/bookstore-configuration.xml b/src/main/resources/conf/portal/bookstore-configuration.xml
++++new file mode 100644
++++index 0000000..29f1ffb
++++--- /dev/null
+++++++ b/src/main/resources/conf/portal/bookstore-configuration.xml
++++@@ -0,0 +1,13 @@
+++++<?xml version="1.0" encoding="ISO-8859-1"?>
+++++<configuration xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.exoplaform.org/xml/ns/kernel_1_0.xsd
+++++	http://www.exoplaform.org/xml/ns/kernel_1_0.xsd" xmlns="http://www.exoplaform.org/xml/ns/kernel_1_0.xsd">
+++++	<component>
+++++		<key>exoplatform.JCRDataStorage</key>
+++++		<type>exoplatform.JCRDataStorage</type>
+++++	</component>
+++++	<component>
+++++	    <key>exoplatform.BookStoreService</key>
+++++	    <type>exoplatform.BookStoreService</type>
+++++    </component>
+++++
+++++</configuration>
++++\ No newline at end of file
++++diff --git a/src/main/resources/conf/portal/configuration.xml b/src/main/resources/conf/portal/configuration.xml
++++new file mode 100644
++++index 0000000..50e229b
++++--- /dev/null
+++++++ b/src/main/resources/conf/portal/configuration.xml
++++@@ -0,0 +1,10 @@
+++++<?xml version="1.0" encoding="ISO-8859-1"?>
+++++<configuration 
+++++	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
+++++	xsi:schemaLocation="http://www.exoplaform.org/xml/ns/kernel_1_0.xsd http://www.exoplaform.org/xml/ns/kernel_1_0.xsd"
+++++	 xmlns="http://www.exoplaform.org/xml/ns/kernel_1_0.xsd">
+++++	<import>jar:/conf/portal/jcr-configuration.xml</import>
+++++	<import>jar:/conf/portal/jcr-component-plugins-configuration.xml</import>
+++++	<import>jar:/conf/portal/jcr-nodetypes-configuration.xml</import>
+++++	<import>jar:/conf/portal/bookstore-configuration.xml</import>
+++++</configuration>
++++\ No newline at end of file
++++diff --git a/src/main/resources/conf/portal/jcr-component-plugins-configuration.xml b/src/main/resources/conf/portal/jcr-component-plugins-configuration.xml
++++new file mode 100644
++++index 0000000..04ff268
++++--- /dev/null
+++++++ b/src/main/resources/conf/portal/jcr-component-plugins-configuration.xml
++++@@ -0,0 +1,114 @@
+++++<?xml version="1.0" encoding="ISO-8859-1"?>
+++++<!-- This file create new root path -->
+++++<configuration xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.exoplaform.org/xml/ns/kernel_1_0.xsd http://www.exoplaform.org/xml/ns/kernel_1_0.xsd"
+++++  xmlns="http://www.exoplaform.org/xml/ns/kernel_1_0.xsd">
+++++  <external-component-plugins>
+++++    <target-component>org.exoplatform.services.jcr.ext.hierarchy.NodeHierarchyCreator</target-component>
+++++    <component-plugin>
+++++      	<name>addPaths</name>
+++++      	<set-method>addPlugin</set-method>
+++++      	<type>org.exoplatform.services.jcr.ext.hierarchy.impl.AddPathPlugin</type>            
+++++      	<init-params>
+++++        	<object-param>
+++++          		<name>cms.configuration</name>
+++++          		<description>configuration for the cms path</description>
+++++          		<object type="org.exoplatform.services.jcr.ext.hierarchy.impl.HierarchyConfig">
+++++		            <field name="workspaces">
+++++		              <collection type="java.util.ArrayList">
+++++		                <value><string>bookstore</string></value>
+++++		              </collection>                
+++++		            </field>
+++++	            	<field  name="jcrPaths">
+++++		 	        	<collection type="java.util.ArrayList">
+++++			            	<value>                
+++++	        		        	<object type="org.exoplatform.services.jcr.ext.hierarchy.impl.HierarchyConfig$JcrPath">                   
+++++		                     		<field  name="alias"><string>exobookstore</string></field>
+++++		                     		<field  name="path"><string>/exostore:bookstore</string></field>                                          
+++++		                     		<field name="permissions">
+++++		                       			<collection type="java.util.ArrayList">               
+++++		                         			<value>                            
+++++		                           				<object type="org.exoplatform.services.jcr.ext.hierarchy.impl.HierarchyConfig$Permission">
+++++													  <field name="identity"><string>*:/platform/administrators</string></field>
+++++						                              <field name="read"><string>true</string></field>                
+++++						                              <field name="addNode"><string>true</string></field>                
+++++						                              <field name="setProperty"><string>true</string></field>                
+++++						                              <field name="remove"><string>true</string></field>                
+++++		                           				</object>  
+++++		                        			</value>     
+++++											<value>                            
+++++		                           				<object type="org.exoplatform.services.jcr.ext.hierarchy.impl.HierarchyConfig$Permission">
+++++						                              <field name="identity"><string>any</string></field>
+++++						                              <field name="read"><string>true</string></field>                
+++++						                              <field name="addNode"><string>false</string></field>                
+++++						                              <field name="setProperty"><string>true</string></field>                
+++++						                              <field name="remove"><string>false</string></field>                
+++++		                           				</object>  
+++++		                        			</value>                   
+++++		                      			</collection>
+++++		                    		</field>                                   
+++++	                  			</object>
+++++	                  		</value>
+++++	                  		<value>
+++++	                  			<object type="org.exoplatform.services.jcr.ext.hierarchy.impl.HierarchyConfig$JcrPath">                   
+++++		                     		<field  name="alias"><string>book</string></field>
+++++		                     		<field  name="path"><string>/exostore:bookstore/exostore:book</string></field>                                          
+++++		                     		<field name="permissions">
+++++		                       			<collection type="java.util.ArrayList">               
+++++		                         			<value>                            
+++++		                           				<object type="org.exoplatform.services.jcr.ext.hierarchy.impl.HierarchyConfig$Permission">
+++++													  <field name="identity"><string>*:/platform/administrators</string></field>
+++++						                              <field name="read"><string>true</string></field>                
+++++						                              <field name="addNode"><string>true</string></field>                
+++++						                              <field name="setProperty"><string>true</string></field>                
+++++						                              <field name="remove"><string>true</string></field>                
+++++		                           				</object>  
+++++		                        			</value>     
+++++											<value>                            
+++++		                           				<object type="org.exoplatform.services.jcr.ext.hierarchy.impl.HierarchyConfig$Permission">
+++++						                              <field name="identity"><string>any</string></field>
+++++						                              <field name="read"><string>true</string></field>                
+++++						                              <field name="addNode"><string>false</string></field>                
+++++						                              <field name="setProperty"><string>true</string></field>                
+++++						                              <field name="remove"><string>false</string></field>                
+++++		                           				</object>  
+++++		                        			</value>                   
+++++		                      			</collection>
+++++		                    		</field>                                   
+++++	                  			</object>
+++++	                  		</value>
+++++	                  		<value>
+++++	                  			<object type="org.exoplatform.services.jcr.ext.hierarchy.impl.HierarchyConfig$JcrPath">                   
+++++		                     		<field  name="alias"><string>author</string></field>
+++++		                     		<field  name="path"><string>/exostore:bookstore/exostore:author</string></field>                                          
+++++		                     		<field name="permissions">
+++++		                       			<collection type="java.util.ArrayList">               
+++++		                         			<value>                            
+++++		                           				<object type="org.exoplatform.services.jcr.ext.hierarchy.impl.HierarchyConfig$Permission">
+++++													  <field name="identity"><string>*:/platform/administrators</string></field>
+++++						                              <field name="read"><string>true</string></field>                
+++++						                              <field name="addNode"><string>true</string></field>                
+++++						                              <field name="setProperty"><string>true</string></field>                
+++++						                              <field name="remove"><string>true</string></field>                
+++++		                           				</object>  
+++++		                        			</value>     
+++++											<value>                            
+++++		                           				<object type="org.exoplatform.services.jcr.ext.hierarchy.impl.HierarchyConfig$Permission">
+++++						                              <field name="identity"><string>any</string></field>
+++++						                              <field name="read"><string>true</string></field>                
+++++						                              <field name="addNode"><string>false</string></field>                
+++++						                              <field name="setProperty"><string>true</string></field>                
+++++						                              <field name="remove"><string>false</string></field>                
+++++		                           				</object>  
+++++		                        			</value>                   
+++++		                      			</collection>
+++++		                    		</field>                                   
+++++	                  			</object>
+++++	                		</value>
+++++	             	</collection>  
+++++	            </field>
+++++        	</object>
+++++        </object-param>
+++++      </init-params>            
+++++    </component-plugin>
+++++  </external-component-plugins>
+++++</configuration>
++++diff --git a/src/main/resources/conf/portal/jcr-configuration.xml b/src/main/resources/conf/portal/jcr-configuration.xml
++++new file mode 100644
++++index 0000000..4c69fdd
++++--- /dev/null
+++++++ b/src/main/resources/conf/portal/jcr-configuration.xml
++++@@ -0,0 +1,25 @@
+++++<?xml version="1.0" encoding="ISO-8859-1"?>
+++++<configuration
+++++  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+++++  xsi:schemaLocation="http://www.exoplaform.org/xml/ns/kernel_1_0.xsd http://www.exoplaform.org/xml/ns/kernel_1_0.xsd"
+++++  xmlns="http://www.exoplaform.org/xml/ns/kernel_1_0.xsd">
+++++  <external-component-plugins>
+++++    <!-- The full qualified name of the RepositoryServiceConfiguration -->
+++++    <target-component>org.exoplatform.services.jcr.config.RepositoryServiceConfiguration</target-component>
+++++    <component-plugin>
+++++      <!-- The name of the plugin -->
+++++      <name>Sample RepositoryServiceConfiguration Plugin</name>
+++++      <!-- The name of the method to call on the RepositoryServiceConfiguration in order to add the RepositoryServiceConfigurations -->
+++++      <set-method>addConfig</set-method>
+++++      <!-- The full qualified name of the RepositoryServiceConfigurationPlugin -->
+++++      <type>org.exoplatform.services.jcr.impl.config.RepositoryServiceConfigurationPlugin</type>
+++++      <init-params>
+++++        <value-param>
+++++          <name>conf-path</name>
+++++          <description>JCR configuration file</description>
+++++          <value>jar:/conf/portal/repository-configuration.xml</value>
+++++        </value-param>
+++++      </init-params>
+++++    </component-plugin>
+++++  </external-component-plugins>
+++++</configuration>
++++diff --git a/src/main/resources/conf/portal/jcr-nodetypes-configuration.xml b/src/main/resources/conf/portal/jcr-nodetypes-configuration.xml
++++new file mode 100644
++++index 0000000..41a267c
++++--- /dev/null
+++++++ b/src/main/resources/conf/portal/jcr-nodetypes-configuration.xml
++++@@ -0,0 +1,30 @@
+++++<?xml version="1.0" encoding="ISO-8859-1"?>
+++++<configuration xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.exoplaform.org/xml/ns/kernel_1_0.xsd http://www.exoplaform.org/xml/ns/kernel_1_0.xsd"
+++++  xmlns="http://www.exoplaform.org/xml/ns/kernel_1_0.xsd">
+++++  <external-component-plugins>
+++++    <target-component>org.exoplatform.services.jcr.RepositoryService</target-component>  
+++++    <component-plugin>
+++++          <name>add.namespaces</name>
+++++          <set-method>addPlugin</set-method>
+++++          <type>org.exoplatform.services.jcr.impl.AddNamespacesPlugin</type>
+++++          <init-params>
+++++            <properties-param>
+++++              <name>namespaces</name>
+++++              <property name="exostore" value="http://www.exoplatform.org/bookstore/1.0"/>
+++++            </properties-param>
+++++          </init-params>
+++++      </component-plugin>    
+++++    <component-plugin> 
+++++      <name>add.cs.nodeType</name>
+++++      <set-method>addPlugin</set-method>
+++++      <type>org.exoplatform.services.jcr.impl.AddNodeTypePlugin</type>
+++++      <init-params>
+++++        <values-param>
+++++          <name>autoCreatedInNewRepository</name>
+++++          <description>Node types configuration file</description>
+++++          <value>jar:/conf/portal/nodetypes.xml</value>
+++++        </values-param>
+++++      </init-params>
+++++    </component-plugin>
+++++  </external-component-plugins>  
+++++</configuration>
++++diff --git a/src/main/resources/conf/portal/nodetypes.xml b/src/main/resources/conf/portal/nodetypes.xml
++++new file mode 100644
++++index 0000000..6f40180
++++--- /dev/null
+++++++ b/src/main/resources/conf/portal/nodetypes.xml
++++@@ -0,0 +1,44 @@
+++++<?xml version="1.0" encoding="ISO-8859-1"?>
+++++<nodeTypes xmlns:nt="http://www.jcp.org/jcr/nt/1.0" xmlns:mix="http://www.jcp.org/jcr/mix/1.0" xmlns:jcr="http://www.jcp.org/jcr/1.0">
+++++    
+++++	<nodeType name="exostore:book" isMixin="false" hasOrderableChildNodes="false" primaryItemName="">
+++++		<supertypes>
+++++			<supertype>nt:base</supertype>
+++++		</supertypes>
+++++		<propertyDefinitions>
+++++			<propertyDefinition name="exostore:bookname" requiredType="String" autoCreated="false" mandatory="false" 
+++++						onParentVersion="COPY" protected="false" multiple="false">
+++++				<valueConstraints/>
+++++			</propertyDefinition>
+++++			<propertyDefinition name="exostore:bookcategory" requiredType="String" autoCreated="false" mandatory="false" 
+++++						onParentVersion="COPY" protected="false" multiple="false">
+++++				<valueConstraints/>
+++++			</propertyDefinition>
+++++			<propertyDefinition name="exostore:bookcontent" requiredType="String" autoCreated="false" mandatory="false" 
+++++						onParentVersion="COPY" protected="false" multiple="false">
+++++				<valueConstraints/>
+++++			</propertyDefinition>
+++++		</propertyDefinitions>
+++++	</nodeType>
+++++	
+++++	<nodeType name="exostore:author" isMixin="false" hasOrderableChildNodes="false" primaryItemName="">
+++++		<supertypes>
+++++			<supertype>nt:base</supertype>
+++++		</supertypes>
+++++		<propertyDefinitions>
+++++			<propertyDefinition name="exostore:authorname" requiredType="String" autoCreated="false" mandatory="false" 
+++++						onParentVersion="COPY" protected="false" multiple="false">
+++++				<valueConstraints/>
+++++			</propertyDefinition>
+++++			<propertyDefinition name="exostore:authoraddress" requiredType="String" autoCreated="false" mandatory="false" 
+++++						onParentVersion="COPY" protected="false" multiple="false">
+++++				<valueConstraints/>
+++++			</propertyDefinition>
+++++			<propertyDefinition name="exostore:authorphone" requiredType="String" autoCreated="false" mandatory="false" 
+++++						onParentVersion="COPY" protected="false" multiple="false">
+++++				<valueConstraints/>
+++++			</propertyDefinition>
+++++		</propertyDefinitions>
+++++	</nodeType>
+++++	
+++++</nodeTypes>
++++\ No newline at end of file
++++diff --git a/src/main/resources/conf/portal/repository-configuration.xml b/src/main/resources/conf/portal/repository-configuration.xml
++++new file mode 100644
++++index 0000000..6183884
++++--- /dev/null
+++++++ b/src/main/resources/conf/portal/repository-configuration.xml
++++@@ -0,0 +1,78 @@
+++++<repository-service default-repository="${gatein.jcr.repository.default}">
+++++  <repositories>
+++++    <repository name="${gatein.jcr.repository.default}" system-workspace="${gatein.jcr.workspace.system}" default-workspace="${gatein.jcr.workspace.default}">
+++++      <security-domain>gatein-domain</security-domain>
+++++      <access-control>optional</access-control>
+++++      <authentication-policy>org.exoplatform.services.jcr.impl.core.access.JAASAuthenticator</authentication-policy>
+++++      <workspaces>
+++++        <workspace name="bookstore">
+++++          <container class="org.exoplatform.services.jcr.impl.storage.jdbc.optimisation.CQJDBCWorkspaceDataContainer">
+++++            <properties>
+++++              <property name="source-name" value="${gatein.jcr.datasource.name}${container.name.suffix}"/>
+++++              <property name="dialect" value="${gatein.jcr.datasource.dialect}"/>
+++++              <property name="multi-db" value="false"/>
+++++              <property name="update-storage" value="true"/>
+++++              <property name="max-buffer-size" value="200k"/>
+++++              <property name="swap-directory" value="${gatein.jcr.data.dir}/swap/bookstore${container.name.suffix}"/>
+++++            </properties>
+++++            <value-storages>
+++++              <value-storage id="bookstore" class="org.exoplatform.services.jcr.impl.storage.value.fs.TreeFileValueStorage">
+++++                <properties>
+++++                  <property name="path" value="${gatein.jcr.storage.data.dir}/bookstore${container.name.suffix}"/>
+++++                </properties>
+++++                <filters>
+++++                  <filter property-type="Binary"/>
+++++                </filters>
+++++              </value-storage>
+++++            </value-storages>
+++++          </container>
+++++          <initializer class="org.exoplatform.services.jcr.impl.core.ScratchWorkspaceInitializer">
+++++            <properties>
+++++              <property name="root-nodetype" value="nt:unstructured"/>
+++++              <property name="root-permissions" value="any read;*:/platform/administrators read;*:/platform/administrators add_node;*:/platform/administrators set_property;*:/platform/administrators remove"/>
+++++            </properties>
+++++          </initializer>
+++++          <cache enabled="true" class="org.exoplatform.services.jcr.impl.dataflow.persistent.jbosscache.JBossCacheWorkspaceStorageCache">
+++++            <properties>
+++++              <property name="jbosscache-configuration" value="${gatein.jcr.cache.config}" />
+++++              <property name="jgroups-configuration" value="${gatein.jcr.jgroups.config}" />
+++++              <property name="jbosscache-cluster-name" value="jcr-cache${container.name.suffix}" />
+++++              <property name="jbosscache-shareable" value="true" />
+++++              <property name="jbosscache-expiration-time" value="${gatein.jcr.cache.expiration.time}" />
+++++            </properties>
+++++          </cache>
+++++          <query-handler class="org.exoplatform.services.jcr.impl.core.query.lucene.SearchIndex">
+++++            <properties>
+++++              <property name="index-dir" value="${gatein.jcr.index.data.dir}/bookstore${container.name.suffix}"/>
+++++              <property name="changesfilter-class" value="${gatein.jcr.index.changefilterclass}" />
+++++              <property name="jbosscache-configuration" value="${gatein.jcr.index.cache.config}" />
+++++              <property name="jgroups-configuration" value="${gatein.jcr.jgroups.config}" />
+++++              <property name="jbosscache-cluster-name" value="jcr-indexer${container.name.suffix}" />
+++++              <property name="jbosscache-shareable" value="true" />
+++++              <property name="max-volatile-time" value="60" />
+++++            </properties>
+++++          </query-handler>
+++++          
+++++          <lock-manager class="org.exoplatform.services.jcr.impl.core.lock.jbosscache.CacheableLockManagerImpl">
+++++            <properties>
+++++              <property name="time-out" value="15m" />
+++++              <property name="jbosscache-configuration" value="${gatein.jcr.lock.cache.config}" />
+++++              <property name="jgroups-configuration" value="${gatein.jcr.jgroups.config}" />
+++++              <property name="jbosscache-cluster-name" value="jcr-lock${container.name.suffix}" />
+++++              <property name="jbosscache-shareable" value="true" />
+++++              <property name="jbosscache-cl-cache.jdbc.table.name" value="jcrlocks" />
+++++              <property name="jbosscache-cl-cache.jdbc.table.create" value="true" />
+++++              <property name="jbosscache-cl-cache.jdbc.table.drop" value="false" />
+++++              <property name="jbosscache-cl-cache.jdbc.table.primarykey" value="pk" />
+++++              <property name="jbosscache-cl-cache.jdbc.fqn.column" value="fqn" />
+++++              <property name="jbosscache-cl-cache.jdbc.node.column" value="node" />
+++++              <property name="jbosscache-cl-cache.jdbc.parent.column" value="parent" />
+++++              <property name="jbosscache-cl-cache.jdbc.datasource" value="${gatein.jcr.datasource.name}${container.name.suffix}" />
+++++            </properties>
+++++          </lock-manager>
+++++
+++++        </workspace>
+++++      </workspaces>
+++++    </repository>
+++++  </repositories>
+++++</repository-service>
++++diff --git a/src/test/java/exoplatform/AppTest.java b/src/test/java/exoplatform/AppTest.java
++++new file mode 100644
++++index 0000000..472b9fd
++++--- /dev/null
+++++++ b/src/test/java/exoplatform/AppTest.java
++++@@ -0,0 +1,38 @@
+++++package exoplatform;
+++++
+++++import junit.framework.Test;
+++++import junit.framework.TestCase;
+++++import junit.framework.TestSuite;
+++++
+++++/**
+++++ * Unit test for simple App.
+++++ */
+++++public class AppTest 
+++++    extends TestCase
+++++{
+++++    /**
+++++     * Create the test case
+++++     *
+++++     * @param testName name of the test case
+++++     */
+++++    public AppTest( String testName )
+++++    {
+++++        super( testName );
+++++    }
+++++
+++++    /**
+++++     * @return the suite of tests being tested
+++++     */
+++++    public static Test suite()
+++++    {
+++++        return new TestSuite( AppTest.class );
+++++    }
+++++
+++++    /**
+++++     * Rigourous Test :-)
+++++     */
+++++    public void testApp()
+++++    {
+++++        assertTrue( true );
+++++    }
+++++}
++++diff --git a/target/classes/conf/portal/bookstore-configuration.xml b/target/classes/conf/portal/bookstore-configuration.xml
++++new file mode 100644
++++index 0000000..29f1ffb
++++--- /dev/null
+++++++ b/target/classes/conf/portal/bookstore-configuration.xml
++++@@ -0,0 +1,13 @@
+++++<?xml version="1.0" encoding="ISO-8859-1"?>
+++++<configuration xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.exoplaform.org/xml/ns/kernel_1_0.xsd
+++++	http://www.exoplaform.org/xml/ns/kernel_1_0.xsd" xmlns="http://www.exoplaform.org/xml/ns/kernel_1_0.xsd">
+++++	<component>
+++++		<key>exoplatform.JCRDataStorage</key>
+++++		<type>exoplatform.JCRDataStorage</type>
+++++	</component>
+++++	<component>
+++++	    <key>exoplatform.BookStoreService</key>
+++++	    <type>exoplatform.BookStoreService</type>
+++++    </component>
+++++
+++++</configuration>
++++\ No newline at end of file
++++diff --git a/target/classes/conf/portal/configuration.xml b/target/classes/conf/portal/configuration.xml
++++new file mode 100644
++++index 0000000..50e229b
++++--- /dev/null
+++++++ b/target/classes/conf/portal/configuration.xml
++++@@ -0,0 +1,10 @@
+++++<?xml version="1.0" encoding="ISO-8859-1"?>
+++++<configuration 
+++++	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
+++++	xsi:schemaLocation="http://www.exoplaform.org/xml/ns/kernel_1_0.xsd http://www.exoplaform.org/xml/ns/kernel_1_0.xsd"
+++++	 xmlns="http://www.exoplaform.org/xml/ns/kernel_1_0.xsd">
+++++	<import>jar:/conf/portal/jcr-configuration.xml</import>
+++++	<import>jar:/conf/portal/jcr-component-plugins-configuration.xml</import>
+++++	<import>jar:/conf/portal/jcr-nodetypes-configuration.xml</import>
+++++	<import>jar:/conf/portal/bookstore-configuration.xml</import>
+++++</configuration>
++++\ No newline at end of file
++++diff --git a/target/classes/conf/portal/jcr-component-plugins-configuration.xml b/target/classes/conf/portal/jcr-component-plugins-configuration.xml
++++new file mode 100644
++++index 0000000..04ff268
++++--- /dev/null
+++++++ b/target/classes/conf/portal/jcr-component-plugins-configuration.xml
++++@@ -0,0 +1,114 @@
+++++<?xml version="1.0" encoding="ISO-8859-1"?>
+++++<!-- This file create new root path -->
+++++<configuration xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.exoplaform.org/xml/ns/kernel_1_0.xsd http://www.exoplaform.org/xml/ns/kernel_1_0.xsd"
+++++  xmlns="http://www.exoplaform.org/xml/ns/kernel_1_0.xsd">
+++++  <external-component-plugins>
+++++    <target-component>org.exoplatform.services.jcr.ext.hierarchy.NodeHierarchyCreator</target-component>
+++++    <component-plugin>
+++++      	<name>addPaths</name>
+++++      	<set-method>addPlugin</set-method>
+++++      	<type>org.exoplatform.services.jcr.ext.hierarchy.impl.AddPathPlugin</type>            
+++++      	<init-params>
+++++        	<object-param>
+++++          		<name>cms.configuration</name>
+++++          		<description>configuration for the cms path</description>
+++++          		<object type="org.exoplatform.services.jcr.ext.hierarchy.impl.HierarchyConfig">
+++++		            <field name="workspaces">
+++++		              <collection type="java.util.ArrayList">
+++++		                <value><string>bookstore</string></value>
+++++		              </collection>                
+++++		            </field>
+++++	            	<field  name="jcrPaths">
+++++		 	        	<collection type="java.util.ArrayList">
+++++			            	<value>                
+++++	        		        	<object type="org.exoplatform.services.jcr.ext.hierarchy.impl.HierarchyConfig$JcrPath">                   
+++++		                     		<field  name="alias"><string>exobookstore</string></field>
+++++		                     		<field  name="path"><string>/exostore:bookstore</string></field>                                          
+++++		                     		<field name="permissions">
+++++		                       			<collection type="java.util.ArrayList">               
+++++		                         			<value>                            
+++++		                           				<object type="org.exoplatform.services.jcr.ext.hierarchy.impl.HierarchyConfig$Permission">
+++++													  <field name="identity"><string>*:/platform/administrators</string></field>
+++++						                              <field name="read"><string>true</string></field>                
+++++						                              <field name="addNode"><string>true</string></field>                
+++++						                              <field name="setProperty"><string>true</string></field>                
+++++						                              <field name="remove"><string>true</string></field>                
+++++		                           				</object>  
+++++		                        			</value>     
+++++											<value>                            
+++++		                           				<object type="org.exoplatform.services.jcr.ext.hierarchy.impl.HierarchyConfig$Permission">
+++++						                              <field name="identity"><string>any</string></field>
+++++						                              <field name="read"><string>true</string></field>                
+++++						                              <field name="addNode"><string>false</string></field>                
+++++						                              <field name="setProperty"><string>true</string></field>                
+++++						                              <field name="remove"><string>false</string></field>                
+++++		                           				</object>  
+++++		                        			</value>                   
+++++		                      			</collection>
+++++		                    		</field>                                   
+++++	                  			</object>
+++++	                  		</value>
+++++	                  		<value>
+++++	                  			<object type="org.exoplatform.services.jcr.ext.hierarchy.impl.HierarchyConfig$JcrPath">                   
+++++		                     		<field  name="alias"><string>book</string></field>
+++++		                     		<field  name="path"><string>/exostore:bookstore/exostore:book</string></field>                                          
+++++		                     		<field name="permissions">
+++++		                       			<collection type="java.util.ArrayList">               
+++++		                         			<value>                            
+++++		                           				<object type="org.exoplatform.services.jcr.ext.hierarchy.impl.HierarchyConfig$Permission">
+++++													  <field name="identity"><string>*:/platform/administrators</string></field>
+++++						                              <field name="read"><string>true</string></field>                
+++++						                              <field name="addNode"><string>true</string></field>                
+++++						                              <field name="setProperty"><string>true</string></field>                
+++++						                              <field name="remove"><string>true</string></field>                
+++++		                           				</object>  
+++++		                        			</value>     
+++++											<value>                            
+++++		                           				<object type="org.exoplatform.services.jcr.ext.hierarchy.impl.HierarchyConfig$Permission">
+++++						                              <field name="identity"><string>any</string></field>
+++++						                              <field name="read"><string>true</string></field>                
+++++						                              <field name="addNode"><string>false</string></field>                
+++++						                              <field name="setProperty"><string>true</string></field>                
+++++						                              <field name="remove"><string>false</string></field>                
+++++		                           				</object>  
+++++		                        			</value>                   
+++++		                      			</collection>
+++++		                    		</field>                                   
+++++	                  			</object>
+++++	                  		</value>
+++++	                  		<value>
+++++	                  			<object type="org.exoplatform.services.jcr.ext.hierarchy.impl.HierarchyConfig$JcrPath">                   
+++++		                     		<field  name="alias"><string>author</string></field>
+++++		                     		<field  name="path"><string>/exostore:bookstore/exostore:author</string></field>                                          
+++++		                     		<field name="permissions">
+++++		                       			<collection type="java.util.ArrayList">               
+++++		                         			<value>                            
+++++		                           				<object type="org.exoplatform.services.jcr.ext.hierarchy.impl.HierarchyConfig$Permission">
+++++													  <field name="identity"><string>*:/platform/administrators</string></field>
+++++						                              <field name="read"><string>true</string></field>                
+++++						                              <field name="addNode"><string>true</string></field>                
+++++						                              <field name="setProperty"><string>true</string></field>                
+++++						                              <field name="remove"><string>true</string></field>                
+++++		                           				</object>  
+++++		                        			</value>     
+++++											<value>                            
+++++		                           				<object type="org.exoplatform.services.jcr.ext.hierarchy.impl.HierarchyConfig$Permission">
+++++						                              <field name="identity"><string>any</string></field>
+++++						                              <field name="read"><string>true</string></field>                
+++++						                              <field name="addNode"><string>false</string></field>                
+++++						                              <field name="setProperty"><string>true</string></field>                
+++++						                              <field name="remove"><string>false</string></field>                
+++++		                           				</object>  
+++++		                        			</value>                   
+++++		                      			</collection>
+++++		                    		</field>                                   
+++++	                  			</object>
+++++	                		</value>
+++++	             	</collection>  
+++++	            </field>
+++++        	</object>
+++++        </object-param>
+++++      </init-params>            
+++++    </component-plugin>
+++++  </external-component-plugins>
+++++</configuration>
++++diff --git a/target/classes/conf/portal/jcr-configuration.xml b/target/classes/conf/portal/jcr-configuration.xml
++++new file mode 100644
++++index 0000000..4c69fdd
++++--- /dev/null
+++++++ b/target/classes/conf/portal/jcr-configuration.xml
++++@@ -0,0 +1,25 @@
+++++<?xml version="1.0" encoding="ISO-8859-1"?>
+++++<configuration
+++++  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+++++  xsi:schemaLocation="http://www.exoplaform.org/xml/ns/kernel_1_0.xsd http://www.exoplaform.org/xml/ns/kernel_1_0.xsd"
+++++  xmlns="http://www.exoplaform.org/xml/ns/kernel_1_0.xsd">
+++++  <external-component-plugins>
+++++    <!-- The full qualified name of the RepositoryServiceConfiguration -->
+++++    <target-component>org.exoplatform.services.jcr.config.RepositoryServiceConfiguration</target-component>
+++++    <component-plugin>
+++++      <!-- The name of the plugin -->
+++++      <name>Sample RepositoryServiceConfiguration Plugin</name>
+++++      <!-- The name of the method to call on the RepositoryServiceConfiguration in order to add the RepositoryServiceConfigurations -->
+++++      <set-method>addConfig</set-method>
+++++      <!-- The full qualified name of the RepositoryServiceConfigurationPlugin -->
+++++      <type>org.exoplatform.services.jcr.impl.config.RepositoryServiceConfigurationPlugin</type>
+++++      <init-params>
+++++        <value-param>
+++++          <name>conf-path</name>
+++++          <description>JCR configuration file</description>
+++++          <value>jar:/conf/portal/repository-configuration.xml</value>
+++++        </value-param>
+++++      </init-params>
+++++    </component-plugin>
+++++  </external-component-plugins>
+++++</configuration>
++++diff --git a/target/classes/conf/portal/jcr-nodetypes-configuration.xml b/target/classes/conf/portal/jcr-nodetypes-configuration.xml
++++new file mode 100644
++++index 0000000..41a267c
++++--- /dev/null
+++++++ b/target/classes/conf/portal/jcr-nodetypes-configuration.xml
++++@@ -0,0 +1,30 @@
+++++<?xml version="1.0" encoding="ISO-8859-1"?>
+++++<configuration xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.exoplaform.org/xml/ns/kernel_1_0.xsd http://www.exoplaform.org/xml/ns/kernel_1_0.xsd"
+++++  xmlns="http://www.exoplaform.org/xml/ns/kernel_1_0.xsd">
+++++  <external-component-plugins>
+++++    <target-component>org.exoplatform.services.jcr.RepositoryService</target-component>  
+++++    <component-plugin>
+++++          <name>add.namespaces</name>
+++++          <set-method>addPlugin</set-method>
+++++          <type>org.exoplatform.services.jcr.impl.AddNamespacesPlugin</type>
+++++          <init-params>
+++++            <properties-param>
+++++              <name>namespaces</name>
+++++              <property name="exostore" value="http://www.exoplatform.org/bookstore/1.0"/>
+++++            </properties-param>
+++++          </init-params>
+++++      </component-plugin>    
+++++    <component-plugin> 
+++++      <name>add.cs.nodeType</name>
+++++      <set-method>addPlugin</set-method>
+++++      <type>org.exoplatform.services.jcr.impl.AddNodeTypePlugin</type>
+++++      <init-params>
+++++        <values-param>
+++++          <name>autoCreatedInNewRepository</name>
+++++          <description>Node types configuration file</description>
+++++          <value>jar:/conf/portal/nodetypes.xml</value>
+++++        </values-param>
+++++      </init-params>
+++++    </component-plugin>
+++++  </external-component-plugins>  
+++++</configuration>
++++diff --git a/target/classes/conf/portal/nodetypes.xml b/target/classes/conf/portal/nodetypes.xml
++++new file mode 100644
++++index 0000000..6f40180
++++--- /dev/null
+++++++ b/target/classes/conf/portal/nodetypes.xml
++++@@ -0,0 +1,44 @@
+++++<?xml version="1.0" encoding="ISO-8859-1"?>
+++++<nodeTypes xmlns:nt="http://www.jcp.org/jcr/nt/1.0" xmlns:mix="http://www.jcp.org/jcr/mix/1.0" xmlns:jcr="http://www.jcp.org/jcr/1.0">
+++++    
+++++	<nodeType name="exostore:book" isMixin="false" hasOrderableChildNodes="false" primaryItemName="">
+++++		<supertypes>
+++++			<supertype>nt:base</supertype>
+++++		</supertypes>
+++++		<propertyDefinitions>
+++++			<propertyDefinition name="exostore:bookname" requiredType="String" autoCreated="false" mandatory="false" 
+++++						onParentVersion="COPY" protected="false" multiple="false">
+++++				<valueConstraints/>
+++++			</propertyDefinition>
+++++			<propertyDefinition name="exostore:bookcategory" requiredType="String" autoCreated="false" mandatory="false" 
+++++						onParentVersion="COPY" protected="false" multiple="false">
+++++				<valueConstraints/>
+++++			</propertyDefinition>
+++++			<propertyDefinition name="exostore:bookcontent" requiredType="String" autoCreated="false" mandatory="false" 
+++++						onParentVersion="COPY" protected="false" multiple="false">
+++++				<valueConstraints/>
+++++			</propertyDefinition>
+++++		</propertyDefinitions>
+++++	</nodeType>
+++++	
+++++	<nodeType name="exostore:author" isMixin="false" hasOrderableChildNodes="false" primaryItemName="">
+++++		<supertypes>
+++++			<supertype>nt:base</supertype>
+++++		</supertypes>
+++++		<propertyDefinitions>
+++++			<propertyDefinition name="exostore:authorname" requiredType="String" autoCreated="false" mandatory="false" 
+++++						onParentVersion="COPY" protected="false" multiple="false">
+++++				<valueConstraints/>
+++++			</propertyDefinition>
+++++			<propertyDefinition name="exostore:authoraddress" requiredType="String" autoCreated="false" mandatory="false" 
+++++						onParentVersion="COPY" protected="false" multiple="false">
+++++				<valueConstraints/>
+++++			</propertyDefinition>
+++++			<propertyDefinition name="exostore:authorphone" requiredType="String" autoCreated="false" mandatory="false" 
+++++						onParentVersion="COPY" protected="false" multiple="false">
+++++				<valueConstraints/>
+++++			</propertyDefinition>
+++++		</propertyDefinitions>
+++++	</nodeType>
+++++	
+++++</nodeTypes>
++++\ No newline at end of file
++++diff --git a/target/classes/conf/portal/repository-configuration.xml b/target/classes/conf/portal/repository-configuration.xml
++++new file mode 100644
++++index 0000000..6183884
++++--- /dev/null
+++++++ b/target/classes/conf/portal/repository-configuration.xml
++++@@ -0,0 +1,78 @@
+++++<repository-service default-repository="${gatein.jcr.repository.default}">
+++++  <repositories>
+++++    <repository name="${gatein.jcr.repository.default}" system-workspace="${gatein.jcr.workspace.system}" default-workspace="${gatein.jcr.workspace.default}">
+++++      <security-domain>gatein-domain</security-domain>
+++++      <access-control>optional</access-control>
+++++      <authentication-policy>org.exoplatform.services.jcr.impl.core.access.JAASAuthenticator</authentication-policy>
+++++      <workspaces>
+++++        <workspace name="bookstore">
+++++          <container class="org.exoplatform.services.jcr.impl.storage.jdbc.optimisation.CQJDBCWorkspaceDataContainer">
+++++            <properties>
+++++              <property name="source-name" value="${gatein.jcr.datasource.name}${container.name.suffix}"/>
+++++              <property name="dialect" value="${gatein.jcr.datasource.dialect}"/>
+++++              <property name="multi-db" value="false"/>
+++++              <property name="update-storage" value="true"/>
+++++              <property name="max-buffer-size" value="200k"/>
+++++              <property name="swap-directory" value="${gatein.jcr.data.dir}/swap/bookstore${container.name.suffix}"/>
+++++            </properties>
+++++            <value-storages>
+++++              <value-storage id="bookstore" class="org.exoplatform.services.jcr.impl.storage.value.fs.TreeFileValueStorage">
+++++                <properties>
+++++                  <property name="path" value="${gatein.jcr.storage.data.dir}/bookstore${container.name.suffix}"/>
+++++                </properties>
+++++                <filters>
+++++                  <filter property-type="Binary"/>
+++++                </filters>
+++++              </value-storage>
+++++            </value-storages>
+++++          </container>
+++++          <initializer class="org.exoplatform.services.jcr.impl.core.ScratchWorkspaceInitializer">
+++++            <properties>
+++++              <property name="root-nodetype" value="nt:unstructured"/>
+++++              <property name="root-permissions" value="any read;*:/platform/administrators read;*:/platform/administrators add_node;*:/platform/administrators set_property;*:/platform/administrators remove"/>
+++++            </properties>
+++++          </initializer>
+++++          <cache enabled="true" class="org.exoplatform.services.jcr.impl.dataflow.persistent.jbosscache.JBossCacheWorkspaceStorageCache">
+++++            <properties>
+++++              <property name="jbosscache-configuration" value="${gatein.jcr.cache.config}" />
+++++              <property name="jgroups-configuration" value="${gatein.jcr.jgroups.config}" />
+++++              <property name="jbosscache-cluster-name" value="jcr-cache${container.name.suffix}" />
+++++              <property name="jbosscache-shareable" value="true" />
+++++              <property name="jbosscache-expiration-time" value="${gatein.jcr.cache.expiration.time}" />
+++++            </properties>
+++++          </cache>
+++++          <query-handler class="org.exoplatform.services.jcr.impl.core.query.lucene.SearchIndex">
+++++            <properties>
+++++              <property name="index-dir" value="${gatein.jcr.index.data.dir}/bookstore${container.name.suffix}"/>
+++++              <property name="changesfilter-class" value="${gatein.jcr.index.changefilterclass}" />
+++++              <property name="jbosscache-configuration" value="${gatein.jcr.index.cache.config}" />
+++++              <property name="jgroups-configuration" value="${gatein.jcr.jgroups.config}" />
+++++              <property name="jbosscache-cluster-name" value="jcr-indexer${container.name.suffix}" />
+++++              <property name="jbosscache-shareable" value="true" />
+++++              <property name="max-volatile-time" value="60" />
+++++            </properties>
+++++          </query-handler>
+++++          
+++++          <lock-manager class="org.exoplatform.services.jcr.impl.core.lock.jbosscache.CacheableLockManagerImpl">
+++++            <properties>
+++++              <property name="time-out" value="15m" />
+++++              <property name="jbosscache-configuration" value="${gatein.jcr.lock.cache.config}" />
+++++              <property name="jgroups-configuration" value="${gatein.jcr.jgroups.config}" />
+++++              <property name="jbosscache-cluster-name" value="jcr-lock${container.name.suffix}" />
+++++              <property name="jbosscache-shareable" value="true" />
+++++              <property name="jbosscache-cl-cache.jdbc.table.name" value="jcrlocks" />
+++++              <property name="jbosscache-cl-cache.jdbc.table.create" value="true" />
+++++              <property name="jbosscache-cl-cache.jdbc.table.drop" value="false" />
+++++              <property name="jbosscache-cl-cache.jdbc.table.primarykey" value="pk" />
+++++              <property name="jbosscache-cl-cache.jdbc.fqn.column" value="fqn" />
+++++              <property name="jbosscache-cl-cache.jdbc.node.column" value="node" />
+++++              <property name="jbosscache-cl-cache.jdbc.parent.column" value="parent" />
+++++              <property name="jbosscache-cl-cache.jdbc.datasource" value="${gatein.jcr.datasource.name}${container.name.suffix}" />
+++++            </properties>
+++++          </lock-manager>
+++++
+++++        </workspace>
+++++      </workspaces>
+++++    </repository>
+++++  </repositories>
+++++</repository-service>
++++diff --git a/target/classes/exoplatform/BookNodeTypes.class b/target/classes/exoplatform/BookNodeTypes.class
++++new file mode 100644
++++index 0000000..97e72a8
++++Binary files /dev/null and b/target/classes/exoplatform/BookNodeTypes.class differ
++++diff --git a/target/classes/exoplatform/BookStoreService.class b/target/classes/exoplatform/BookStoreService.class
++++new file mode 100644
++++index 0000000..04e4b93
++++Binary files /dev/null and b/target/classes/exoplatform/BookStoreService.class differ
++++diff --git a/target/classes/exoplatform/JCRDataStorage.class b/target/classes/exoplatform/JCRDataStorage.class
++++new file mode 100644
++++index 0000000..879d1a5
++++Binary files /dev/null and b/target/classes/exoplatform/JCRDataStorage.class differ
++++diff --git a/target/classes/exoplatform/entity/Author.class b/target/classes/exoplatform/entity/Author.class
++++new file mode 100644
++++index 0000000..228c835
++++Binary files /dev/null and b/target/classes/exoplatform/entity/Author.class differ
++++diff --git a/target/classes/exoplatform/entity/Book$CATEGORY.class b/target/classes/exoplatform/entity/Book$CATEGORY.class
++++new file mode 100644
++++index 0000000..d1d2df1
++++Binary files /dev/null and b/target/classes/exoplatform/entity/Book$CATEGORY.class differ
++++diff --git a/target/classes/exoplatform/entity/Book.class b/target/classes/exoplatform/entity/Book.class
++++new file mode 100644
++++index 0000000..405876d
++++Binary files /dev/null and b/target/classes/exoplatform/entity/Book.class differ
++++diff --git a/target/classes/exoplatform/exception/BookNotFoundException.class b/target/classes/exoplatform/exception/BookNotFoundException.class
++++new file mode 100644
++++index 0000000..7734ac4
++++Binary files /dev/null and b/target/classes/exoplatform/exception/BookNotFoundException.class differ
++++diff --git a/target/classes/exoplatform/exception/DuplicateBookException.class b/target/classes/exoplatform/exception/DuplicateBookException.class
++++new file mode 100644
++++index 0000000..a3a5435
++++Binary files /dev/null and b/target/classes/exoplatform/exception/DuplicateBookException.class differ
++++diff --git a/target/classes/exoplatform/utils/PropertyReader.class b/target/classes/exoplatform/utils/PropertyReader.class
++++new file mode 100644
++++index 0000000..0aaf2d2
++++Binary files /dev/null and b/target/classes/exoplatform/utils/PropertyReader.class differ
++++diff --git a/target/classes/exoplatform/utils/Utils.class b/target/classes/exoplatform/utils/Utils.class
++++new file mode 100644
++++index 0000000..1ebaaf7
++++Binary files /dev/null and b/target/classes/exoplatform/utils/Utils.class differ
++++diff --git a/target/jcr-exo-1.0-SNAPSHOT.jar b/target/jcr-exo-1.0-SNAPSHOT.jar
++++new file mode 100644
++++index 0000000..4da898f
++++Binary files /dev/null and b/target/jcr-exo-1.0-SNAPSHOT.jar differ
++++diff --git a/target/maven-archiver/pom.properties b/target/maven-archiver/pom.properties
++++new file mode 100644
++++index 0000000..9c401b4
++++--- /dev/null
+++++++ b/target/maven-archiver/pom.properties
++++@@ -0,0 +1,5 @@
+++++#Generated by Maven
+++++#Fri Jul 13 14:57:28 ICT 2012
+++++version=1.0-SNAPSHOT
+++++groupId=exoplatform
+++++artifactId=jcr-exo
++++diff --git a/target/surefire-reports/TEST-exoplatform.AppTest.xml b/target/surefire-reports/TEST-exoplatform.AppTest.xml
++++new file mode 100644
++++index 0000000..f731d34
++++--- /dev/null
+++++++ b/target/surefire-reports/TEST-exoplatform.AppTest.xml
++++@@ -0,0 +1,62 @@
+++++<?xml version="1.0" encoding="UTF-8" ?>
+++++<testsuite failures="0" time="0.013" errors="0" skipped="0" tests="1" name="exoplatform.AppTest">
+++++  <properties>
+++++    <property name="java.runtime.name" value="Java(TM) SE Runtime Environment"/>
+++++    <property name="sun.boot.library.path" value="/home/binhnv/java/jdk1.6/jre/lib/amd64"/>
+++++    <property name="java.vm.version" value="20.2-b06"/>
+++++    <property name="java.vm.vendor" value="Sun Microsystems Inc."/>
+++++    <property name="java.vendor.url" value="http://java.sun.com/"/>
+++++    <property name="path.separator" value=":"/>
+++++    <property name="guice.disable.misplaced.annotation.check" value="true"/>
+++++    <property name="java.vm.name" value="Java HotSpot(TM) 64-Bit Server VM"/>
+++++    <property name="file.encoding.pkg" value="sun.io"/>
+++++    <property name="user.country" value="US"/>
+++++    <property name="sun.java.launcher" value="SUN_STANDARD"/>
+++++    <property name="sun.os.patch.level" value="unknown"/>
+++++    <property name="java.vm.specification.name" value="Java Virtual Machine Specification"/>
+++++    <property name="user.dir" value="/home/binhnv/java/jcr-exo"/>
+++++    <property name="java.runtime.version" value="1.6.0_27-b07"/>
+++++    <property name="java.awt.graphicsenv" value="sun.awt.X11GraphicsEnvironment"/>
+++++    <property name="java.endorsed.dirs" value="/home/binhnv/java/jdk1.6/jre/lib/endorsed"/>
+++++    <property name="os.arch" value="amd64"/>
+++++    <property name="java.io.tmpdir" value="/tmp"/>
+++++    <property name="line.separator" value="
+++++"/>
+++++    <property name="java.vm.specification.vendor" value="Sun Microsystems Inc."/>
+++++    <property name="os.name" value="Linux"/>
+++++    <property name="classworlds.conf" value="/home/binhnv/java/apache-maven-3.0.4/bin/m2.conf"/>
+++++    <property name="sun.jnu.encoding" value="UTF-8"/>
+++++    <property name="java.library.path" value="/home/binhnv/java/jdk1.6/jre/lib/amd64/server:/home/binhnv/java/jdk1.6/jre/lib/amd64:/home/binhnv/java/jdk1.6/jre/../lib/amd64:/usr/java/packages/lib/amd64:/usr/lib64:/lib64:/lib:/usr/lib"/>
+++++    <property name="java.specification.name" value="Java Platform API Specification"/>
+++++    <property name="java.class.version" value="50.0"/>
+++++    <property name="sun.management.compiler" value="HotSpot 64-Bit Tiered Compilers"/>
+++++    <property name="os.version" value="3.2.0-23-generic"/>
+++++    <property name="user.home" value="/home/binhnv"/>
+++++    <property name="user.timezone" value="Asia/Ho_Chi_Minh"/>
+++++    <property name="java.awt.printerjob" value="sun.print.PSPrinterJob"/>
+++++    <property name="file.encoding" value="UTF-8"/>
+++++    <property name="java.specification.version" value="1.6"/>
+++++    <property name="user.name" value="binhnv"/>
+++++    <property name="java.class.path" value="/home/binhnv/java/apache-maven-3.0.4/boot/plexus-classworlds-2.4.jar"/>
+++++    <property name="java.vm.specification.version" value="1.0"/>
+++++    <property name="sun.arch.data.model" value="64"/>
+++++    <property name="java.home" value="/home/binhnv/java/jdk1.6/jre"/>
+++++    <property name="sun.java.command" value="org.codehaus.plexus.classworlds.launcher.Launcher clean install"/>
+++++    <property name="java.specification.vendor" value="Sun Microsystems Inc."/>
+++++    <property name="user.language" value="en"/>
+++++    <property name="java.vm.info" value="mixed mode"/>
+++++    <property name="java.version" value="1.6.0_27"/>
+++++    <property name="java.ext.dirs" value="/home/binhnv/java/jdk1.6/jre/lib/ext:/usr/java/packages/lib/ext"/>
+++++    <property name="securerandom.source" value="file:/dev/./urandom"/>
+++++    <property name="sun.boot.class.path" value="/home/binhnv/java/jdk1.6/jre/lib/resources.jar:/home/binhnv/java/jdk1.6/jre/lib/rt.jar:/home/binhnv/java/jdk1.6/jre/lib/sunrsasign.jar:/home/binhnv/java/jdk1.6/jre/lib/jsse.jar:/home/binhnv/java/jdk1.6/jre/lib/jce.jar:/home/binhnv/java/jdk1.6/jre/lib/charsets.jar:/home/binhnv/java/jdk1.6/jre/lib/modules/jdk.boot.jar:/home/binhnv/java/jdk1.6/jre/classes"/>
+++++    <property name="java.vendor" value="Sun Microsystems Inc."/>
+++++    <property name="maven.home" value="/home/binhnv/java/apache-maven-3.0.4"/>
+++++    <property name="file.separator" value="/"/>
+++++    <property name="java.vendor.url.bug" value="http://java.sun.com/cgi-bin/bugreport.cgi"/>
+++++    <property name="sun.cpu.endian" value="little"/>
+++++    <property name="sun.io.unicode.encoding" value="UnicodeLittle"/>
+++++    <property name="sun.desktop" value="gnome"/>
+++++    <property name="sun.cpu.isalist" value=""/>
+++++  </properties>
+++++  <testcase time="0.002" classname="exoplatform.AppTest" name="testApp"/>
+++++</testsuite>
++++\ No newline at end of file
++++diff --git a/target/surefire-reports/exoplatform.AppTest.txt b/target/surefire-reports/exoplatform.AppTest.txt
++++new file mode 100644
++++index 0000000..87ea500
++++--- /dev/null
+++++++ b/target/surefire-reports/exoplatform.AppTest.txt
++++@@ -0,0 +1,4 @@
+++++-------------------------------------------------------------------------------
+++++Test set: exoplatform.AppTest
+++++-------------------------------------------------------------------------------
+++++Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.013 sec
++++diff --git a/target/test-classes/exoplatform/AppTest.class b/target/test-classes/exoplatform/AppTest.class
++++new file mode 100644
++++index 0000000..5788b9e
++++Binary files /dev/null and b/target/test-classes/exoplatform/AppTest.class differ
+++diff --git a/src/main/java/exoplatform/BookStoreService.java b/src/main/java/exoplatform/BookStoreService.java
+++index 0754c07..997fa12 100644
+++--- a/src/main/java/exoplatform/BookStoreService.java
++++++ b/src/main/java/exoplatform/BookStoreService.java
+++@@ -26,8 +26,6 @@ import javax.jcr.RepositoryException;
+++ import org.exoplatform.services.cache.CacheService;
+++ import org.exoplatform.services.cache.ExoCache;
+++ import org.exoplatform.services.jcr.RepositoryService;
+++-import org.exoplatform.services.log.ExoLogger;
+++-import org.exoplatform.services.log.Log;
+++ import org.picocontainer.Startable;
+++ 
+++ import exoplatform.entity.Author;
+++@@ -44,8 +42,6 @@ import exoplatform.exception.DuplicateBookException;
+++  */
+++ public class BookStoreService implements Startable {
+++ 
+++-  /* Define a exo log */
+++-  private static final Log log = ExoLogger.getLogger(BookStoreService.class);
+++   /* Define a exo cache */
+++   private ExoCache<Serializable, Book> cache;
+++   /* Define a JCRDataStore object */
+++@@ -53,6 +49,7 @@ public class BookStoreService implements Startable {
+++   
+++   /**
+++    * BookStoreService constructor
++++   * 
+++    * @param rservice
+++    * @param cacheService
+++    * @param dataStorage
+++@@ -61,55 +58,114 @@ public class BookStoreService implements Startable {
+++    */
+++   public BookStoreService(RepositoryService rservice,
+++                           CacheService cacheService,
+++-                          JCRDataStorage dataStorage) throws RepositoryException,
+++-      DuplicateBookException {
++++                          JCRDataStorage dataStorage) {
+++     this.cache = cacheService.getCacheInstance(getClass().getName());
+++     this.jcrDataStorage = dataStorage;
+++   }
+++ 
+++   /**
+++-   * The function init data for datastorage
++++   * Init data for datastorage
+++    */
+++   public void start() {
+++     jcrDataStorage.init();
+++-//    List<Book> books = new ArrayList<Book>(); 
++++  }
++++
++++  /* (non-Javadoc)
++++   * @see org.picocontainer.Startable#stop()
++++   */
++++  public void stop() {
++++    
++++  }
++++  
++++  /**
++++   * create new database
++++   */
++++  private void createDB() {
+++     try {
+++-      Node authorNode = addAuthor("Conan Doyle", "England", "123456789");
+++-      Node bookNode = addBook("The Mask", CATEGORY.NOVEL, "Test", authorNode.getPath());
+++-      Node bookNode1 = addBook("The Sign of the four", CATEGORY.NOVEL, "Test", authorNode.getPath());
+++-      List<String> nodes = new ArrayList<String>();
+++-      nodes.add(bookNode.getPath());
+++-      nodes.add(bookNode1.getPath());
+++-      Node userNode = addUser("binhnv", "12345", "Nguyen Vinh Binh", "Hanoi", "123456789", nodes);
++++      Node authorNode1 = addAuthor("Conan Doyle", "England", "123456789");
++++      Node authorNode2 = addAuthor("JK Rowling", "England", "987654321");
++++      Node authorNode3 = addAuthor("Sydney Sheldon", "US", "678912345");
++++      Node authorNode4 = addAuthor("Mario Puzzo", "Italia", "012345678");
++++      Node authorNode5 = addAuthor("Ma Van Khang", "Vietnam", "23451234");
++++      Node authorNode6 = addAuthor("Victor Huygo", "France", "8760985544");
++++      
++++      Node bookNode1 = addBook("Shelock Holme", CATEGORY.NOVEL, "The sign of the Four", authorNode1.getPath());
++++      Node bookNode2 = addBook("Harry Porter", CATEGORY.NOVEL, "Alice in wonder land", authorNode2.getPath());
++++      Node bookNode3 = addBook("Seal team six", CATEGORY.NOVEL, "Seal team six", authorNode3.getPath());
++++      Node bookNode4 = addBook("Hibernate in action", CATEGORY.TECHNICAL, "Hibernate", authorNode4.getPath());
++++      Node bookNode5 = addBook("Napoleon", CATEGORY.HISTORY, "Napoleon", authorNode5.getPath());
++++      Node bookNode6 = addBook("Jouney to the West", CATEGORY.COMICS, "Jouney to the West", authorNode6.getPath());
++++      
++++      List<String> nodes1 = new ArrayList<String>();
++++      nodes1.add(bookNode1.getPath());
++++      nodes1.add(bookNode2.getPath());
++++      nodes1.add(bookNode3.getPath());
++++      Node userNode1 = addUser("binhnv", "12345", "Nguyen Vinh Binh", "Hanoi", "123456789", nodes1);
++++      
++++      List<String> nodes2 = new ArrayList<String>();
++++      nodes2.add(bookNode5.getPath());
++++      nodes2.add(bookNode6.getPath());
++++      nodes2.add(bookNode1.getPath());
++++      Node userNode2 = addUser("huongdt", "54321", "Doan Thu Huong", "Hanoi", "987654321", nodes2);
+++     } catch (DuplicateBookException e) {
+++       e.printStackTrace();
+++     } catch (RepositoryException e) {
+++       e.printStackTrace();
+++     }
+++-//    addMultiBook();
+++-//    addMultiAuthor();
+++-//    books = searchBookByNameLikeXPath("Holme");
+++-//    if (books != null && books.size() > 0) {
+++-//      for (Book book : books) {
+++-//        System.out.println("+ ================================================================== +");
+++-//        System.out.println("+                        book id : " + book.getId() + "              +");
+++-//        System.out.println("+                        book name : " + book.getName() + "              +");
+++-//        System.out.println("+                        book category : " + Utils.bookCategoryEnumToString(book.getCategory()) + "              +");
+++-//        System.out.println("+                        book content : " + book.getContent() + "              +");
+++-//        System.out.println("+ ================================================================== +");
+++-//      }
+++-//    }
+++   }
+++-
+++-  /* (non-Javadoc)
+++-   * @see org.picocontainer.Startable#stop()
++++  
++++  /**
++++   * get user by name with sql statement
++++   * 
++++   * @param username
++++   * @return
+++    */
+++-  public void stop() {
+++-
++++  public User getUserByNameSQL(String username) {
++++    return jcrDataStorage.getUserByNameSQL(username);
++++  }
++++  
++++  /**
++++   * get user by name with xpath statement
++++   * 
++++   * @param username
++++   * @return
++++   */
++++  public User getUserByNameXPath(String username) {
++++    return jcrDataStorage.getUserByNameXPath(username);
++++  }
++++  
++++  /**
++++   * get user by name in range with sql statement
++++   * 
++++   * @param username
++++   * @return
++++   */
++++  public User getUserByNameLimtSQL(String username) {
++++    return jcrDataStorage.getUserByNameLimtSQL(username);
++++  }
++++  
++++  /**
++++   * get user by name in range with xpath statement
++++   * 
++++   * @param username
++++   * @return
++++   */
++++  public User getUserByNameLimtXPath(String username) {
++++    return jcrDataStorage.getUserByNameLimtXPath(username);
++++  }
++++  
++++  /**
++++   * get user by book name with sql statement
++++   * 
++++   * @param bookName
++++   * @return
++++   */
++++  public User getUserByBookQuery(String bookName) {
++++    return jcrDataStorage.getUserByBookQuery(bookName);
+++   }
+++   
+++   /**
+++-   * This function support for add new book to datastorage
++++   * add new book to datastorage
+++    * 
+++    * @param bookName
+++    * @param category
+++@@ -123,52 +179,37 @@ public class BookStoreService implements Startable {
+++   }
+++   
+++   /**
++++   * add new author to datastorage
+++    * 
+++    * @param authorName
+++    * @param authorAddress
+++    * @param authorPhone
+++    * @return
+++    */
+++-  public Node addAuthor(String authorName, String authorAddress, String authorPhone) {
++++  public Node addAuthor(String authorName, String authorAddress, String authorPhone) throws DuplicateBookException {
+++     Author author = new Author(authorName, authorAddress, authorPhone);
+++     return jcrDataStorage.addAuthor(author);
+++   }
+++   
+++-  public Node addUser(String username, String password, String fullname, String address, String phone, List<String> nodes) {
++++  /**
++++   * add new user to datastorage
++++   * 
++++   * @param username
++++   * @param password
++++   * @param fullname
++++   * @param address
++++   * @param phone
++++   * @param nodes
++++   * @return
++++   * @throws DuplicateBookException
++++   */
++++  public Node addUser(String username, String password, String fullname, String address, String phone, List<String> nodes) throws DuplicateBookException {
+++     User user = new User(username, password, fullname, address, phone);
+++     return jcrDataStorage.addUser(user, nodes);
+++   }
+++   
+++   /**
+++-   * This function support for add multi book to datastorage
+++-   */
+++-  public void addMultiAuthor() {
+++-      addAuthor("Conan Doyle", "England", "123456789");
+++-      addAuthor("JK Rowling", "England", "987654321");
+++-      addAuthor("Sydney Sheldon", "US", "678912345");
+++-      addAuthor("Mario Puzzo", "Italia", "012345678");
+++-      addAuthor("Ma Van Khang", "Vietnam", "23451234");
+++-      addAuthor("Victor Huygo", "France", "8760985544");
+++-  } 
+++-  
+++-  /**
+++-   * This function support for add multi book to datastorage
+++-   */
+++-  public void addMultiBook() {
+++-//    try {
+++-//      addBook("Shelock Holme", CATEGORY.NOVEL, "The sign of the Four");
+++-//      addBook("Alice in wonder land", CATEGORY.COMICS, "Alice in wonder land");
+++-//      addBook("Seal team six", CATEGORY.NOVEL, "Seal team six");
+++-//      addBook("Hibernate in action", CATEGORY.TECHNICAL, "Hibernate");
+++-//      addBook("Napoleon", CATEGORY.HISTORY, "Napoleon");
+++-//      addBook("Jouney to the West", CATEGORY.COMICS, "Jouney to the West");
+++-//    } catch (DuplicateBookException de) {
+++-//      log.error("Duplicate book", de);
+++-//    }
+++-  } 
+++-  
+++-  /**
+++-   * The function support for search book by name(using SQL)
++++   * search book by name(using SQL)
+++    * 
+++    * @param name The name of book
+++    * @return
+++@@ -178,7 +219,7 @@ public class BookStoreService implements Startable {
+++   }
+++   
+++   /**
+++-   * The function support for search book by name(using XPath)
++++   * search book by name(using XPath)
+++    * 
+++    * @param name The name of book
+++    * @return
+++@@ -188,7 +229,7 @@ public class BookStoreService implements Startable {
+++   }
+++   
+++   /**
+++-   * The function support for search book by name but limit amount of records(using SQL)
++++   * search book by name but limit amount of records(using SQL)
+++    * 
+++    * @param name The name of book
+++    * @return
+++@@ -198,7 +239,7 @@ public class BookStoreService implements Startable {
+++   }
+++   
+++   /**
+++-   * The function support search book by name with like condition(using SQL)
++++   * search book by name with like condition(using SQL)
+++    * 
+++    * @param name The name of book
+++    * @return
+++@@ -208,7 +249,7 @@ public class BookStoreService implements Startable {
+++   }
+++   
+++   /**
+++-   * The function support search book by name with like condition(using XPath)
++++   * search book by name with like condition(using XPath)
+++    * 
+++    * @param name The name of book
+++    * @return
+++@@ -218,7 +259,7 @@ public class BookStoreService implements Startable {
+++   }
+++   
+++   /**
+++-   * The function support get book by book's id
++++   * get book by book's id
+++    * 
+++    * @param id The id of book
+++    * @return
+++diff --git a/src/main/java/exoplatform/JCRDataStorage.java b/src/main/java/exoplatform/JCRDataStorage.java
+++index 37addf1..9f1a9c1 100644
+++--- a/src/main/java/exoplatform/JCRDataStorage.java
++++++ b/src/main/java/exoplatform/JCRDataStorage.java
+++@@ -57,10 +57,13 @@ public class JCRDataStorage {
+++   private static final Log log = ExoLogger.getLogger(JCRDataStorage.class);
+++   /* Define a constant of parent path */
+++   public static final String DEFAULT_PARENT_PATH = "/exostore:bookstore";
++++  /* Define a constant of book path */
+++   public static final String DEFAULT_PARENT_BOOK_PATH = "/exostore:book";
++++  /* Define a constant of author path */
+++   public static final String DEFAULT_PARENT_AUTHOR_PATH = "/exostore:author";
++++  /* Define a constant of user path */
+++   public static final String DEFAULT_PARENT_USER_PATH = "/exostore:user";
+++-  public static final String DEFAULT_PARENT_BOOK_USER_PATH = "/exostore:bookuser";
++++  /* Define a constant of workspace path */
+++   public static final String DEFAULT_WORKSPACE_NAME = "bookstore";
+++   /* Define a RepositoryService which support integrate with repository */
+++   private RepositoryService repoService;
+++@@ -74,7 +77,7 @@ public class JCRDataStorage {
+++   }
+++   
+++   /**
+++-   * The function prepare node and data for repository
++++   * Prepare node and data for repository
+++    */
+++   public void init() {
+++     /* create SessionProvider */
+++@@ -100,7 +103,7 @@ public class JCRDataStorage {
+++   }
+++   
+++   /**
+++-   * The function support for get node from path  
++++   * get node from path  
+++    * 
+++    * @param nodePath The path of node by String type
+++    * @param sessionProvider The session 
+++@@ -112,7 +115,7 @@ public class JCRDataStorage {
+++   }
+++   
+++   /**
+++-   * The function get session provider and return a session of workspace
++++   * get session provider and return a session of workspace
+++    * 
+++    * @param sessionProvider
+++    * @return The session
+++@@ -124,7 +127,7 @@ public class JCRDataStorage {
+++   }
+++   
+++   /**
+++-   * The function support for get book by book id
++++   * get book by book id
+++    * 
+++    * @param id The id of book
+++    * @return Book
+++@@ -132,10 +135,8 @@ public class JCRDataStorage {
+++   public Book getBook(String id) {
+++     SessionProvider sProvider = SessionProvider.createSystemProvider();
+++     try {
+++-      Node node = getNodeByPath(DEFAULT_PARENT_PATH + "/" + id, sProvider);
++++      Node node = getNodeByPath(DEFAULT_PARENT_PATH + DEFAULT_PARENT_BOOK_PATH + "/" + id, sProvider);
+++       return createBookByNode(node);
+++-    } catch (PathNotFoundException pe) {
+++-      return null;
+++     } catch (RepositoryException re) {
+++       log.error("Can not find this book", re);
+++       return null;
+++@@ -144,10 +145,16 @@ public class JCRDataStorage {
+++     }
+++   }
+++   
++++  /**
++++   * get user by user id
++++   * 
++++   * @param id
++++   * @return
++++   */
+++   public User getUser(String id) {
+++     SessionProvider sProvider = SessionProvider.createSystemProvider();
+++     try {
+++-      Node node = getNodeByPath(DEFAULT_PARENT_PATH + DEFAULT_PARENT_USER_PATH, sProvider);
++++      Node node = getNodeByPath(DEFAULT_PARENT_PATH + DEFAULT_PARENT_USER_PATH + "/" + id, sProvider);
+++       return createUserByNode(node);
+++     } catch (RepositoryException re) {
+++       log.error("Can not find this user", re);
+++@@ -158,7 +165,26 @@ public class JCRDataStorage {
+++   }
+++   
+++   /**
+++-   * The function which add new book to workspace
++++   * get author by author id
++++   * 
++++   * @param id
++++   * @return
++++   */
++++  public Author getAuthor(String id) {
++++    SessionProvider sProvider = SessionProvider.createSystemProvider();
++++    try {
++++      Node node = getNodeByPath(DEFAULT_PARENT_PATH + DEFAULT_PARENT_AUTHOR_PATH + "/" + id, sProvider);
++++      return createAuthorByNode(node);
++++    } catch (RepositoryException re) {
++++      log.error("Can not find this author", re);
++++      return null;
++++    } finally {
++++      sProvider.close();
++++    }
++++  }
++++  
++++  /**
++++   * add new book to workspace
+++    * 
+++    * @param book The new book which want to add
+++    * @return Book
+++@@ -185,9 +211,6 @@ public class JCRDataStorage {
+++       bookNode.setProperty(BookNodeTypes.EXO_BOOK_AUTHOR, getNodeByPath(nodePath, sProvider));
+++       parentNode.getSession().save();
+++       return bookNode;
+++-    } catch (PathNotFoundException e) {
+++-      log.error("Path not found", e);
+++-      return null;
+++     } catch (RepositoryException e) {
+++       log.error("Failed to add book", e);
+++       return null;
+++@@ -196,8 +219,18 @@ public class JCRDataStorage {
+++     }
+++   }
+++   
+++-  public Node addAuthor(Author author) {
++++  /**
++++   * add new author
++++   * 
++++   * @param author
++++   * @return
++++   * @throws DuplicateBookException
++++   */
++++  public Node addAuthor(Author author) throws DuplicateBookException {
+++     SessionProvider sProvider = SessionProvider.createSystemProvider();
++++    if (isExistAuthorName(author.getName(), sProvider)) {
++++      throw new DuplicateBookException(String.format("Author %s is existed", author.getName()));
++++    }
+++     author.setAuthorId(Utils.authorId++);
+++     try {
+++       Node parentNode = getNodeByPath(DEFAULT_PARENT_PATH + DEFAULT_PARENT_AUTHOR_PATH, sProvider);
+++@@ -215,8 +248,19 @@ public class JCRDataStorage {
+++     }
+++   }
+++   
+++-  public Node addUser(User user, List<String> nodes) {
++++  /**
++++   * add new user
++++   * 
++++   * @param user
++++   * @param nodes
++++   * @return
++++   * @throws DuplicateBookException
++++   */
++++  public Node addUser(User user, List<String> nodes) throws DuplicateBookException {
+++     SessionProvider sProvider = SessionProvider.createSystemProvider();
++++    if (isExistUserName(user.getUsername(), sProvider)) {
++++      throw new DuplicateBookException(String.format("User %s is existed", user.getUsername()));
++++    }
+++     user.setUserId(Utils.userId++);
+++     try {
+++       Node parentNode = getNodeByPath(DEFAULT_PARENT_PATH + DEFAULT_PARENT_USER_PATH, sProvider);
+++@@ -243,7 +287,158 @@ public class JCRDataStorage {
+++   }
+++   
+++   /**
+++-   * The function support delete a book by book id
++++   * get user by name with sql statement
++++   * 
++++   * @param username
++++   * @return
++++   */
++++  public User getUserByNameSQL(String username) {
++++    username.replaceAll("\"", "\\\"").replaceAll("-", StringUtils.EMPTY);
++++    username = username.trim();
++++    SessionProvider sProvider = SessionProvider.createSystemProvider();
++++    StringBuffer queryString = new StringBuffer("Select * from " + BookNodeTypes.EXO_USER);
++++    queryString.append(" where " + BookNodeTypes.EXO_USER_NAME + " = '" + username + "'");
++++    try {
++++      QueryManager queryManager = getSession(sProvider).getWorkspace().getQueryManager();
++++      Query query = queryManager.createQuery(queryString.toString(), Query.SQL);
++++      QueryResult result = query.execute();
++++      NodeIterator nodes = result.getNodes();
++++      if (nodes.getSize() > 0) {
++++        Node node = nodes.nextNode();
++++        return createUserByNode(node);
++++      }
++++      return null;
++++    } catch (RepositoryException re) {
++++      log.error("Can not get user by name", re);
++++      return null;
++++    } finally {
++++      sProvider.close();
++++    }
++++  }
++++  
++++  /**
++++   * get user by book name
++++   * 
++++   * @param bookName
++++   * @return
++++   */
++++  public User getUserByBookQuery(String bookName) {
++++    bookName.replaceAll("\"", "\\\"").replaceAll("-", StringUtils.EMPTY);
++++    bookName = bookName.trim();
++++    SessionProvider sProvider = SessionProvider.createSystemProvider();
++++    StringBuffer queryString = new StringBuffer("Select * from " + BookNodeTypes.EXO_USER);
++++    queryString.append(" where /" + BookNodeTypes.EXO_BOOK + "/" + BookNodeTypes.EXO_BOOK_NAME + "=" + bookName + "'");
++++    try {
++++      QueryManager queryManager = getSession(sProvider).getWorkspace().getQueryManager();
++++      Query query = queryManager.createQuery(queryString.toString(), Query.SQL);
++++      QueryResult result = query.execute();
++++      NodeIterator nodes = result.getNodes();
++++      if (nodes.getSize() > 0) {
++++        Node node = nodes.nextNode();
++++        return createUserByNode(node);
++++      }
++++      return null;
++++    } catch (RepositoryException re) {
++++      log.error("Can not get user by name", re);
++++      return null;
++++    } finally {
++++      sProvider.close();
++++    }
++++  }
++++  
++++  /**
++++   * get user by name with xpath
++++   * 
++++   * @param username
++++   * @return
++++   */
++++  public User getUserByNameXPath(String username) {
++++    username.replaceAll("\"", "\\\"").replaceAll("-", StringUtils.EMPTY);
++++    username = username.trim();
++++    SessionProvider sProvider = SessionProvider.createSystemProvider();
++++    StringBuffer queryString = new StringBuffer("//element(*, " + BookNodeTypes.EXO_USER
++++        + ")[(jcr:like(@" + BookNodeTypes.EXO_USER_NAME + ",'%" + username + "%'" + ") and @" + BookNodeTypes.EXO_USER_ADDRESS + "='Hanoi'" + ")]");
++++    try {
++++      QueryManager queryManager = getSession(sProvider).getWorkspace().getQueryManager();
++++      Query query = queryManager.createQuery(queryString.toString(), Query.XPATH);
++++      QueryResult result = query.execute();
++++      NodeIterator nodes = result.getNodes();
++++      if (nodes.getSize() > 0) {
++++        Node node = nodes.nextNode();
++++        PropertyReader reader = new PropertyReader(node);        
++++        return createUserByNode(node);
++++      }
++++      return null;
++++    } catch (RepositoryException re) {
++++      log.error("Can not get user by name(XPath)", re);
++++      return null;
++++    } finally {
++++      sProvider.close();
++++    }    
++++  }
++++  
++++  /**
++++   * get user by name in range with sql statement 
++++   * 
++++   * @param username
++++   */
++++  public User getUserByNameLimtSQL(String username) {
++++    username.replaceAll("\"", "\\\"").replaceAll("-", StringUtils.EMPTY);
++++    username = username.trim();
++++    SessionProvider sProvider = SessionProvider.createSystemProvider();
++++    StringBuffer queryString = new StringBuffer("Select * from " + BookNodeTypes.EXO_USER);
++++    queryString.append(" where " + BookNodeTypes.EXO_USER_NAME + " = '" + username + "'");
++++    try {
++++      QueryManager queryManager = getSession(sProvider).getWorkspace().getQueryManager();
++++      QueryImpl query = (QueryImpl) queryManager.createQuery(queryString.toString(), Query.SQL);
++++      query.setOffset(0L);
++++      query.setLimit(3L);
++++      QueryResult result = query.execute();
++++      NodeIterator nodes = result.getNodes();
++++      if (nodes.getSize() > 0) {
++++        Node node = nodes.nextNode();
++++        return createUserByNode(node);
++++      }
++++      return null;
++++    } catch (RepositoryException re) {
++++      log.error("Can not get user by name", re);
++++      return null;
++++    } finally {
++++      sProvider.close();
++++    }
++++  }
++++  
++++  /**
++++   * get user by name in range with xpath statement 
++++   * 
++++   * @param username
++++   * @return
++++   */
++++  public User getUserByNameLimtXPath(String username) {
++++    username.replaceAll("\"", "\\\"").replace("-", StringUtils.EMPTY);
++++    username = username.trim();
++++    StringBuffer sb = new StringBuffer("//element(*," + BookNodeTypes.EXO_USER + ")");
++++    SessionProvider sProvider = SessionProvider.createSystemProvider();
++++    try {
++++      QueryManager queryManager = getSession(sProvider).getWorkspace().getQueryManager();
++++      QueryImpl query = (QueryImpl) queryManager.createQuery(sb.toString(), Query.XPATH);
++++      QueryResult result = query.execute();
++++      NodeIterator nodes = result.getNodes();
++++      if (nodes.getSize() > 0) {
++++        Node node = nodes.nextNode();
++++        return createUserByNode(node);
++++      }
++++      return null;
++++    } catch (RepositoryException re) {
++++      log.error("Can not get user by name(XPath)", re);
++++      return null;
++++    } finally {
++++      sProvider.close();
++++    }
++++  }
++++  
++++  /**
++++   * delete a book by book id
+++    * 
+++    * @param id The id of book
+++    * @throws BookNotFoundException
+++@@ -254,8 +449,6 @@ public class JCRDataStorage {
+++       Node node = getNodeByPath(DEFAULT_PARENT_PATH + "/" + id, sProvider);
+++       node.remove();
+++       node.getSession().save();
+++-    } catch (PathNotFoundException pe) {
+++-        throw new BookNotFoundException(String.format("Book %s is not found", id));
+++     } catch (RepositoryException re) {
+++       log.error("Failed to delete book by id", re);
+++     } finally {
+++@@ -264,7 +457,7 @@ public class JCRDataStorage {
+++   }
+++   
+++   /**
+++-   * The function support delete all of book in workspace
++++   * delete all of book in workspace
+++    */
+++   public void deleteAll() {
+++     SessionProvider sProvider = SessionProvider.createSystemProvider();
+++@@ -272,8 +465,6 @@ public class JCRDataStorage {
+++       Node parentNode = getNodeByPath(DEFAULT_PARENT_PATH, sProvider);
+++       parentNode.remove();
+++       parentNode.getSession().save();
+++-    } catch (PathNotFoundException pe) {
+++-      log.error("Failed to delete all book", pe);
+++     } catch (RepositoryException e) {
+++       log.error("Failed to delete all book", e);
+++     } finally {
+++@@ -282,7 +473,7 @@ public class JCRDataStorage {
+++   }
+++   
+++   /**
+++-   * The function support edit a exist book
++++   * edit a exist book
+++    * 
+++    * @param book The book want to delete
+++    * @throws BookNotFoundException
+++@@ -305,7 +496,7 @@ public class JCRDataStorage {
+++   }
+++   
+++   /**
+++-   * The function support get all book in workspace 
++++   * get all book in workspace 
+++    * 
+++    * @return List<Book>
+++    */
+++@@ -337,7 +528,7 @@ public class JCRDataStorage {
+++   }
+++   
+++   /**
+++-   * The function support search book by name(using SQL)
++++   * search book by name(using SQL)
+++    * 
+++    * @param name The name of book
+++    * @return List<Book>
+++@@ -374,7 +565,7 @@ public class JCRDataStorage {
+++   }
+++   
+++   /**
+++-   * The function support search book by name(using XPath)
++++   * search book by name(using XPath)
+++    * 
+++    * @param name The name of book
+++    * @return List<Book>
+++@@ -410,7 +601,7 @@ public class JCRDataStorage {
+++   }
+++   
+++   /**
+++-   * The function support search book by name with limit of result(using SQL)
++++   * search book by name with limit of result(using SQL)
+++    * 
+++    * @param name The name of book
+++    * @return List<Book>
+++@@ -449,7 +640,7 @@ public class JCRDataStorage {
+++   }
+++   
+++   /**
+++-   * The function support search book by name with like condition(using SQL)
++++   * search book by name with like condition(using SQL)
+++    * 
+++    * @param name The name of book
+++    * @return List<Book>
+++@@ -485,7 +676,7 @@ public class JCRDataStorage {
+++   }
+++   
+++   /**
+++-   * The function support search book by name with like condition(using XPath)
++++   * search book by name with like condition(using XPath)
+++    * 
+++    * @param name The name of book
+++    * @return List<Book>
+++@@ -521,7 +712,7 @@ public class JCRDataStorage {
+++   }
+++   
+++   /**
+++-   * The function check book exist by name
++++   * check book exist by name
+++    * 
+++    * @param bookName The name of book
+++    * @param sProvider
+++@@ -550,6 +741,52 @@ public class JCRDataStorage {
+++   }
+++   
+++   /**
++++   * check author exist by name
++++   * 
++++   * @param authorName
++++   * @param sProvider
++++   * @return
++++   */
++++  private boolean isExistAuthorName(String authorName, SessionProvider sProvider) {
++++    authorName.replaceAll("\"", "\\\"").replaceAll("-", StringUtils.EMPTY);
++++    StringBuffer sb = new StringBuffer("Select * from " + BookNodeTypes.EXO_AUTHOR);
++++    sb.append(" where " + BookNodeTypes.EXO_AUTHOR_NAME + " = '" + authorName + "'");
++++    try {
++++      QueryManager queryManager = getSession(sProvider).getWorkspace().getQueryManager();
++++      Query query = queryManager.createQuery(sb.toString(), Query.SQL);
++++      QueryResult result = query.execute();
++++      NodeIterator nodes = result.getNodes();
++++      return nodes.hasNext();
++++    } catch (RepositoryException re) {
++++      log.error("Failed to check exist author name", re);
++++      return false;
++++    } 
++++  }
++++  
++++  /**
++++   * check user exist by name
++++   * 
++++   * @param username
++++   * @param sProvider
++++   * @return
++++   */
++++  private boolean isExistUserName(String username, SessionProvider sProvider) {
++++    username.replaceAll("\"", "\\\"").replaceAll("-", StringUtils.EMPTY);
++++    StringBuffer queryString = new StringBuffer("Select * from " + BookNodeTypes.EXO_USER);
++++    queryString.append(" where " + BookNodeTypes.EXO_USER_NAME + " = '" + username + "'");
++++    try {
++++      QueryManager queryManager = getSession(sProvider).getWorkspace().getQueryManager();
++++      Query query = queryManager.createQuery(queryString.toString(), Query.SQL);
++++      QueryResult result = query.execute();
++++      NodeIterator nodes = result.getNodes();
++++      return nodes.hasNext();
++++    } catch (RepositoryException re) {
++++      log.error("Failed to check exist user name", re);
++++      return false;
++++    }
++++  }
++++  
++++  /**
+++    * Create book by node data
+++    * 
+++    * @param node
+++@@ -574,6 +811,7 @@ public class JCRDataStorage {
+++   }
+++   
+++   /**
++++   * Create user by node data
+++    * 
+++    * @param node
+++    * @return
+++@@ -600,6 +838,7 @@ public class JCRDataStorage {
+++   }
+++   
+++   /**
++++   * Create author by node data
+++    * 
+++    * @param node
+++    * @return
+++diff --git a/src/main/java/exoplatform/entity/BookUser.java b/src/main/java/exoplatform/entity/BookUser.java
+++deleted file mode 100644
+++index bc1053b..0000000
+++--- a/src/main/java/exoplatform/entity/BookUser.java
++++++ /dev/null
+++@@ -1,75 +0,0 @@
+++-/*
+++- * Copyright (C) 2003-2012 eXo Platform SAS.
+++- *
+++- * This program is free software: you can redistribute it and/or modify
+++- * it under the terms of the GNU Affero General Public License as published by
+++- * the Free Software Foundation, either version 3 of the License, or
+++- * (at your option) any later version.
+++- *
+++- * This program is distributed in the hope that it will be useful,
+++- * but WITHOUT ANY WARRANTY; without even the implied warranty of
+++- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+++- * GNU Affero General Public License for more details.
+++- *
+++- * You should have received a copy of the GNU Affero General Public License
+++- * along with this program. If not, see <http://www.gnu.org/licenses/>.
+++- */
+++-package exoplatform.entity;
+++-
+++-import org.apache.lucene.store.Lock.With;
+++-
+++-/**
+++- * Created by The eXo Platform SAS
+++- * Author : BinhNV
+++- *          binhnv@exoplatform.com
+++- * Jul 16, 2012  
+++- */
+++-public class BookUser {
+++-
+++-  private int userId;
+++-  private int bookId;
+++-  
+++-  /**
+++-   * BookUser constructor without parameter
+++-   */
+++-  public BookUser() {
+++-    
+++-  }
+++-  
+++-  /**
+++-   * BookUser constructor with parameter
+++-   */
+++-  public BookUser(int userId, int bookId) {
+++-    this.userId = userId;
+++-    this.bookId = bookId;
+++-  }
+++-
+++-  /**
+++-   * @return the userId
+++-   */
+++-  public int getUserId() {
+++-    return userId;
+++-  }
+++-
+++-  /**
+++-   * @param userId the userId to set
+++-   */
+++-  public void setUserId(int userId) {
+++-    this.userId = userId;
+++-  }
+++-
+++-  /**
+++-   * @return the bookId
+++-   */
+++-  public int getBookId() {
+++-    return bookId;
+++-  }
+++-
+++-  /**
+++-   * @param bookId the bookId to set
+++-   */
+++-  public void setBookId(int bookId) {
+++-    this.bookId = bookId;
+++-  }
+++-
+++-}
+++diff --git a/src/main/java/exoplatform/utils/PropertyReader.java b/src/main/java/exoplatform/utils/PropertyReader.java
+++index 98018bb..af34805 100644
+++--- a/src/main/java/exoplatform/utils/PropertyReader.java
++++++ b/src/main/java/exoplatform/utils/PropertyReader.java
+++@@ -46,7 +46,7 @@ public class PropertyReader {
+++   }
+++   
+++   /**
+++-   * The function get property of node 
++++   * get property of node 
+++    * and change to Double type 
+++    * 
+++    * @param name The name of node
+++@@ -58,7 +58,7 @@ public class PropertyReader {
+++   }
+++   
+++   /**
+++-   * The function get property of node 
++++   * get property of node 
+++    * and change to Long type
+++    * 
+++    * @param name The name of node
+++@@ -70,7 +70,7 @@ public class PropertyReader {
+++   }
+++   
+++   /**
+++-   * The function get property of node
++++   * get property of node
+++    * and change to String type
+++    * 
+++    * @param name The name of node
+++@@ -82,7 +82,7 @@ public class PropertyReader {
+++   }
+++   
+++   /**
+++-   * The function get property of node
++++   * get property of node
+++    * and change to Date type
+++    * 
+++    * @param name The name of node
+++@@ -94,7 +94,7 @@ public class PropertyReader {
+++   }
+++   
+++   /**
+++-   * The function get property of node
++++   * get property of node
+++    * and change to Boolean type
+++    * 
+++    * @param name The name of node
+++@@ -106,7 +106,7 @@ public class PropertyReader {
+++   }
+++   
+++   /**
+++-   * The function get value properties of node 
++++   * get value properties of node 
+++    * and change to String array
+++    * 
+++    * @param name The name of node
+++@@ -118,7 +118,7 @@ public class PropertyReader {
+++   }
+++   
+++   /**
+++-   * The function get value properties of node
++++   * get value properties of node
+++    * and change to List<String>
+++    * 
+++    * @param name The name of node
+++@@ -131,7 +131,7 @@ public class PropertyReader {
+++   }
+++   
+++   /**
+++-   * The function get value properties of node
++++   * get value properties of node
+++    * and change to Set<String>
+++    * 
+++    * @param name The name of node
+++@@ -146,7 +146,7 @@ public class PropertyReader {
+++   }
+++   
+++   /**
+++-   * The function get value properties of node
++++   * get value properties of node
+++    * and change to String array
+++    * 
+++    * @param values The array of value
+++@@ -162,7 +162,7 @@ public class PropertyReader {
+++   }
+++   
+++   /**
+++-   * The function get value properties of node
++++   * get value properties of node
+++    * and return List<String>
+++    * @param values The Value array
+++    * @return List<String>
+++diff --git a/src/main/java/exoplatform/utils/Utils.java b/src/main/java/exoplatform/utils/Utils.java
+++index 2e97c21..d3fe4d8 100644
+++--- a/src/main/java/exoplatform/utils/Utils.java
++++++ b/src/main/java/exoplatform/utils/Utils.java
+++@@ -67,10 +67,7 @@ public class Utils {
+++    * @return Book.CATEGORY of category
+++    */
+++   public static Book.CATEGORY bookCategoryStringToEnum(String category) {
+++-    if (category != null) {
+++-      return Book.CATEGORY.valueOf(category);
+++-    }
+++-    return null;
++++    return category != null ? Book.CATEGORY.valueOf(category) : null;
+++   }
+++   
+++ }
+++diff --git a/src/test/java/exoplatform/AppTest.java b/src/test/java/exoplatform/AppTest.java
+++deleted file mode 100644
+++index 472b9fd..0000000
+++--- a/src/test/java/exoplatform/AppTest.java
++++++ /dev/null
+++@@ -1,38 +0,0 @@
+++-package exoplatform;
+++-
+++-import junit.framework.Test;
+++-import junit.framework.TestCase;
+++-import junit.framework.TestSuite;
+++-
+++-/**
+++- * Unit test for simple App.
+++- */
+++-public class AppTest 
+++-    extends TestCase
+++-{
+++-    /**
+++-     * Create the test case
+++-     *
+++-     * @param testName name of the test case
+++-     */
+++-    public AppTest( String testName )
+++-    {
+++-        super( testName );
+++-    }
+++-
+++-    /**
+++-     * @return the suite of tests being tested
+++-     */
+++-    public static Test suite()
+++-    {
+++-        return new TestSuite( AppTest.class );
+++-    }
+++-
+++-    /**
+++-     * Rigourous Test :-)
+++-     */
+++-    public void testApp()
+++-    {
+++-        assertTrue( true );
+++-    }
+++-}
+++diff --git a/src/test/java/exoplatform/BookStoreTest.java b/src/test/java/exoplatform/BookStoreTest.java
+++new file mode 100644
+++index 0000000..a5d3c84
+++--- /dev/null
++++++ b/src/test/java/exoplatform/BookStoreTest.java
+++@@ -0,0 +1,29 @@
++++/*
++++ * Copyright (C) 2003-2012 eXo Platform SAS.
++++ *
++++ * This program is free software: you can redistribute it and/or modify
++++ * it under the terms of the GNU Affero General Public License as published by
++++ * the Free Software Foundation, either version 3 of the License, or
++++ * (at your option) any later version.
++++ *
++++ * This program is distributed in the hope that it will be useful,
++++ * but WITHOUT ANY WARRANTY; without even the implied warranty of
++++ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
++++ * GNU Affero General Public License for more details.
++++ *
++++ * You should have received a copy of the GNU Affero General Public License
++++ * along with this program. If not, see <http://www.gnu.org/licenses/>.
++++ */
++++package exoplatform;
++++
++++import junit.framework.TestCase;
++++
++++/**
++++ * Created by The eXo Platform SAS
++++ * Author : BinhNV
++++ *          binhnv@exoplatform.com
++++ * Jul 17, 2012  
++++ */
++++public class BookStoreTest extends TestCase {
++++
++++}
+++diff --git a/src/test/resources/conf/portal/repository-configuration.xml b/src/test/resources/conf/portal/repository-configuration.xml
+++new file mode 100644
+++index 0000000..36cc0f3
+++--- /dev/null
++++++ b/src/test/resources/conf/portal/repository-configuration.xml
+++@@ -0,0 +1,102 @@
++++<repository-service default-repository="repository">
++++   <repositories>
++++
++++    <repository name="repository" system-workspace="system" default-workspace="collaboration">
++++     <security-domain>gatein-domain</security-domain>
++++     <access-control>optional</access-control>
++++     <authentication-policy>org.exoplatform.services.jcr.impl.core.access.JAASAuthenticator</authentication-policy>
++++     <workspaces>
++++       <workspace name="system" auto-init-root-nodetype="nt:unstructured" 
++++                  auto-init-permissions="*:/platform/administrators read;*:/platform/administrators add_node;*:/platform/administrators set_property;*:/platform/administrators remove" >
++++          <!-- for system storage -->
++++          <container class="org.exoplatform.services.jcr.impl.storage.jdbc.JDBCWorkspaceDataContainer">
++++            <properties>
++++              <property name="sourceName" value="jdbcexo"/>
++++              <property name="dialect" value="hsqldb"/>
++++              <!-- property name="db-type" value="mysql"/ -->
++++              <property name="multi-db" value="false"/>
++++              <property name="update-storage" value="true"/>
++++              <property name="max-buffer-size" value="204800"/>
++++              <property name="swap-directory" value="target/temp/swap/system"/>
++++            </properties>
++++            <value-storages>
++++              <value-storage id="system" class="org.exoplatform.services.jcr.impl.storage.value.fs.TreeFileValueStorage">
++++                <properties>
++++                  <property name="path" value="target/temp/values/system"/>
++++                </properties>
++++                <filters>
++++                  <filter property-type="Binary"/>
++++                </filters>
++++              </value-storage>
++++            </value-storages>
++++          </container>
++++         <cache enabled="true">
++++          <properties>
++++            <property name="maxSize" value="20000"/>
++++            <property name="liveTime" value="30000"/>
++++          </properties>
++++         </cache>
++++         <query-handler class="org.exoplatform.services.jcr.impl.core.query.lucene.SearchIndex">
++++          <properties>
++++            <property name="indexDir" value="target/temp/jcrlucenedb/index/system"/>
++++          </properties>
++++         </query-handler>
++++         <lock-manager>
++++          <time-out>900000</time-out><!-- 15min -->
++++           <persister class="org.exoplatform.services.jcr.impl.core.lock.FileSystemLockPersister">
++++             <properties>
++++               <property name="path" value="target/temp/lock/system"/>
++++             </properties>
++++           </persister>
++++         </lock-manager>
++++       </workspace>
++++       <workspace name="collaboration" auto-init-root-nodetype="nt:unstructured" 
++++                  auto-init-permissions="any read;*:/platform/administrators read;*:/platform/administrators add_node;*:/platform/administrators set_property;*:/platform/administrators remove" >
++++          <!-- for system storage -->
++++          <container class="org.exoplatform.services.jcr.impl.storage.jdbc.JDBCWorkspaceDataContainer">
++++            <properties>
++++              <property name="sourceName" value="jdbcexo"/>
++++              <property name="dialect" value="hsqldb"/>
++++              <!-- property name="db-type" value="mysql"/ -->
++++              <property name="multi-db" value="false"/>
++++              <property name="update-storage" value="true"/>
++++              <property name="max-buffer-size" value="204800"/>
++++              <property name="swap-directory" value="target/temp/swap/collaboration"/>
++++            </properties>
++++            
++++            <value-storages>
++++              <value-storage id="collaboration" class="org.exoplatform.services.jcr.impl.storage.value.fs.TreeFileValueStorage">
++++                <properties>
++++                  <property name="path" value="target/temp/values/collaboration"/>
++++                </properties>
++++                <filters>
++++                  <filter property-type="Binary"/>
++++                </filters>
++++              </value-storage>
++++            </value-storages>
++++            
++++          </container>
++++         <cache enabled="true">
++++          <properties>
++++            <property name="maxSize" value="20000"/>
++++            <property name="liveTime" value="30000"/>
++++          </properties>
++++         </cache>
++++         <query-handler class="org.exoplatform.services.jcr.impl.core.query.lucene.SearchIndex">
++++          <properties>
++++            <property name="indexDir" value="target/temp/jcrlucenedb/index/collaboration"/>
++++          </properties>
++++         </query-handler>
++++         <lock-manager>
++++          <time-out>900000</time-out><!-- 15min -->
++++           <persister class="org.exoplatform.services.jcr.impl.core.lock.FileSystemLockPersister">
++++             <properties>
++++               <property name="path" value="target/temp/lock/collaboration"/>
++++             </properties>
++++           </persister>
++++         </lock-manager>
++++       </workspace>            
++++     </workspaces>
++++    </repository>
++++  </repositories>
++++</repository-service>
+++diff --git a/src/test/resources/conf/portal/test-configuration.xml b/src/test/resources/conf/portal/test-configuration.xml
+++new file mode 100644
+++index 0000000..abcbb46
+++--- /dev/null
++++++ b/src/test/resources/conf/portal/test-configuration.xml
+++@@ -0,0 +1,66 @@
++++<?xml version="1.0" encoding="ISO-8859-1"?>
++++<configuration xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.exoplaform.org/xml/ns/kernel_1_0.xsd http://www.exoplaform.org/xml/ns/kernel_1_0.xsd"
++++  xmlns="http://www.exoplaform.org/xml/ns/kernel_1_0.xsd">
++++  
++++  <component>
++++      <key>org.exoplatform.services.jcr.RepositoryService</key>
++++      <type>org.exoplatform.services.jcr.impl.RepositoryServiceImpl</type>
++++      <component-plugins>
++++        <component-plugin>
++++          <name>add.nodeType</name>
++++          <set-method>addPlugin</set-method>
++++          <type>org.exoplatform.services.jcr.impl.AddNodeTypePlugin</type>
++++          <init-params>
++++            <values-param>
++++              <name>autoCreatedInNewRepository</name>
++++              <description>Node types configuration file</description>
++++              <value>jar:/conf/portal/book-nodetypes.xml</value>              
++++            </values-param>
++++          </init-params>
++++        </component-plugin>
++++      </component-plugins>
++++    </component>
++++  
++++  <component>
++++      <key>org.exoplatform.services.jcr.config.RepositoryServiceConfiguration</key>
++++      <type>org.exoplatform.services.jcr.impl.config.RepositoryServiceConfigurationImpl</type>
++++      <init-params>
++++        <value-param>
++++          <name>conf-path</name>
++++          <description>JCR configuration file</description>
++++          <value>jar:/conf/portal/repository-configuration.xml</value>
++++        </value-param>
++++      </init-params>
++++  </component>
++++  
++++  <external-component-plugins>
++++    <target-component>org.exoplatform.services.naming.InitialContextInitializer</target-component>
++++    <component-plugin>
++++      <name>bind.datasource</name>
++++      <set-method>addPlugin</set-method>
++++      <type>org.exoplatform.services.naming.BindReferencePlugin</type>
++++      <init-params>
++++        <value-param>
++++          <name>bind-name</name>
++++          <value>jdbcexo</value>
++++        </value-param>
++++        <value-param>
++++          <name>class-name</name>
++++          <value>javax.sql.DataSource</value>
++++        </value-param>
++++        <value-param>
++++          <name>factory</name>
++++          <value>org.apache.commons.dbcp.BasicDataSourceFactory</value>
++++        </value-param>
++++        <properties-param>
++++          <name>ref-addresses</name>
++++          <description>ref-addresses</description>
++++          <property name="driverClassName" value="org.hsqldb.jdbcDriver"/>
++++          <property name="url" value="jdbc:hsqldb:mem:target/temp/data/portal"/>
++++          <property name="username" value="sa"/>
++++          <property name="password" value=""/>
++++        </properties-param>
++++      </init-params>
++++    </component-plugin>        
++++  </external-component-plugins>
++++</configuration>
+++\ No newline at end of file
++diff --git a/pom.xml b/pom.xml
++index 65d0e39..aafce74 100644
++--- a/pom.xml
+++++ b/pom.xml
++@@ -11,7 +11,84 @@
++   <url>http://maven.apache.org</url>
++ 
++   <properties>
++-    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
+++   <org.exoplatform.kernel.version>2.3.8-GA-SNAPSHOT</org.exoplatform.kernel.version>
+++    <org.exoplatform.core.version>2.4.8-GA-SNAPSHOT</org.exoplatform.core.version>
+++    <org.exoplatform.ws.version>2.2.8-GA-SNAPSHOT</org.exoplatform.ws.version>
+++    <org.exoplatform.jcr.version>1.14.8-GA-SNAPSHOT</org.exoplatform.jcr.version>
+++    <org.exoplatform.portal.version>3.2.5-PLF-SNAPSHOT</org.exoplatform.portal.version>
+++     
+++    <exo.tool.framework.junit.version>1.2.0</exo.tool.framework.junit.version>
+++    <org.exoplatform.exopackage.version>1.1.4</org.exoplatform.exopackage.version>
+++     
+++     <!--commons dependencies-->
+++     
+++    <org.hsqldb.version>2.0.0</org.hsqldb.version>
+++     <!-- eXo extended service -->
+++     
+++    <org.aspectj.version>1.6.10</org.aspectj.version>
+++    <ehcache.version>1.6.0</ehcache.version>
+++    <juel.version>2.1.2</juel.version>
+++    <commons-lang.version>2.6</commons-lang.version>
+++    <commons-chain.version>1.2</commons-chain.version>
+++    <commons-logging.version>1.1.1</commons-logging.version>
+++    <commons-httpclient.version>3.1</commons-httpclient.version>
+++    <org.apache.httpcomponents.httpclient.version>4.0</org.apache.httpcomponents.httpclient.version>
+++    <com.google.guava.version>r07</com.google.guava.version>
+++    <javax.servlet.servlet-api.version>2.5</javax.servlet.servlet-api.version>
+++    <javax.portlet.portlet-api.version>2.0</javax.portlet.portlet-api.version>
+++    <javax.mail.mail.version>1.4.4</javax.mail.mail.version>
+++    <javax.xml.bind.jaxb-api.version>2.1</javax.xml.bind.jaxb-api.version>
+++    <javax.xml.stream.stax-api.version>1.0-2</javax.xml.stream.stax-api.version>
+++    <javax.ws.rs.jsr311-api.version>1.0</javax.ws.rs.jsr311-api.version>
+++    <javax.jcr.api.version>1.0</javax.jcr.api.version>
+++    <javax.resource.connector-api.version>1.5</javax.resource.connector-api.version>
+++    <org.jibx.jibx-run.version>1.2.2</org.jibx.jibx-run.version>
+++    <javax.activation.activation.version>1.1.1</javax.activation.activation.version>
+++    <org.log4j.version>1.2.14</org.log4j.version>
+++    <org.jvnet.mock-javamail.version>1.9</org.jvnet.mock-javamail.version>
+++    <xml-apis.version>1.0.b2</xml-apis.version>
+++    <pull-parser.version>2</pull-parser.version>
+++    <quartz.version>1.5.2</quartz.version>
+++    <rome.version>1.0</rome.version>
+++    <picocontainer.version>1.1</picocontainer.version>
+++    <commons-io.version>1.4</commons-io.version>
+++    <junit.version>3.8.2</junit.version>
+++    <xpp3.version>1.1.4c</xpp3.version>
+++    <mockito.version>1.8.1</mockito.version>
+++    <net.sf.jtidy.version>r938</net.sf.jtidy.version>
+++      
+++    
+++    <!--need when deploy CS-->
+++    <org.slf4j.version>1.5.8</org.slf4j.version>
+++    <c3p0.version>0.9.1.2</c3p0.version>
+++    <net.oauth.version>20080621</net.oauth.version>
+++    <cglib.version>2.2</cglib.version>
+++    <commons-dbcp.version>1.2.2</commons-dbcp.version>
+++    <org.exoplatform.tool.version>1.0.0</org.exoplatform.tool.version>
+++    <org.javassist.version>3.14.0-GA</org.javassist.version>
+++    <html-parser.version>1.6</html-parser.version>
+++    <com.sun.xml.bind.version>2.1.7</com.sun.xml.bind.version>
+++    <org.jvnet.jaxb2.maven2.version>0.7.4</org.jvnet.jaxb2.maven2.version>
+++    <commons-pool.version>1.5.5</commons-pool.version>
+++    <asm.version>1.5.3</asm.version>
+++    <antlr.version>2.7.6rc1</antlr.version>
+++    <jcr.version>1.0</jcr.version>
+++    <stax.version>1.0</stax.version>
+++    <xml-apis.version>1.3.04</xml-apis.version>
+++    <org.jsecurity.version>0.9.0</org.jsecurity.version>
+++    <org.gatein.pc.version>2.3.0-GA</org.gatein.pc.version>
+++    <org.gatein.shindig.version>2.0.2</org.gatein.shindig.version>
+++    <org.gatein.wci.version>2.1.0-GA</org.gatein.wci.version>
+++    <org.gatein.wsrp.version>2.1.0-GA</org.gatein.wsrp.version>
+++    <org.reflext.version>1.1.0</org.reflext.version>
+++    <xerces.version>2.9.1</xerces.version>
+++    <commons-collections.version>3.2.1</commons-collections.version>
+++    <javax.activation.version>1.1</javax.activation.version>
+++    <org.jboss.version>2.2.9.GA</org.jboss.version>
+++    <org.jbossxb.version>2.0.1.GA</org.jbossxb.version>
+++    <org.staxnav.version>0.9.6</org.staxnav.version>
+++    <nekohtml.version>1.9.14</nekohtml.version>
+++    <caja.version>r1</caja.version>
++   </properties>
++ 
++   <build>
++@@ -38,38 +115,126 @@
++   </build>
++   <dependencies>
++     <dependency>
++-      <groupId>org.hsqldb</groupId>
++-      <artifactId>hsqldb</artifactId>
++-      <version>2.0.0</version>
+++      <groupId>org.exoplatform.kernel</groupId>
+++      <artifactId>exo.kernel.component.common</artifactId>
+++      <version>${org.exoplatform.kernel.version}</version>
+++       <scope>provided</scope>
+++    </dependency>
+++    <dependency>
+++      <groupId>org.exoplatform.kernel</groupId>
+++      <artifactId>exo.kernel.commons</artifactId>
+++      <version>${org.exoplatform.kernel.version}</version>
+++      <scope>provided</scope>
+++    </dependency>
+++    <dependency>
+++      <groupId>org.exoplatform.kernel</groupId>
+++      <artifactId>exo.kernel.container</artifactId>
+++      <version>${org.exoplatform.kernel.version}</version>
+++      <scope>provided</scope>
+++    </dependency>
+++    <dependency>
+++      <groupId>org.exoplatform.core</groupId>
+++      <artifactId>exo.core.component.organization.api</artifactId>
+++      <version>${org.exoplatform.core.version}</version>
+++      <scope>provided</scope>
+++    </dependency>
+++    <dependency>
+++      <groupId>org.exoplatform.portal</groupId>
+++      <artifactId>exo.portal.component.test.core</artifactId>
+++      <version>${org.exoplatform.portal.version}</version>
+++      <scope>test</scope>
+++    </dependency>
+++    <dependency>
+++      <groupId>org.exoplatform.portal</groupId>
+++      <artifactId>exo.portal.component.test.jcr</artifactId>
+++      <version>${org.exoplatform.portal.version}</version>
+++      <scope>test</scope>
+++    </dependency>
+++    <dependency>
+++      <groupId>org.exoplatform.portal</groupId>
+++      <artifactId>exo.portal.component.identity</artifactId>
+++      <version>${org.exoplatform.portal.version}</version>
+++      <type>test-jar</type>
+++      <scope>test</scope>
+++    </dependency>
+++    <dependency>
+++      <groupId>org.exoplatform.portal</groupId>
+++      <artifactId>exo.portal.component.portal</artifactId>
+++      <version>${org.exoplatform.portal.version}</version>
+++      <scope>provided</scope>
+++    </dependency>
+++     
+++    <dependency>
+++      <groupId>org.exoplatform.jcr</groupId>
+++      <artifactId>exo.jcr.component.core</artifactId>
+++      <version>${org.exoplatform.jcr.version}</version>
+++      <scope>provided</scope>
++     </dependency>
++     <dependency>
++       <groupId>org.exoplatform.jcr</groupId>
++       <artifactId>exo.jcr.component.ext</artifactId>
++-      <version>1.14.0-CR2</version>
+++      <version>${org.exoplatform.jcr.version}</version>
++       <scope>provided</scope>
++     </dependency>
++     <dependency>
++-      <groupId>junit</groupId>
++-      <artifactId>junit</artifactId>
++-      <version>3.8.1</version>
++-      <scope>test</scope>
+++      <groupId>org.exoplatform.ws</groupId>
+++      <artifactId>exo.ws.frameworks.json</artifactId>
+++      <version>${org.exoplatform.ws.version}</version>
+++      <scope>provided</scope>
++     </dependency>
++     <dependency>
++-      <groupId>org.exoplatform.kernel</groupId>
++-      <artifactId>exo.kernel.component.cache</artifactId>
++-      <version>2.3.0-CR2</version>
+++      <groupId>javax.jcr</groupId>
+++      <artifactId>jcr</artifactId>
+++      <version>${javax.jcr.api.version}</version>
+++      <scope>provided</scope>
+++    </dependency>
+++    <dependency>
+++      <groupId>commons-io</groupId>
+++      <artifactId>commons-io</artifactId>
+++      <version>${commons-io.version}</version>
+++      <scope>provided</scope>
+++    </dependency>
+++    <dependency>
+++      <groupId>commons-logging</groupId>
+++      <artifactId>commons-logging</artifactId>
+++      <version>${commons-logging.version}</version>
+++      <scope>provided</scope>
+++    </dependency>
+++    <dependency>
+++      <groupId>javax.mail</groupId>
+++      <artifactId>mail</artifactId>
+++      <version>${javax.mail.mail.version}</version>
+++      <scope>provided</scope>
+++    </dependency>
+++    
+++  <dependency>
+++      <groupId>org.exoplatform.core</groupId>
+++      <artifactId>exo.core.component.security.core</artifactId>
+++      <version>${org.exoplatform.core.version}</version>
+++      <scope>provided</scope>
+++    </dependency>
+++    <dependency>
+++      <groupId>org.exoplatform.portal</groupId>
+++      <artifactId>exo.portal.component.common</artifactId>
+++      <version>${org.exoplatform.portal.version}</version>
++       <scope>provided</scope>
++     </dependency>
++     <dependency>
++       <groupId>org.slf4j</groupId>
++-      <artifactId>slf4j-log4j12</artifactId>
++-      <version>1.5.8</version>
++-      <scope>test</scope>
+++      <artifactId>slf4j-simple</artifactId>
+++      <version>${org.slf4j.version}</version>
+++      <scope>provided</scope>
+++    </dependency>    
+++    <dependency>
+++      <groupId>commons-lang</groupId>
+++      <artifactId>commons-lang</artifactId>
+++      <version>${commons-lang.version}</version>
+++      <scope>provided</scope>
++     </dependency>
++     <dependency>
++-      <groupId>org.exoplatform.ws</groupId>
++-      <artifactId>exo.ws.rest.core</artifactId>
++-      <version>2.2.0-CR2</version>
+++      <groupId>org.exoplatform.portal</groupId>
+++      <artifactId>exo.portal.component.test.core</artifactId>
+++      <version>${org.exoplatform.portal.version}</version>
++       <scope>provided</scope>
++     </dependency>
++   </dependencies>
++diff --git a/pom.xml~ b/pom.xml~
++index 65d0e39..e665137 100644
++--- a/pom.xml~
+++++ b/pom.xml~
++@@ -12,6 +12,111 @@
++ 
++   <properties>
++     <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
+++    <org.exoplatform.kernel.version>2.3.8-GA-SNAPSHOT</org.exoplatform.kernel.version>
+++    <org.exoplatform.core.version>2.4.8-GA-SNAPSHOT</org.exoplatform.core.version>
+++    <org.exoplatform.ws.version>2.2.8-GA-SNAPSHOT</org.exoplatform.ws.version>
+++    <org.exoplatform.jcr.version>1.14.8-GA-SNAPSHOT</org.exoplatform.jcr.version>
+++    <org.exoplatform.portal.version>3.3.0-GA</org.exoplatform.portal.version>
+++    <org.exoplatform.ecms.version>4.0.0.Alpha1-SNAPSHOT</org.exoplatform.ecms.version>
+++    <exo.tool.framework.junit.version>1.2.0</exo.tool.framework.junit.version>
+++    <org.exoplatform.exopackage.version>1.1.4</org.exoplatform.exopackage.version>
+++    <version.chromattic>1.1.4</version.chromattic>    
+++     <!--commons dependencies-->
+++    <org.exoplatform.commons.version>4.0.0.Alpha1-SNAPSHOT</org.exoplatform.commons.version>	      
+++    <org.hsqldb.version>2.0.0</org.hsqldb.version>
+++     <!-- eXo extended service -->
+++     <org.exoplatform.social.version>4.0.0.Alpha1-SNAPSHOT</org.exoplatform.social.version>
+++     <!-- 3rd parties -->
+++    <org.aspectj.version>1.6.10</org.aspectj.version>
+++    <ehcache.version>1.6.0</ehcache.version>
+++    <juel.version>2.1.2</juel.version>
+++    <commons-lang.version>2.6</commons-lang.version>
+++    <commons-chain.version>1.2</commons-chain.version>
+++    <commons-logging.version>1.1.1</commons-logging.version>
+++    <commons-httpclient.version>3.1</commons-httpclient.version>
+++    <org.apache.httpcomponents.httpclient.version>4.0</org.apache.httpcomponents.httpclient.version>
+++    <com.google.guava.version>r07</com.google.guava.version>
+++    <javax.servlet.servlet-api.version>2.5</javax.servlet.servlet-api.version>
+++    <javax.portlet.portlet-api.version>2.0</javax.portlet.portlet-api.version>
+++    <javax.mail.mail.version>1.4.4</javax.mail.mail.version>
+++    <javax.xml.bind.jaxb-api.version>2.1</javax.xml.bind.jaxb-api.version>
+++    <javax.xml.stream.stax-api.version>1.0-2</javax.xml.stream.stax-api.version>
+++    <javax.ws.rs.jsr311-api.version>1.0</javax.ws.rs.jsr311-api.version>
+++    <javax.jcr.api.version>1.0</javax.jcr.api.version>
+++    <javax.resource.connector-api.version>1.5</javax.resource.connector-api.version>
+++    <org.jibx.jibx-run.version>1.2.2</org.jibx.jibx-run.version>
+++    <javax.activation.activation.version>1.1.1</javax.activation.activation.version>
+++    <org.log4j.version>1.2.14</org.log4j.version>
+++    <org.jvnet.mock-javamail.version>1.9</org.jvnet.mock-javamail.version>
+++    <xml-apis.version>1.0.b2</xml-apis.version>
+++    <pull-parser.version>2</pull-parser.version>
+++    <quartz.version>1.5.2</quartz.version>
+++    <rome.version>1.0</rome.version>
+++    <picocontainer.version>1.1</picocontainer.version>
+++    <commons-io.version>1.4</commons-io.version>
+++    <junit.version>3.8.2</junit.version>
+++    <xpp3.version>1.1.4c</xpp3.version>
+++    <mockito.version>1.8.1</mockito.version>
+++    <net.sf.jtidy.version>r938</net.sf.jtidy.version>
+++     <!-- exo.cs.extension.ear-->
+++    <org.mortbay.jetty.cometd-bayeux.version>6.1.11</org.mortbay.jetty.cometd-bayeux.version>
+++    <org.mortbay.jetty.cometd-api.version>0.9.20080221</org.mortbay.jetty.cometd-api.version>
+++    <org.mortbay.jetty.jetty-util.version>6.1.11</org.mortbay.jetty.jetty-util.version>
+++    <!-- test-calendar-selenium-->
+++    <selenium-java-client-driver.version>1.0-beta-1</selenium-java-client-driver.version>
+++    <!--exo.cs.eXoApplication.calendar.service-->
+++    <ical4j.version>1.0-beta5</ical4j.version>
+++    <jcrom.version>1.2</jcrom.version>
+++    <org.apache.jackrabbit.version>1.6.4</org.apache.jackrabbit.version>
+++    <!--exo.cs.eXoApplication.chat.service-->
+++    <jivesoftware.smack.version>3.1.0</jivesoftware.smack.version>
+++    <jivesoftware.smackx.version>3.1.0</jivesoftware.smackx.version>
+++    <dom4j.version>1.6.1</dom4j.version>
+++    <commons-fileupload.version>1.2.1</commons-fileupload.version>
+++    <!--exo.cs.eXoApplication.contact.service-->
+++    <jpim-0.1.version>1.0</jpim-0.1.version>
+++    <!--exo.cs.eXoApplication.organization.client.openfire-->
+++    <openfire.version>3.6.4</openfire.version>
+++    <!--need when deploy CS-->
+++    <org.slf4j.version>1.5.8</org.slf4j.version>
+++    <c3p0.version>0.9.1.2</c3p0.version>
+++    <net.oauth.version>20080621</net.oauth.version>
+++    <cglib.version>2.2</cglib.version>
+++    <commons-dbcp.version>1.2.2</commons-dbcp.version>
+++    <org.exoplatform.tool.version>1.0.0</org.exoplatform.tool.version>
+++    <org.javassist.version>3.14.0-GA</org.javassist.version>
+++    <html-parser.version>1.6</html-parser.version>
+++    <com.sun.xml.bind.version>2.1.7</com.sun.xml.bind.version>
+++    <org.jvnet.jaxb2.maven2.version>0.7.4</org.jvnet.jaxb2.maven2.version>
+++    <commons-pool.version>1.5.5</commons-pool.version>
+++    <asm.version>1.5.3</asm.version>
+++    <antlr.version>2.7.6rc1</antlr.version>
+++    <jcr.version>1.0</jcr.version>
+++    <stax.version>1.0</stax.version>
+++    <xml-apis.version>1.3.04</xml-apis.version>
+++    <org.jsecurity.version>0.9.0</org.jsecurity.version>
+++    <org.gatein.pc.version>2.3.2-GA</org.gatein.pc.version>
+++    <org.gatein.shindig.version>2.0.2-CP01</org.gatein.shindig.version>
+++    <org.gatein.wci.version>2.2.0-Beta01</org.gatein.wci.version>
+++    <org.gatein.wsrp.version>2.1.0-GA</org.gatein.wsrp.version>
+++    <org.reflext.version>1.1.0</org.reflext.version>
+++    <xerces.version>2.9.1</xerces.version>
+++    <commons-collections.version>3.2.1</commons-collections.version>
+++    <javax.activation.version>1.1</javax.activation.version>
+++    <org.jboss.version>2.2.9.GA</org.jboss.version>
+++    <org.jbossxb.version>2.0.1.GA</org.jbossxb.version>
+++    <org.staxnav.version>0.9.6</org.staxnav.version>
+++    <nekohtml.version>1.9.14</nekohtml.version>
+++    <caja.version>r1</caja.version>
+++    <!-- ************** -->
+++    <!-- Build settings -->
+++    <!-- ************** -->
+++    <!-- We enforce Java 6 to build to use Chromattic and APT -->
+++    <jdk.min.version>1.6</jdk.min.version>
+++    <!-- config-scm-maven-plugin -->
+++    <version.release.plugin>2.2.1</version.release.plugin>
+++	<org.apache.maven.scm.version>1.6</org.apache.maven.scm.version>
+++	<version.buildnumber.plugin>1.1</version.buildnumber.plugin>
++   </properties>
++ 
++   <build>
++@@ -38,11 +143,6 @@
++   </build>
++   <dependencies>
++     <dependency>
++-      <groupId>org.hsqldb</groupId>
++-      <artifactId>hsqldb</artifactId>
++-      <version>2.0.0</version>
++-    </dependency>
++-    <dependency>
++       <groupId>org.exoplatform.jcr</groupId>
++       <artifactId>exo.jcr.component.ext</artifactId>
++       <version>1.14.0-CR2</version>
++@@ -72,5 +172,138 @@
++       <version>2.2.0-CR2</version>
++       <scope>provided</scope>
++     </dependency>
+++    <dependency>
+++      <groupId>org.exoplatform.kernel</groupId>
+++      <artifactId>exo.kernel.component.common</artifactId>
+++      <version>${org.exoplatform.kernel.version}</version>
+++      <scope>provided</scope>
+++    </dependency>
+++    <dependency>
+++      <groupId>org.exoplatform.kernel</groupId>
+++      <artifactId>exo.kernel.commons</artifactId>
+++      <version>${org.exoplatform.kernel.version}</version>
+++      <scope>provided</scope>
+++    </dependency>
+++    <dependency>
+++      <groupId>org.exoplatform.kernel</groupId>
+++      <artifactId>exo.kernel.container</artifactId>
+++      <version>${org.exoplatform.kernel.version}</version>
+++      <scope>provided</scope>
+++    </dependency>
+++    <dependency>
+++      <groupId>org.exoplatform.core</groupId>
+++      <artifactId>exo.core.component.organization.api</artifactId>
+++      <version>${org.exoplatform.core.version}</version>
+++      <scope>provided</scope>
+++    </dependency>
+++    <dependency>
+++      <groupId>org.exoplatform.core</groupId>
+++      <artifactId>exo.core.component.security.core</artifactId>
+++      <version>${org.exoplatform.core.version}</version>
+++      <scope>provided</scope>
+++    </dependency>
+++    <dependency>
+++      <groupId>org.exoplatform.core</groupId>
+++      <artifactId>exo.core.component.organization.jdbc</artifactId>
+++      <version>${org.exoplatform.core.version}</version>
+++      <scope>provided</scope>
+++    </dependency>
+++    <dependency>
+++      <groupId>org.exoplatform.portal</groupId>
+++      <artifactId>exo.portal.component.resources</artifactId>
+++      <version>${org.exoplatform.portal.version}</version>
+++      <scope>provided</scope>
+++    </dependency>
+++    <dependency>
+++      <groupId>org.exoplatform.portal</groupId>
+++      <artifactId>exo.portal.component.portal</artifactId>
+++      <version>${org.exoplatform.portal.version}</version>
+++      <scope>provided</scope>
+++    </dependency>
+++    <dependency>
+++      <groupId>org.exoplatform.jcr</groupId>
+++      <artifactId>exo.jcr.component.core</artifactId>
+++      <version>${org.exoplatform.jcr.version}</version>
+++      <scope>provided</scope>
+++    </dependency>
+++    <dependency>
+++      <groupId>org.exoplatform.jcr</groupId>
+++      <artifactId>exo.jcr.component.ext</artifactId>
+++      <version>${org.exoplatform.jcr.version}</version>
+++      <scope>provided</scope>
+++    </dependency>
+++    
+++   <dependency>
+++      <groupId>org.exoplatform.commons</groupId>
+++      <artifactId>commons-comet-service</artifactId>
+++      <version>${org.exoplatform.commons.version}</version>
+++      <scope>provided</scope>
+++    </dependency>
+++    <dependency>
+++      <groupId>org.exoplatform.ws</groupId>
+++      <artifactId>exo.ws.frameworks.json</artifactId>
+++      <version>${org.exoplatform.ws.version}</version>
+++      <scope>provided</scope>
+++    </dependency>
+++    <dependency>
+++      <groupId>javax.servlet</groupId>
+++      <artifactId>servlet-api</artifactId>
+++      <version>${javax.servlet.servlet-api.version}</version>
+++      <scope>provided</scope>
+++    </dependency>
+++    <dependency>
+++      <groupId>javax.jcr</groupId>
+++      <artifactId>jcr</artifactId>
+++      <version>${javax.jcr.api.version}</version>
+++      <scope>provided</scope>
+++    </dependency>
+++    <dependency>
+++      <groupId>picocontainer</groupId>
+++      <artifactId>picocontainer</artifactId>
+++      <version>${picocontainer.version}</version>
+++      <scope>provided</scope>
+++    </dependency>
+++    <dependency>
+++      <groupId>commons-lang</groupId>
+++      <artifactId>commons-lang</artifactId>
+++      <version>${commons-lang.version}</version>
+++      <scope>provided</scope>
+++    </dependency>
+++    <dependency>
+++      <groupId>commons-logging</groupId>
+++      <artifactId>commons-logging</artifactId>
+++      <version>${commons-logging.version}</version>
+++      <scope>provided</scope>
+++    </dependency>
+++    <dependency>
+++      <groupId>ical4j</groupId>
+++      <artifactId>ical4j</artifactId>
+++      <version>${ical4j.version}</version>
+++    </dependency>
+++    <dependency>
+++      <groupId>rome</groupId>
+++      <artifactId>rome</artifactId>
+++      <version>${rome.version}</version>
+++      <scope>provided</scope>
+++    </dependency>
+++    <dependency>
+++      <groupId>commons-chain</groupId>
+++      <artifactId>commons-chain</artifactId>
+++      <version>${commons-chain.version}</version>
+++      <scope>provided</scope>
+++    </dependency>
+++   <dependency>
+++      <groupId>org.exoplatform.kernel</groupId>
+++      <artifactId>exo.kernel.component.command</artifactId>
+++      <version>${org.exoplatform.kernel.version}</version>
+++      <scope>provided</scope>
+++    </dependency>    
+++    <!--javassist is the necessary dependency for the HibernateService component used in unit test -->
+++    <dependency>
+++      <groupId>org.javassist</groupId>
+++      <artifactId>javassist</artifactId>
+++      <version>${org.javassist.version}</version>
+++      <scope>test</scope>
+++    </dependency>
++   </dependencies>
++ </project>
++diff --git a/src/main/java/exoplatform/BookStoreService.java b/src/main/java/exoplatform/BookStoreService.java
++index 997fa12..b8aac51 100644
++--- a/src/main/java/exoplatform/BookStoreService.java
+++++ b/src/main/java/exoplatform/BookStoreService.java
++@@ -16,260 +16,16 @@
++  */
++ package exoplatform;
++ 
++-import java.io.Serializable;
++-import java.util.ArrayList;
++-import java.util.List;
++-
++-import javax.jcr.Node;
++-import javax.jcr.RepositoryException;
++-
++-import org.exoplatform.services.cache.CacheService;
++-import org.exoplatform.services.cache.ExoCache;
++-import org.exoplatform.services.jcr.RepositoryService;
++-import org.picocontainer.Startable;
++-
++-import exoplatform.entity.Author;
++-import exoplatform.entity.Book;
++-import exoplatform.entity.Book.CATEGORY;
++ import exoplatform.entity.User;
++-import exoplatform.exception.DuplicateBookException;
++ 
++ /**
++  * Created by The eXo Platform SAS
++  * Author : BinhNV
++  *          binhnv@exoplatform.com
++- * Jul 6, 2012  
+++ * Jul 18, 2012  
++  */
++-public class BookStoreService implements Startable {
++-
++-  /* Define a exo cache */
++-  private ExoCache<Serializable, Book> cache;
++-  /* Define a JCRDataStore object */
++-  private JCRDataStorage jcrDataStorage;
++-  
++-  /**
++-   * BookStoreService constructor
++-   * 
++-   * @param rservice
++-   * @param cacheService
++-   * @param dataStorage
++-   * @throws RepositoryException
++-   * @throws DuplicateBookException 
++-   */
++-  public BookStoreService(RepositoryService rservice,
++-                          CacheService cacheService,
++-                          JCRDataStorage dataStorage) {
++-    this.cache = cacheService.getCacheInstance(getClass().getName());
++-    this.jcrDataStorage = dataStorage;
++-  }
++-
++-  /**
++-   * Init data for datastorage
++-   */
++-  public void start() {
++-    jcrDataStorage.init();
++-  }
+++public interface BookStoreService {
++ 
++-  /* (non-Javadoc)
++-   * @see org.picocontainer.Startable#stop()
++-   */
++-  public void stop() {
++-    
++-  }
++-  
++-  /**
++-   * create new database
++-   */
++-  private void createDB() {
++-    try {
++-      Node authorNode1 = addAuthor("Conan Doyle", "England", "123456789");
++-      Node authorNode2 = addAuthor("JK Rowling", "England", "987654321");
++-      Node authorNode3 = addAuthor("Sydney Sheldon", "US", "678912345");
++-      Node authorNode4 = addAuthor("Mario Puzzo", "Italia", "012345678");
++-      Node authorNode5 = addAuthor("Ma Van Khang", "Vietnam", "23451234");
++-      Node authorNode6 = addAuthor("Victor Huygo", "France", "8760985544");
++-      
++-      Node bookNode1 = addBook("Shelock Holme", CATEGORY.NOVEL, "The sign of the Four", authorNode1.getPath());
++-      Node bookNode2 = addBook("Harry Porter", CATEGORY.NOVEL, "Alice in wonder land", authorNode2.getPath());
++-      Node bookNode3 = addBook("Seal team six", CATEGORY.NOVEL, "Seal team six", authorNode3.getPath());
++-      Node bookNode4 = addBook("Hibernate in action", CATEGORY.TECHNICAL, "Hibernate", authorNode4.getPath());
++-      Node bookNode5 = addBook("Napoleon", CATEGORY.HISTORY, "Napoleon", authorNode5.getPath());
++-      Node bookNode6 = addBook("Jouney to the West", CATEGORY.COMICS, "Jouney to the West", authorNode6.getPath());
++-      
++-      List<String> nodes1 = new ArrayList<String>();
++-      nodes1.add(bookNode1.getPath());
++-      nodes1.add(bookNode2.getPath());
++-      nodes1.add(bookNode3.getPath());
++-      Node userNode1 = addUser("binhnv", "12345", "Nguyen Vinh Binh", "Hanoi", "123456789", nodes1);
++-      
++-      List<String> nodes2 = new ArrayList<String>();
++-      nodes2.add(bookNode5.getPath());
++-      nodes2.add(bookNode6.getPath());
++-      nodes2.add(bookNode1.getPath());
++-      Node userNode2 = addUser("huongdt", "54321", "Doan Thu Huong", "Hanoi", "987654321", nodes2);
++-    } catch (DuplicateBookException e) {
++-      e.printStackTrace();
++-    } catch (RepositoryException e) {
++-      e.printStackTrace();
++-    }
++-  }
++-  
++-  /**
++-   * get user by name with sql statement
++-   * 
++-   * @param username
++-   * @return
++-   */
++-  public User getUserByNameSQL(String username) {
++-    return jcrDataStorage.getUserByNameSQL(username);
++-  }
++-  
++-  /**
++-   * get user by name with xpath statement
++-   * 
++-   * @param username
++-   * @return
++-   */
++-  public User getUserByNameXPath(String username) {
++-    return jcrDataStorage.getUserByNameXPath(username);
++-  }
++-  
++-  /**
++-   * get user by name in range with sql statement
++-   * 
++-   * @param username
++-   * @return
++-   */
++-  public User getUserByNameLimtSQL(String username) {
++-    return jcrDataStorage.getUserByNameLimtSQL(username);
++-  }
++-  
++-  /**
++-   * get user by name in range with xpath statement
++-   * 
++-   * @param username
++-   * @return
++-   */
++-  public User getUserByNameLimtXPath(String username) {
++-    return jcrDataStorage.getUserByNameLimtXPath(username);
++-  }
+++  public User getUserByNameSQL(String username);
++   
++-  /**
++-   * get user by book name with sql statement
++-   * 
++-   * @param bookName
++-   * @return
++-   */
++-  public User getUserByBookQuery(String bookName) {
++-    return jcrDataStorage.getUserByBookQuery(bookName);
++-  }
++-  
++-  /**
++-   * add new book to datastorage
++-   * 
++-   * @param bookName
++-   * @param category
++-   * @param content
++-   * @return
++-   * @throws DuplicateBookException
++-   */
++-  public Node addBook(String bookName, CATEGORY category, String content, String nodePath) throws DuplicateBookException {
++-    Book book = new Book(bookName, category, content);
++-    return jcrDataStorage.addBook(book, nodePath);
++-  }
++-  
++-  /**
++-   * add new author to datastorage
++-   * 
++-   * @param authorName
++-   * @param authorAddress
++-   * @param authorPhone
++-   * @return
++-   */
++-  public Node addAuthor(String authorName, String authorAddress, String authorPhone) throws DuplicateBookException {
++-    Author author = new Author(authorName, authorAddress, authorPhone);
++-    return jcrDataStorage.addAuthor(author);
++-  }
++-  
++-  /**
++-   * add new user to datastorage
++-   * 
++-   * @param username
++-   * @param password
++-   * @param fullname
++-   * @param address
++-   * @param phone
++-   * @param nodes
++-   * @return
++-   * @throws DuplicateBookException
++-   */
++-  public Node addUser(String username, String password, String fullname, String address, String phone, List<String> nodes) throws DuplicateBookException {
++-    User user = new User(username, password, fullname, address, phone);
++-    return jcrDataStorage.addUser(user, nodes);
++-  }
++-  
++-  /**
++-   * search book by name(using SQL)
++-   * 
++-   * @param name The name of book
++-   * @return
++-   */
++-  public List<Book> searchBookByNameSQL(String name) {
++-    return jcrDataStorage.searchBookByNameSQL(name);
++-  }
++-  
++-  /**
++-   * search book by name(using XPath)
++-   * 
++-   * @param name The name of book
++-   * @return
++-   */
++-  public List<Book> searchBookByNameXPath(String name) {
++-    return jcrDataStorage.searchBookByNameXPath(name);
++-  }
++-  
++-  /**
++-   * search book by name but limit amount of records(using SQL)
++-   * 
++-   * @param name The name of book
++-   * @return
++-   */
++-  public List<Book> searchBookByNameLimitSQL(String name) {
++-    return jcrDataStorage.searchBookByNameLimitSQL(name);
++-  }
++-  
++-  /**
++-   * search book by name with like condition(using SQL)
++-   * 
++-   * @param name The name of book
++-   * @return
++-   */
++-  public List<Book> searchBookByNameLikeSQL(String name) {
++-    return jcrDataStorage.searchBookByNameLikeSQL(name);
++-  }
++-  
++-  /**
++-   * search book by name with like condition(using XPath)
++-   * 
++-   * @param name The name of book
++-   * @return
++-   */
++-  public List<Book> searchBookByNameLikeXPath(String name) {
++-    return jcrDataStorage.searchBookByNameLikeSQL(name);
++-  }
++-  
++-  /**
++-   * get book by book's id
++-   * 
++-   * @param id The id of book
++-   * @return
++-   */
++-  public Book getBook(String id) {
++-    Book book = cache.get(id);
++-    if (book != null) {
++-      return book;
++-    }
++-    return jcrDataStorage.getBook(id);
++-  }
++-
++ }
++diff --git a/src/main/java/exoplatform/BookStoreServiceImpl.java b/src/main/java/exoplatform/BookStoreServiceImpl.java
++new file mode 100644
++index 0000000..7b5faac
++--- /dev/null
+++++ b/src/main/java/exoplatform/BookStoreServiceImpl.java
++@@ -0,0 +1,274 @@
+++/*
+++ * Copyright (C) 2003-2012 eXo Platform SAS.
+++ *
+++ * This program is free software: you can redistribute it and/or modify
+++ * it under the terms of the GNU Affero General Public License as published by
+++ * the Free Software Foundation, either version 3 of the License, or
+++ * (at your option) any later version.
+++ *
+++ * This program is distributed in the hope that it will be useful,
+++ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+++ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+++ * GNU Affero General Public License for more details.
+++ *
+++ * You should have received a copy of the GNU Affero General Public License
+++ * along with this program. If not, see <http://www.gnu.org/licenses/>.
+++ */
+++package exoplatform;
+++
+++import java.io.Serializable;
+++import java.util.ArrayList;
+++import java.util.List;
+++
+++import javax.jcr.Node;
+++import javax.jcr.RepositoryException;
+++
+++import org.exoplatform.services.cache.CacheService;
+++import org.exoplatform.services.cache.ExoCache;
+++import org.exoplatform.services.jcr.RepositoryService;
+++
+++import exoplatform.entity.Author;
+++import exoplatform.entity.Book;
+++import exoplatform.entity.Book.CATEGORY;
+++import exoplatform.entity.User;
+++import exoplatform.exception.DuplicateBookException;
+++
+++/**
+++ * Created by The eXo Platform SAS
+++ * Author : BinhNV
+++ *          binhnv@exoplatform.com
+++ * Jul 6, 2012  
+++ */
+++public class BookStoreServiceImpl implements BookStoreService {
+++
+++  /* Define a exo cache */
+++  private ExoCache<Serializable, Book> cache;
+++  /* Define a JCRDataStore object */
+++  private JCRDataStorage jcrDataStorage;
+++  
+++  /**
+++   * BookStoreService constructor
+++   * 
+++   * @param rservice
+++   * @param cacheService
+++   * @param dataStorage
+++   * @throws RepositoryException
+++   * @throws DuplicateBookException 
+++   */
+++  public BookStoreServiceImpl(RepositoryService rservice,
+++                          CacheService cacheService,
+++                          JCRDataStorage dataStorage) {
+++    this.cache = cacheService.getCacheInstance(getClass().getName());
+++    this.jcrDataStorage = dataStorage;
+++  }
+++
+++  /**
+++   * Init data for datastorage
+++   */
+++  public void start() {
+++    jcrDataStorage.init();
+++  }
+++
+++  /* (non-Javadoc)
+++   * @see org.picocontainer.Startable#stop()
+++   */
+++  public void stop() {
+++    
+++  }
+++  
+++  /**
+++   * create new database
+++   */
+++  private void createDB() {
+++    try {
+++      Node authorNode1 = addAuthor("Conan Doyle", "England", "123456789");
+++      Node authorNode2 = addAuthor("JK Rowling", "England", "987654321");
+++      Node authorNode3 = addAuthor("Sydney Sheldon", "US", "678912345");
+++      Node authorNode4 = addAuthor("Mario Puzzo", "Italia", "012345678");
+++      Node authorNode5 = addAuthor("Ma Van Khang", "Vietnam", "23451234");
+++      Node authorNode6 = addAuthor("Victor Huygo", "France", "8760985544");
+++      
+++      Node bookNode1 = addBook("Shelock Holme", CATEGORY.NOVEL, "The sign of the Four", authorNode1.getPath());
+++      Node bookNode2 = addBook("Harry Porter", CATEGORY.NOVEL, "Alice in wonder land", authorNode2.getPath());
+++      Node bookNode3 = addBook("Seal team six", CATEGORY.NOVEL, "Seal team six", authorNode3.getPath());
+++      Node bookNode4 = addBook("Hibernate in action", CATEGORY.TECHNICAL, "Hibernate", authorNode4.getPath());
+++      Node bookNode5 = addBook("Napoleon", CATEGORY.HISTORY, "Napoleon", authorNode5.getPath());
+++      Node bookNode6 = addBook("Jouney to the West", CATEGORY.COMICS, "Jouney to the West", authorNode6.getPath());
+++      
+++      List<String> nodes1 = new ArrayList<String>();
+++      nodes1.add(bookNode1.getPath());
+++      nodes1.add(bookNode2.getPath());
+++      nodes1.add(bookNode3.getPath());
+++      Node userNode1 = addUser("binhnv", "12345", "Nguyen Vinh Binh", "Hanoi", "123456789", nodes1);
+++      
+++      List<String> nodes2 = new ArrayList<String>();
+++      nodes2.add(bookNode5.getPath());
+++      nodes2.add(bookNode6.getPath());
+++      nodes2.add(bookNode1.getPath());
+++      Node userNode2 = addUser("huongdt", "54321", "Doan Thu Huong", "Hanoi", "987654321", nodes2);
+++    } catch (DuplicateBookException e) {
+++      e.printStackTrace();
+++    } catch (RepositoryException e) {
+++      e.printStackTrace();
+++    }
+++  }
+++  
+++  /**
+++   * get user by name with sql statement
+++   * 
+++   * @param username
+++   * @return
+++   */
+++  public User getUserByNameSQL(String username) {
+++    return jcrDataStorage.getUserByNameSQL(username);
+++  }
+++  
+++  /**
+++   * get user by name with xpath statement
+++   * 
+++   * @param username
+++   * @return
+++   */
+++  public User getUserByNameXPath(String username) {
+++    return jcrDataStorage.getUserByNameXPath(username);
+++  }
+++  
+++  /**
+++   * get user by name in range with sql statement
+++   * 
+++   * @param username
+++   * @return
+++   */
+++  public User getUserByNameLimtSQL(String username) {
+++    return jcrDataStorage.getUserByNameLimtSQL(username);
+++  }
+++  
+++  /**
+++   * get user by name in range with xpath statement
+++   * 
+++   * @param username
+++   * @return
+++   */
+++  public User getUserByNameLimtXPath(String username) {
+++    return jcrDataStorage.getUserByNameLimtXPath(username);
+++  }
+++  
+++  /**
+++   * get user by book name with sql statement
+++   * 
+++   * @param bookName
+++   * @return
+++   */
+++  public User getUserByBookQuery(String bookName) {
+++    return jcrDataStorage.getUserByBookQuery(bookName);
+++  }
+++  
+++  /**
+++   * add new book to datastorage
+++   * 
+++   * @param bookName
+++   * @param category
+++   * @param content
+++   * @return
+++   * @throws DuplicateBookException
+++   */
+++  public Node addBook(String bookName, CATEGORY category, String content, String nodePath) throws DuplicateBookException {
+++    Book book = new Book(bookName, category, content);
+++    return jcrDataStorage.addBook(book, nodePath);
+++  }
+++  
+++  /**
+++   * add new author to datastorage
+++   * 
+++   * @param authorName
+++   * @param authorAddress
+++   * @param authorPhone
+++   * @return
+++   */
+++  public Node addAuthor(String authorName, String authorAddress, String authorPhone) throws DuplicateBookException {
+++    Author author = new Author(authorName, authorAddress, authorPhone);
+++    return jcrDataStorage.addAuthor(author);
+++  }
+++  
+++  /**
+++   * add new user to datastorage
+++   * 
+++   * @param username
+++   * @param password
+++   * @param fullname
+++   * @param address
+++   * @param phone
+++   * @param nodes
+++   * @return
+++   * @throws DuplicateBookException
+++   */
+++  public Node addUser(String username, String password, String fullname, String address, String phone, List<String> nodes) throws DuplicateBookException {
+++    User user = new User(username, password, fullname, address, phone);
+++    return jcrDataStorage.addUser(user, nodes);
+++  }
+++  
+++  /**
+++   * search book by name(using SQL)
+++   * 
+++   * @param name The name of book
+++   * @return
+++   */
+++  public List<Book> searchBookByNameSQL(String name) {
+++    return jcrDataStorage.searchBookByNameSQL(name);
+++  }
+++  
+++  /**
+++   * search book by name(using XPath)
+++   * 
+++   * @param name The name of book
+++   * @return
+++   */
+++  public List<Book> searchBookByNameXPath(String name) {
+++    return jcrDataStorage.searchBookByNameXPath(name);
+++  }
+++  
+++  /**
+++   * search book by name but limit amount of records(using SQL)
+++   * 
+++   * @param name The name of book
+++   * @return
+++   */
+++  public List<Book> searchBookByNameLimitSQL(String name) {
+++    return jcrDataStorage.searchBookByNameLimitSQL(name);
+++  }
+++  
+++  /**
+++   * search book by name with like condition(using SQL)
+++   * 
+++   * @param name The name of book
+++   * @return
+++   */
+++  public List<Book> searchBookByNameLikeSQL(String name) {
+++    return jcrDataStorage.searchBookByNameLikeSQL(name);
+++  }
+++  
+++  /**
+++   * search book by name with like condition(using XPath)
+++   * 
+++   * @param name The name of book
+++   * @return
+++   */
+++  public List<Book> searchBookByNameLikeXPath(String name) {
+++    return jcrDataStorage.searchBookByNameLikeSQL(name);
+++  }
+++  
+++  /**
+++   * get book by book's id
+++   * 
+++   * @param id The id of book
+++   * @return
+++   */
+++  public Book getBook(String id) {
+++    Book book = cache.get(id);
+++    if (book != null) {
+++      return book;
+++    }
+++    return jcrDataStorage.getBook(id);
+++  }
+++
+++}
++diff --git a/src/main/resources/conf/portal/bookstore-configuration.xml b/src/main/resources/conf/portal/bookstore-configuration.xml
++index 29f1ffb..eb1fe54 100644
++--- a/src/main/resources/conf/portal/bookstore-configuration.xml
+++++ b/src/main/resources/conf/portal/bookstore-configuration.xml
++@@ -7,7 +7,7 @@
++ 	</component>
++ 	<component>
++ 	    <key>exoplatform.BookStoreService</key>
++-	    <type>exoplatform.BookStoreService</type>
+++	    <type>exoplatform.BookStoreServiceImpl</type>
++     </component>
++ 
++ </configuration>
++\ No newline at end of file
++diff --git a/src/test/java/exoplatform/BaseBookstoreTestCase.java b/src/test/java/exoplatform/BaseBookstoreTestCase.java
++new file mode 100644
++index 0000000..d46be09
++--- /dev/null
+++++ b/src/test/java/exoplatform/BaseBookstoreTestCase.java
++@@ -0,0 +1,142 @@
+++/*
+++ * Copyright (C) 2003-2008 eXo Platform SAS.
+++ *
+++ * This program is free software; you can redistribute it and/or
+++ * modify it under the terms of the GNU Affero General Public License
+++ * as published by the Free Software Foundation; either version 3
+++ * of the License, or (at your option) any later version.
+++ *
+++ * This program is distributed in the hope that it will be useful,
+++ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+++ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+++ * GNU General Public License for more details.
+++ *
+++ * You should have received a copy of the GNU General Public License
+++ * along with this program; if not, see<http://www.gnu.org/licenses/>.
+++ */
+++package exoplatform;
+++
+++import java.util.List;
+++
+++import javax.jcr.Node;
+++import javax.jcr.Session;
+++
+++import org.exoplatform.container.StandaloneContainer;
+++import org.exoplatform.services.jcr.RepositoryService;
+++import org.exoplatform.services.jcr.ext.app.SessionProviderService;
+++import org.exoplatform.services.jcr.ext.common.SessionProvider;
+++import org.exoplatform.services.log.ExoLogger;
+++import org.exoplatform.services.log.Log;
+++import org.exoplatform.services.security.ConversationState;
+++import org.exoplatform.services.security.Identity;
+++import org.exoplatform.test.BasicTestCase;
+++
+++/**
+++ * Created by The eXo Platform SAS
+++ * @author : Hung nguyen
+++ *          hung.nguyen@exoplatform.com
+++ * May 7, 2008  
+++ */
+++public abstract class BaseBookstoreTestCase extends BasicTestCase {
+++
+++  protected static Log                  log                    = ExoLogger.getLogger("exoplatform.bookstore.test");
+++
+++  protected static RepositoryService    repositoryService;
+++
+++  protected static StandaloneContainer  container;
+++
+++  protected final static String         REPO_NAME              = "repository".intern();
+++
+++  protected final static String         BOOKSTORE_WS              = "bookstore".intern();
+++
+++  protected static Node                 root_                  = null;
+++
+++  protected SessionProvider             sessionProvider;
+++
+++  private static SessionProviderService sessionProviderService = null;
+++
+++  public static void init() {
+++    // we do this in static to save a few cycles
+++    initContainer();
+++    initJCR();
+++  }
+++
+++  public BaseBookstoreTestCase() throws Exception {
+++    init();
+++  }
+++
+++  public void setUp() throws Exception {
+++    startSystemSession();
+++  }
+++
+++  public void tearDown() throws Exception {
+++  }
+++
+++  protected void startSystemSession() {
+++    sessionProvider = sessionProviderService.getSystemSessionProvider(null);
+++  }
+++
+++  protected void startSessionAs(String user) {
+++    Identity identity = new Identity(user);
+++    ConversationState state = new ConversationState(identity);
+++    sessionProviderService.setSessionProvider(null, new SessionProvider(state));
+++    sessionProvider = sessionProviderService.getSessionProvider(null);
+++  }
+++
+++  protected void endSession() {
+++    sessionProviderService.removeSessionProvider(null);
+++    startSystemSession();
+++  }
+++
+++  /**
+++   * All elements of a list should be contained in the expected array of String
+++   * @param message
+++   * @param expected
+++   * @param actual
+++   */
+++  public static void assertContainsAll(String message, List<String> expected, List<String> actual) {
+++    assertEquals(message, expected.size(), actual.size());
+++    assertTrue(message, expected.containsAll(actual));
+++  }
+++
+++  /**
+++   * Assertion method on string arrays
+++   * @param message
+++   * @param expected
+++   * @param actual
+++   */
+++  public static void assertEquals(String message, String[] expected, String[] actual) {
+++    assertEquals(message, expected.length, actual.length);
+++    for (int i = 0; i < expected.length; i++) {
+++      assertEquals(message, expected[i], actual[i]);
+++    }
+++  }
+++
+++  private static void initContainer() {
+++    try {
+++      String containerConf = BaseBookstoreTestCase.class.getResource("/conf/portal/configuration.xml").toString();
+++      StandaloneContainer.addConfigurationURL(containerConf);
+++      container = StandaloneContainer.getInstance();
+++      String loginConf = Thread.currentThread().getContextClassLoader().getResource("conf/portal/login.conf").toString();
+++
+++      if (System.getProperty("java.security.auth.login.config") == null)
+++        System.setProperty("java.security.auth.login.config", loginConf);
+++    } catch (Exception e) {
+++      throw new RuntimeException("Failed to initialize standalone container: " + e.getMessage(), e);
+++    }
+++  }
+++
+++  private static void initJCR() {
+++    try {
+++      repositoryService = (RepositoryService) container.getComponentInstanceOfType(RepositoryService.class);
+++
+++      // Initialize datas
+++      Session session = repositoryService.getRepository(REPO_NAME).getSystemSession(BOOKSTORE_WS);
+++      root_ = session.getRootNode();
+++      sessionProviderService = (SessionProviderService) container.getComponentInstanceOfType(SessionProviderService.class);
+++    } catch (Exception e) {
+++      throw new RuntimeException("Failed to initialize JCR: " + e.getMessage(), e);
+++    }
+++  }
+++
+++}
++diff --git a/src/test/java/exoplatform/BookStoreTest.java b/src/test/java/exoplatform/BookStoreTest.java
++index a5d3c84..fb3b0a1 100644
++--- a/src/test/java/exoplatform/BookStoreTest.java
+++++ b/src/test/java/exoplatform/BookStoreTest.java
++@@ -16,7 +16,9 @@
++  */
++ package exoplatform;
++ 
++-import junit.framework.TestCase;
+++import org.exoplatform.services.organization.OrganizationService;
+++
+++import exoplatform.entity.User;
++ 
++ /**
++  * Created by The eXo Platform SAS
++@@ -24,6 +26,32 @@ import junit.framework.TestCase;
++  *          binhnv@exoplatform.com
++  * Jul 17, 2012  
++  */
++-public class BookStoreTest extends TestCase {
+++public class BookStoreTest extends BaseBookstoreTestCase {
++ 
+++  private static BookStoreService service;
+++  private static JCRDataStorage storage;
+++  private OrganizationService organizationService;
+++  
+++  public BookStoreTest() throws Exception {
+++    super();
+++    service = (BookStoreService) container.getComponentInstanceOfType(BookStoreService.class);
+++    storage = new JCRDataStorage(repositoryService);
+++    organizationService = (OrganizationService) container.getComponentAdapterOfType(OrganizationService.class);
+++  }
+++  
+++  /* (non-Javadoc)
+++   * @see junit.framework.TestCase#setUp()
+++   */
+++  @Override
+++  public void setUp() throws Exception {
+++    super.setUp();
+++  }
+++  
+++  public void testUserByNameSQL() {
+++    String name = "BinhNV";
+++    
+++    User user = service.getUserByNameSQL(name);
+++    assertNotNull(user);
+++  }
+++  
++ }
++diff --git a/src/test/resources/conf/portal/configuration.properties b/src/test/resources/conf/portal/configuration.properties
++new file mode 100644
++index 0000000..1f902e4
++--- /dev/null
+++++ b/src/test/resources/conf/portal/configuration.properties
++@@ -0,0 +1,70 @@
+++#
+++# Copyright (C) 2009 eXo Platform SAS.
+++#
+++# This is free software; you can redistribute it and/or modify it
+++# under the terms of the GNU Lesser General Public License as
+++# published by the Free Software Foundation; either version 2.1 of
+++# the License, or (at your option) any later version.
+++#
+++# This software is distributed in the hope that it will be useful,
+++# but WITHOUT ANY WARRANTY; without even the implied warranty of
+++# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+++# Lesser General Public License for more details.
+++#
+++# You should have received a copy of the GNU Lesser General Public
+++# License along with this software; if not, write to the Free
+++# Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
+++# 02110-1301 USA, or see the FSF site: http://www.fsf.org.
+++#
+++
+++# Data
+++gatein.data.dir=target/gatein/data
+++
+++# DB
+++gatein.db.data.dir=${gatein.data.dir}/db
+++
+++# JCR
+++gatein.jcr.config.type=local
+++gatein.jcr.datasource.name=jdbcjcr
+++gatein.jcr.datasource.dialect=auto
+++gatein.jcr.datasource.driver=org.hsqldb.jdbcDriver
+++gatein.jcr.datasource.url=jdbc:hsqldb:file:${gatein.db.data.dir}/data/jdbcjcr_${name}
+++gatein.jcr.datasource.username=sa
+++gatein.jcr.datasource.password=
+++
+++gatein.jcr.data.dir=${gatein.data.dir}/jcr
+++gatein.jcr.storage.data.dir=${gatein.jcr.data.dir}/values
+++gatein.jcr.cache.config=classpath:/conf/jcr/jbosscache/${gatein.jcr.config.type}/cache-config.xml
+++gatein.jcr.cache.expiration.time=15m
+++gatein.jcr.lock.cache.config=classpath:/conf/jcr/jbosscache/${gatein.jcr.config.type}/lock-config.xml
+++gatein.jcr.index.data.dir=${gatein.jcr.data.dir}/lucene
+++gatein.jcr.index.changefilterclass=org.exoplatform.services.jcr.impl.core.query.DefaultChangesFilter
+++gatein.jcr.index.cache.config=classpath:/conf/jcr/jbosscache/${gatein.jcr.config.type}/indexer-config.xml
+++gatein.jcr.jgroups.config=classpath:/conf/jcr/jbosscache/cluster/jgroups-udp.xml
+++gatein.jcr.repository.default=repository
+++gatein.jcr.workspace.default=collaboration
+++gatein.jcr.workspace.system=system
+++
+++# IDM
+++gatein.idm.datasource.name=jdbcidm
+++gatein.idm.datasource.driver=org.hsqldb.jdbcDriver
+++gatein.idm.datasource.url=jdbc:hsqldb:file:${gatein.db.data.dir}/data/jdbcidm_${name}
+++gatein.idm.datasource.username=sa
+++gatein.idm.datasource.password=
+++
+++# Arjuna configuration
+++com.arjuna.ats.arjuna.objectstore.objectStoreDir=${gatein.data.dir}/jta
+++
+++# EMail
+++gatein.email.smtp.username=
+++gatein.email.smtp.password=
+++gatein.email.smtp.host=smtp.gmail.com
+++gatein.email.smtp.port=465
+++gatein.email.smtp.starttls.enable=true
+++gatein.email.smtp.auth=true
+++gatein.email.smtp.socketFactory.port=465
+++gatein.email.smtp.socketFactory.class=javax.net.ssl.SSLSocketFactory
+++
+++# Debug environment variables
+++mail.debug=false
+++smack.debugEnabled=false
++\ No newline at end of file
++diff --git a/src/test/resources/conf/portal/configuration.xml b/src/test/resources/conf/portal/configuration.xml
++new file mode 100644
++index 0000000..ee99d2d
++--- /dev/null
+++++ b/src/test/resources/conf/portal/configuration.xml
++@@ -0,0 +1,28 @@
+++<?xml version="1.0" encoding="ISO-8859-1"?>
+++<!--
+++
+++    Copyright (C) 2009 eXo Platform SAS.
+++
+++    This is free software; you can redistribute it and/or modify it
+++    under the terms of the GNU Lesser General Public License as
+++    published by the Free Software Foundation; either version 2.1 of
+++    the License, or (at your option) any later version.
+++
+++    This software is distributed in the hope that it will be useful,
+++    but WITHOUT ANY WARRANTY; without even the implied warranty of
+++    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+++    Lesser General Public License for more details.
+++
+++    You should have received a copy of the GNU Lesser General Public
+++    License along with this software; if not, write to the Free
+++    Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
+++    02110-1301 USA, or see the FSF site: http://www.fsf.org.
+++
+++-->
+++<configuration
+++   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+++   xsi:schemaLocation="http://www.exoplaform.org/xml/ns/kernel_1_0.xsd http://www.exoplaform.org/xml/ns/kernel_1_0.xsd"
+++   xmlns="http://www.exoplaform.org/xml/ns/kernel_1_0.xsd">
+++  <import>jar:/conf/portal/organization-configuration.xml</import>
+++  <import>jar:/conf/portal/test-configuration.xml</import>
+++</configuration>
++\ No newline at end of file
++diff --git a/src/test/resources/conf/portal/locales-config.xml b/src/test/resources/conf/portal/locales-config.xml
++new file mode 100644
++index 0000000..8af46ed
++--- /dev/null
+++++ b/src/test/resources/conf/portal/locales-config.xml
++@@ -0,0 +1,39 @@
+++<?xml version="1.0" encoding="UTF-8"?>
+++<locales-config>
+++  <!--
+++    Check http://www.ics.uci.edu/pub/ietf/http/related/iso639.txt for locale code 
+++    The encoding parameter will be used for the request  response stream.
+++    The input-encoding parameter will be used for request setCharacterEncoding(..) 
+++
+++    encoding: ISO-8859-1 
+++  -->
+++  
+++  <locale-config>
+++    <locale>en</locale>
+++    <output-encoding>UTF-8</output-encoding>
+++    <input-encoding>UTF-8</input-encoding>
+++    <description>Default configuration for english locale</description>
+++  </locale-config>
+++
+++  <locale-config>
+++    <locale>fr</locale>
+++    <output-encoding>UTF-8</output-encoding>
+++    <input-encoding>UTF-8</input-encoding>
+++    <description>Default configuration for the french locale</description>
+++  </locale-config>
+++
+++ <locale-config>
+++    <locale>nl</locale>
+++    <output-encoding>UTF-8</output-encoding>
+++    <input-encoding>UTF-8</input-encoding>
+++    <description>Default configuration for the dutch locale</description>
+++  </locale-config>
+++
+++ <locale-config>
+++    <locale>de</locale>
+++    <output-encoding>UTF-8</output-encoding>
+++    <input-encoding>UTF-8</input-encoding>
+++    <description>Default configuration for the german locale</description>
+++  </locale-config>
+++  
+++</locales-config>
++diff --git a/src/test/resources/conf/portal/login.conf b/src/test/resources/conf/portal/login.conf
++new file mode 100644
++index 0000000..55018c0
++--- /dev/null
+++++ b/src/test/resources/conf/portal/login.conf
++@@ -0,0 +1,5 @@
+++gatein-domain {
+++  org.exoplatform.web.security.PortalLoginModule required;
+++  org.exoplatform.services.security.jaas.SharedStateLoginModule required;
+++  org.exoplatform.services.security.j2ee.TomcatLoginModule required; 
+++};
++diff --git a/src/test/resources/conf/portal/nodetypes.xml b/src/test/resources/conf/portal/nodetypes.xml
++new file mode 100644
++index 0000000..c6482fa
++--- /dev/null
+++++ b/src/test/resources/conf/portal/nodetypes.xml
++@@ -0,0 +1,83 @@
+++<?xml version="1.0" encoding="ISO-8859-1"?>
+++<nodeTypes xmlns:nt="http://www.jcp.org/jcr/nt/1.0" xmlns:mix="http://www.jcp.org/jcr/mix/1.0" xmlns:jcr="http://www.jcp.org/jcr/1.0">
+++    
+++	<nodeType name="exostore:book" isMixin="false" hasOrderableChildNodes="false" primaryItemName="">
+++		<supertypes>
+++			<supertype>nt:base</supertype>
+++			<supertype>mix:referenceable</supertype>
+++		</supertypes>
+++		<propertyDefinitions>
+++			<propertyDefinition name="exostore:bookname" requiredType="String" autoCreated="false" mandatory="false" 
+++						onParentVersion="COPY" protected="false" multiple="false">
+++				<valueConstraints/>
+++			</propertyDefinition>
+++			<propertyDefinition name="exostore:bookcategory" requiredType="String" autoCreated="false" mandatory="false" 
+++						onParentVersion="COPY" protected="false" multiple="false">
+++				<valueConstraints/>
+++			</propertyDefinition>
+++			<propertyDefinition name="exostore:bookcontent" requiredType="String" autoCreated="false" mandatory="false" 
+++						onParentVersion="COPY" protected="false" multiple="false">
+++				<valueConstraints/>
+++			</propertyDefinition>
+++			<propertyDefinition name="exostore:author" requiredType="Reference" autoCreated="false" mandatory="false" 
+++			    		onParentVersion="COPY" protected="false" multiple="false">
+++        		<valueConstraints/>
+++      		</propertyDefinition>
+++		</propertyDefinitions>
+++	</nodeType>
+++	
+++	<nodeType name="exostore:author" isMixin="false" hasOrderableChildNodes="false" primaryItemName="">
+++		<supertypes>
+++			<supertype>nt:base</supertype>
+++			<supertype>mix:referenceable</supertype>
+++		</supertypes>
+++		<propertyDefinitions>
+++			<propertyDefinition name="exostore:authorname" requiredType="String" autoCreated="false" mandatory="false" 
+++						onParentVersion="COPY" protected="false" multiple="false">
+++				<valueConstraints/>
+++			</propertyDefinition>
+++			<propertyDefinition name="exostore:authoraddress" requiredType="String" autoCreated="false" mandatory="false" 
+++						onParentVersion="COPY" protected="false" multiple="false">
+++				<valueConstraints/>
+++			</propertyDefinition>
+++			<propertyDefinition name="exostore:authorphone" requiredType="String" autoCreated="false" mandatory="false" 
+++						onParentVersion="COPY" protected="false" multiple="false">
+++				<valueConstraints/>
+++			</propertyDefinition>
+++		</propertyDefinitions>
+++	</nodeType>
+++	
+++	<nodeType name="exostore:user" isMixin="false" hasOrderableChildNodes="false" primaryItemName="">
+++		<supertypes>
+++			<supertype>nt:base</supertype>
+++			<supertype>mix:referenceable</supertype>
+++		</supertypes>
+++		<propertyDefinitions>
+++			<propertyDefinition name="exostore:username" requiredType="String" autoCreated="false" mandatory="false" 
+++						onParentVersion="COPY" protected="false" multiple="false">
+++				<valueConstraints/>
+++			</propertyDefinition>
+++			<propertyDefinition name="exostore:password" requiredType="String" autoCreated="false" mandatory="false" 
+++						onParentVersion="COPY" protected="false" multiple="false">
+++				<valueConstraints/>
+++			</propertyDefinition>
+++			<propertyDefinition name="exostore:fullname" requiredType="String" autoCreated="false" mandatory="false" 
+++						onParentVersion="COPY" protected="false" multiple="false">
+++				<valueConstraints/>
+++			</propertyDefinition>
+++			<propertyDefinition name="exostore:useraddress" requiredType="String" autoCreated="false" mandatory="false" 
+++						onParentVersion="COPY" protected="false" multiple="false">
+++				<valueConstraints/>
+++			</propertyDefinition>
+++			<propertyDefinition name="exostore:userphone" requiredType="String" autoCreated="false" mandatory="false" 
+++						onParentVersion="COPY" protected="false" multiple="false">
+++				<valueConstraints/>
+++			</propertyDefinition>
+++			<propertyDefinition name="exostore:book" requiredType="Reference" autoCreated="false" mandatory="false" 
+++			    		onParentVersion="COPY" protected="false" multiple="true">
+++        		<valueConstraints/>
+++      		</propertyDefinition>
+++		</propertyDefinitions>
+++	</nodeType>
+++	
+++</nodeTypes>
++\ No newline at end of file
++diff --git a/src/test/resources/conf/portal/organization-configuration.xml b/src/test/resources/conf/portal/organization-configuration.xml
++new file mode 100644
++index 0000000..d45846e
++--- /dev/null
+++++ b/src/test/resources/conf/portal/organization-configuration.xml
++@@ -0,0 +1,270 @@
+++<?xml version="1.0" encoding="ISO-8859-1"?>
+++<!--
+++
+++    Copyright (C) 2009 eXo Platform SAS.
+++    
+++    This is free software; you can redistribute it and/or modify it
+++    under the terms of the GNU Lesser General Public License as
+++    published by the Free Software Foundation; either version 2.1 of
+++    the License, or (at your option) any later version.
+++    
+++    This software is distributed in the hope that it will be useful,
+++    but WITHOUT ANY WARRANTY; without even the implied warranty of
+++    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+++    Lesser General Public License for more details.
+++    
+++    You should have received a copy of the GNU Lesser General Public
+++    License along with this software; if not, write to the Free
+++    Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
+++    02110-1301 USA, or see the FSF site: http://www.fsf.org.
+++
+++-->
+++
+++<configuration
+++   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+++   xsi:schemaLocation="http://www.exoplaform.org/xml/ns/kernel_1_0.xsd http://www.exoplaform.org/xml/ns/kernel_1_0.xsd"
+++   xmlns="http://www.exoplaform.org/xml/ns/kernel_1_0.xsd">
+++  <external-component-plugins>
+++    <target-component>org.exoplatform.services.organization.OrganizationService</target-component>
+++    <component-plugin>
+++      <name>init.service.listener</name>
+++      <set-method>addListenerPlugin</set-method>
+++      <type>org.exoplatform.services.organization.OrganizationDatabaseInitializer</type>
+++      <description>this listener populate organization data for the first launch</description>
+++      <init-params>      
+++        <value-param>
+++          <name>checkDatabaseAlgorithm</name>
+++          <description>check database</description>
+++          <value>entry</value>
+++        </value-param>      
+++        <value-param>
+++          <name>printInformation</name>
+++          <description>Print information init database</description>
+++          <value>false</value>
+++        </value-param> 
+++        <object-param>
+++          <name>configuration</name>
+++          <description>description</description>
+++          <object type="org.exoplatform.services.organization.OrganizationConfig">
+++          
+++            <field  name="membershipType">
+++              <collection type="java.util.ArrayList">
+++              	<value>
+++                  <object type="org.exoplatform.services.organization.OrganizationConfig$MembershipType">
+++                    <field  name="type"><string>manager</string></field>
+++                    <field  name="description"><string>manager membership type</string></field>
+++                  </object>
+++                </value>
+++                <value>
+++                  <object type="org.exoplatform.services.organization.OrganizationConfig$MembershipType">
+++                    <field  name="type"><string>member</string></field>
+++                    <field  name="description"><string>member membership type</string></field>
+++                  </object>
+++                </value>                
+++                <value>
+++                  <object type="org.exoplatform.services.organization.OrganizationConfig$MembershipType">
+++                    <field  name="type"><string>validator</string></field>
+++                    <field  name="description"><string>validator membership type</string></field>
+++                  </object>
+++                </value>
+++              </collection>
+++            </field>
+++
+++            <field  name="group">
+++              <collection type="java.util.ArrayList">             
+++                <value>
+++                  <object type="org.exoplatform.services.organization.OrganizationConfig$Group">
+++                    <field  name="name"><string>platform</string></field>
+++                    <field  name="parentId"><string></string></field>
+++                    <field  name="description"><string>the /platform group</string></field>
+++                    <field  name="label"><string>Platform</string></field>                    
+++                  </object>
+++                </value>
+++                <value>
+++                  <object type="org.exoplatform.services.organization.OrganizationConfig$Group">
+++                    <field  name="name"><string>administrators</string></field>
+++                    <field  name="parentId"><string>/platform</string></field>
+++                    <field  name="description"><string>the /platform/administrators group</string></field>
+++                    <field  name="label"><string>Administrators</string></field>
+++                  </object>
+++                </value>
+++                <value>
+++                  <object type="org.exoplatform.services.organization.OrganizationConfig$Group">
+++                    <field  name="name"><string>users</string></field>
+++                    <field  name="parentId"><string>/platform</string></field>
+++                    <field  name="description"><string>the /platform/users group</string></field>
+++                    <field  name="label"><string>Users</string></field>
+++                  </object>
+++                </value>
+++                <value>
+++                  <object type="org.exoplatform.services.organization.OrganizationConfig$Group">
+++                    <field  name="name"><string>guests</string></field>
+++                    <field  name="parentId"><string>/platform</string></field>
+++                    <field  name="description"><string>the /platform/guests group</string></field>
+++                    <field  name="label"><string>Guests</string></field>
+++                  </object>
+++                </value>
+++                <value>
+++                  <object type="org.exoplatform.services.organization.OrganizationConfig$Group">
+++                    <field  name="name"><string>organization</string></field>
+++                    <field  name="parentId"><string></string></field>
+++                    <field  name="description"><string>the organization group</string></field>
+++                    <field  name="label"><string>Organization</string></field>
+++                  </object>
+++                </value>
+++                <value>
+++                  <object type="org.exoplatform.services.organization.OrganizationConfig$Group">
+++                    <field  name="name"><string>management</string></field>
+++                    <field  name="parentId"><string>/organization</string></field>
+++                    <field  name="description"><string>the /organization/management group</string></field>
+++                    <field  name="label"><string>Management</string></field>
+++                  </object>
+++                </value>
+++                <value>
+++                  <object type="org.exoplatform.services.organization.OrganizationConfig$Group">
+++                    <field  name="name"><string>executive-board</string></field>
+++                    <field  name="parentId"><string>/organization/management</string></field>
+++                    <field  name="description"><string>the /organization/management/executive-board group</string></field>
+++                    <field  name="label"><string>Executive Board</string></field>
+++                  </object>
+++                </value>
+++                <value>
+++                  <object type="org.exoplatform.services.organization.OrganizationConfig$Group">
+++                    <field  name="name"><string>human-resources</string></field>
+++                    <field  name="parentId"><string>/organization/management</string></field>
+++                    <field  name="description"><string>the /organization/management/human-resource group</string></field>
+++                    <field  name="label"><string>Human Resources</string></field>
+++                  </object>
+++                </value>
+++                <value>
+++                  <object type="org.exoplatform.services.organization.OrganizationConfig$Group">
+++                    <field  name="name"><string>communication</string></field>
+++                    <field  name="parentId"><string>/organization</string></field>
+++                    <field  name="description"><string>the /organization/communication group</string></field>
+++                    <field  name="label"><string>Communication</string></field>
+++                  </object>
+++                </value>
+++                <value>
+++                  <object type="org.exoplatform.services.organization.OrganizationConfig$Group">
+++                    <field  name="name"><string>marketing</string></field>
+++                    <field  name="parentId"><string>/organization/communication</string></field>
+++                    <field  name="description"><string>the /organization/communication/marketing group</string></field>
+++                    <field  name="label"><string>Marketing</string></field>
+++                  </object>
+++                </value>
+++                <value>
+++                  <object type="org.exoplatform.services.organization.OrganizationConfig$Group">
+++                    <field  name="name"><string>press-and-media</string></field>
+++                    <field  name="parentId"><string>/organization/communication</string></field>
+++                    <field  name="description"><string>the /organization/communication/press-and-media group</string></field>
+++                    <field  name="label"><string>Press and Media</string></field>
+++                  </object>
+++                </value>
+++                <value>
+++                  <object type="org.exoplatform.services.organization.OrganizationConfig$Group">
+++                    <field  name="name"><string>operations</string></field>
+++                    <field  name="parentId"><string>/organization</string></field>
+++                    <field  name="description"><string>the /organization/operations and media group</string></field>
+++                    <field  name="label"><string>Operations</string></field>
+++                  </object>
+++                </value>
+++                <value>
+++                  <object type="org.exoplatform.services.organization.OrganizationConfig$Group">
+++                    <field  name="name"><string>sales</string></field>
+++                    <field  name="parentId"><string>/organization/operations</string></field>
+++                    <field  name="description"><string>the /organization/operations/sales group</string></field>
+++                    <field  name="label"><string>Sales</string></field>
+++                  </object>
+++                </value>
+++                <value>
+++                  <object type="org.exoplatform.services.organization.OrganizationConfig$Group">
+++                    <field  name="name"><string>finances</string></field>
+++                    <field  name="parentId"><string>/organization/operations</string></field>
+++                    <field  name="description"><string>the /organization/operations/finances group</string></field>
+++                    <field  name="label"><string>Finances</string></field>
+++                  </object>
+++                </value>
+++                <value>
+++                  <object type="org.exoplatform.services.organization.OrganizationConfig$Group">
+++                    <field  name="name"><string>customers</string></field>
+++                    <field  name="parentId"><string></string></field>
+++                    <field  name="description"><string>the /customers group</string></field>
+++                    <field  name="label"><string>Customers</string></field>
+++                  </object>
+++                </value>                
+++                <value>
+++                  <object type="org.exoplatform.services.organization.OrganizationConfig$Group">
+++                    <field  name="name"><string>partners</string></field>
+++                    <field  name="parentId"><string></string></field>
+++                    <field  name="description"><string>the /partners group</string></field>
+++                    <field  name="label"><string>Partners</string></field>
+++                  </object>
+++                </value>                
+++              </collection>
+++            </field>
+++
+++            <field  name="user">
+++              <collection type="java.util.ArrayList">
+++                <value>
+++                  <object type="org.exoplatform.services.organization.OrganizationConfig$User">
+++                    <field  name="userName"><string>root</string></field>
+++                    <field  name="password"><string>gtn</string></field>
+++                    <field  name="firstName"><string>Root</string></field>
+++                    <field  name="lastName"><string>Root</string></field>
+++                    <field  name="email"><string>root@localhost</string></field>
+++                    <field  name="groups">
+++                      <string>
+++                      	manager:/platform/administrators,member:/platform/users,
+++                      	member:/organization/management/executive-board
+++                      </string>
+++                    </field>
+++                  </object>
+++                </value>
+++                
+++                <value>
+++                  <object type="org.exoplatform.services.organization.OrganizationConfig$User">
+++                    <field  name="userName"><string>john</string></field>
+++                    <field  name="password"><string>gtn</string></field>
+++                    <field  name="firstName"><string>John</string></field>
+++                    <field  name="lastName"><string>Anthony</string></field>
+++                    <field  name="email"><string>john@localhost</string></field>
+++                    <field  name="groups">
+++                      <string>
+++                      	member:/platform/administrators,member:/platform/users,
+++                      	manager:/organization/management/executive-board
+++                      </string>
+++                    </field>
+++                  </object>
+++                </value>                                                        
+++                <value>
+++                  <object type="org.exoplatform.services.organization.OrganizationConfig$User">
+++                    <field  name="userName"><string>mary</string></field>
+++                    <field  name="password"><string>gtn</string></field>
+++                    <field  name="firstName"><string>Mary</string></field>
+++                    <field  name="lastName"><string>Kelly</string></field>
+++                    <field  name="email"><string>mary@localhost</string></field>
+++                    <field  name="groups">
+++                      <string>member:/platform/users</string>
+++                    </field>
+++                  </object>
+++                </value>
+++                <value>
+++                  <object type="org.exoplatform.services.organization.OrganizationConfig$User">
+++                    <field  name="userName"><string>demo</string></field>
+++                    <field  name="password"><string>gtn</string></field>
+++                    <field  name="firstName"><string>Demo</string></field>
+++                    <field  name="lastName"><string>gtn</string></field>
+++                    <field  name="email"><string>demo@localhost</string></field>
+++                    <field  name="groups">
+++                      <string>member:/platform/guests,member:/platform/users</string>
+++                    </field>
+++                  </object>
+++                </value>                       
+++              </collection>
+++            </field>
+++          </object>
+++        </object-param>
+++      </init-params>
+++    </component-plugin>
+++  </external-component-plugins>
+++</configuration>
++diff --git a/src/test/resources/conf/portal/repository-configuration.xml b/src/test/resources/conf/portal/repository-configuration.xml
++index 36cc0f3..6632e78 100644
++--- a/src/test/resources/conf/portal/repository-configuration.xml
+++++ b/src/test/resources/conf/portal/repository-configuration.xml
++@@ -1,102 +1,169 @@
++-<repository-service default-repository="repository">
++-   <repositories>
++-
++-    <repository name="repository" system-workspace="system" default-workspace="collaboration">
++-     <security-domain>gatein-domain</security-domain>
++-     <access-control>optional</access-control>
++-     <authentication-policy>org.exoplatform.services.jcr.impl.core.access.JAASAuthenticator</authentication-policy>
++-     <workspaces>
++-       <workspace name="system" auto-init-root-nodetype="nt:unstructured" 
++-                  auto-init-permissions="*:/platform/administrators read;*:/platform/administrators add_node;*:/platform/administrators set_property;*:/platform/administrators remove" >
++-          <!-- for system storage -->
++-          <container class="org.exoplatform.services.jcr.impl.storage.jdbc.JDBCWorkspaceDataContainer">
++-            <properties>
++-              <property name="sourceName" value="jdbcexo"/>
++-              <property name="dialect" value="hsqldb"/>
++-              <!-- property name="db-type" value="mysql"/ -->
++-              <property name="multi-db" value="false"/>
++-              <property name="update-storage" value="true"/>
++-              <property name="max-buffer-size" value="204800"/>
++-              <property name="swap-directory" value="target/temp/swap/system"/>
++-            </properties>
++-            <value-storages>
++-              <value-storage id="system" class="org.exoplatform.services.jcr.impl.storage.value.fs.TreeFileValueStorage">
++-                <properties>
++-                  <property name="path" value="target/temp/values/system"/>
++-                </properties>
++-                <filters>
++-                  <filter property-type="Binary"/>
++-                </filters>
++-              </value-storage>
++-            </value-storages>
++-          </container>
++-         <cache enabled="true">
++-          <properties>
++-            <property name="maxSize" value="20000"/>
++-            <property name="liveTime" value="30000"/>
++-          </properties>
++-         </cache>
++-         <query-handler class="org.exoplatform.services.jcr.impl.core.query.lucene.SearchIndex">
++-          <properties>
++-            <property name="indexDir" value="target/temp/jcrlucenedb/index/system"/>
++-          </properties>
++-         </query-handler>
++-         <lock-manager>
++-          <time-out>900000</time-out><!-- 15min -->
++-           <persister class="org.exoplatform.services.jcr.impl.core.lock.FileSystemLockPersister">
++-             <properties>
++-               <property name="path" value="target/temp/lock/system"/>
++-             </properties>
++-           </persister>
++-         </lock-manager>
++-       </workspace>
++-       <workspace name="collaboration" auto-init-root-nodetype="nt:unstructured" 
++-                  auto-init-permissions="any read;*:/platform/administrators read;*:/platform/administrators add_node;*:/platform/administrators set_property;*:/platform/administrators remove" >
++-          <!-- for system storage -->
++-          <container class="org.exoplatform.services.jcr.impl.storage.jdbc.JDBCWorkspaceDataContainer">
++-            <properties>
++-              <property name="sourceName" value="jdbcexo"/>
++-              <property name="dialect" value="hsqldb"/>
++-              <!-- property name="db-type" value="mysql"/ -->
++-              <property name="multi-db" value="false"/>
++-              <property name="update-storage" value="true"/>
++-              <property name="max-buffer-size" value="204800"/>
++-              <property name="swap-directory" value="target/temp/swap/collaboration"/>
++-            </properties>
++-            
++-            <value-storages>
++-              <value-storage id="collaboration" class="org.exoplatform.services.jcr.impl.storage.value.fs.TreeFileValueStorage">
++-                <properties>
++-                  <property name="path" value="target/temp/values/collaboration"/>
++-                </properties>
++-                <filters>
++-                  <filter property-type="Binary"/>
++-                </filters>
++-              </value-storage>
++-            </value-storages>
++-            
++-          </container>
++-         <cache enabled="true">
++-          <properties>
++-            <property name="maxSize" value="20000"/>
++-            <property name="liveTime" value="30000"/>
++-          </properties>
++-         </cache>
++-         <query-handler class="org.exoplatform.services.jcr.impl.core.query.lucene.SearchIndex">
++-          <properties>
++-            <property name="indexDir" value="target/temp/jcrlucenedb/index/collaboration"/>
++-          </properties>
++-         </query-handler>
++-         <lock-manager>
++-          <time-out>900000</time-out><!-- 15min -->
++-           <persister class="org.exoplatform.services.jcr.impl.core.lock.FileSystemLockPersister">
++-             <properties>
++-               <property name="path" value="target/temp/lock/collaboration"/>
++-             </properties>
++-           </persister>
++-         </lock-manager>
++-       </workspace>            
++-     </workspaces>
++-    </repository>
++-  </repositories>
++-</repository-service>
+++<repository-service default-repository="${gatein.jcr.repository.default}">
+++  <repositories>
+++    <repository name="${gatein.jcr.repository.default}" system-workspace="${gatein.jcr.workspace.system}" default-workspace="${gatein.jcr.workspace.default}">
+++      <security-domain>gatein-domain</security-domain>
+++      <access-control>optional</access-control>
+++      <authentication-policy>org.exoplatform.services.jcr.impl.core.access.JAASAuthenticator</authentication-policy>
+++      <workspaces>
+++          
+++         <workspace name="system" auto-init-root-nodetype="nt:unstructured" 
+++                  auto-init-permissions="*:/platform/administrators read;*:/platform/administrators add_node;*:/platform/administrators set_property;*:/platform/administrators remove" >
+++          <!-- for system storage -->
+++          <container class="org.exoplatform.services.jcr.impl.storage.jdbc.JDBCWorkspaceDataContainer">
+++            <properties>
+++              <property name="sourceName" value="jdbcexo"/>
+++              <property name="dialect" value="hsqldb"/>
+++              <!-- property name="db-type" value="mysql"/ -->
+++              <property name="multi-db" value="false"/>
+++              <property name="update-storage" value="true"/>
+++              <property name="max-buffer-size" value="204800"/>
+++              <property name="swap-directory" value="target/temp/swap/system"/>
+++            </properties>
+++            <value-storages>
+++              <value-storage id="system" class="org.exoplatform.services.jcr.impl.storage.value.fs.TreeFileValueStorage">
+++                <properties>
+++                  <property name="path" value="target/temp/values/system"/>
+++                </properties>
+++                <filters>
+++                  <filter property-type="Binary"/>
+++                </filters>
+++              </value-storage>
+++            </value-storages>
+++          </container>
+++         <cache enabled="true">
+++          <properties>
+++            <property name="maxSize" value="20000"/>
+++            <property name="liveTime" value="30000"/>
+++          </properties>
+++         </cache>
+++         <query-handler class="org.exoplatform.services.jcr.impl.core.query.lucene.SearchIndex">
+++          <properties>
+++            <property name="indexDir" value="target/temp/jcrlucenedb/index/system"/>
+++          </properties>
+++         </query-handler>
+++         <lock-manager>
+++          <time-out>900000</time-out><!-- 15min -->
+++           <persister class="org.exoplatform.services.jcr.impl.core.lock.FileSystemLockPersister">
+++             <properties>
+++               <property name="path" value="target/temp/lock/system"/>
+++             </properties>
+++           </persister>
+++         </lock-manager>
+++       </workspace>
+++          
+++         <workspace name="collaboration" auto-init-root-nodetype="nt:unstructured" 
+++                  auto-init-permissions="any read;*:/platform/administrators read;*:/platform/administrators add_node;*:/platform/administrators set_property;*:/platform/administrators remove" >
+++          <!-- for system storage -->
+++          <container class="org.exoplatform.services.jcr.impl.storage.jdbc.JDBCWorkspaceDataContainer">
+++            <properties>
+++              <property name="sourceName" value="jdbcexo"/>
+++              <property name="dialect" value="hsqldb"/>
+++              <!-- property name="db-type" value="mysql"/ -->
+++              <property name="multi-db" value="false"/>
+++              <property name="update-storage" value="true"/>
+++              <property name="max-buffer-size" value="204800"/>
+++              <property name="swap-directory" value="target/temp/swap/collaboration"/>
+++            </properties>
+++            <value-storages>
+++              <value-storage id="collaboration" class="org.exoplatform.services.jcr.impl.storage.value.fs.TreeFileValueStorage">
+++                <properties>
+++                  <property name="path" value="target/temp/values/collaboration"/>
+++                </properties>
+++                <filters>
+++                  <filter property-type="Binary"/>
+++                </filters>
+++              </value-storage>
+++            </value-storages>
+++          </container>
+++         <cache enabled="true">
+++          <properties>
+++            <property name="maxSize" value="20000"/>
+++            <property name="liveTime" value="30000"/>
+++          </properties>
+++         </cache>
+++         <query-handler class="org.exoplatform.services.jcr.impl.core.query.lucene.SearchIndex">
+++          <properties>
+++            <property name="indexDir" value="target/temp/jcrlucenedb/index/collaboration"/>
+++          </properties>
+++         </query-handler>
+++         <lock-manager>
+++          <time-out>900000</time-out><!-- 15min -->
+++           <persister class="org.exoplatform.services.jcr.impl.core.lock.FileSystemLockPersister">
+++             <properties>
+++               <property name="path" value="target/temp/lock/collaboration"/>
+++             </properties>
+++           </persister>
+++         </lock-manager>
+++       </workspace>   
+++         
+++        <workspace name="bookstore">
+++          <container class="org.exoplatform.services.jcr.impl.storage.jdbc.optimisation.CQJDBCWorkspaceDataContainer">
+++            <properties>
+++              <property name="source-name" value="${gatein.jcr.datasource.name}${container.name.suffix}"/>
+++              <property name="dialect" value="${gatein.jcr.datasource.dialect}"/>
+++              <property name="multi-db" value="false"/>
+++              <property name="update-storage" value="true"/>
+++              <property name="max-buffer-size" value="200k"/>
+++              <property name="swap-directory" value="${gatein.jcr.data.dir}/swap/bookstore${container.name.suffix}"/>
+++            </properties>
+++            <value-storages>
+++              <value-storage id="bookstore" class="org.exoplatform.services.jcr.impl.storage.value.fs.TreeFileValueStorage">
+++                <properties>
+++                  <property name="path" value="${gatein.jcr.storage.data.dir}/bookstore${container.name.suffix}"/>
+++                </properties>
+++                <filters>
+++                  <filter property-type="Binary"/>
+++                </filters>
+++              </value-storage>
+++            </value-storages>
+++          </container>
+++          <initializer class="org.exoplatform.services.jcr.impl.core.ScratchWorkspaceInitializer">
+++            <properties>
+++              <property name="root-nodetype" value="nt:unstructured"/>
+++              <property name="root-permissions" value="any read;*:/platform/administrators read;*:/platform/administrators add_node;*:/platform/administrators set_property;*:/platform/administrators remove"/>
+++            </properties>
+++          </initializer>
+++          <cache enabled="true" class="org.exoplatform.services.jcr.impl.dataflow.persistent.jbosscache.JBossCacheWorkspaceStorageCache">
+++            <properties>
+++              <property name="jbosscache-configuration" value="${gatein.jcr.cache.config}" />
+++              <property name="jgroups-configuration" value="${gatein.jcr.jgroups.config}" />
+++              <property name="jbosscache-cluster-name" value="jcr-cache${container.name.suffix}" />
+++              <property name="jbosscache-shareable" value="true" />
+++              <property name="jbosscache-expiration-time" value="${gatein.jcr.cache.expiration.time}" />
+++            </properties>
+++          </cache>
+++          <query-handler class="org.exoplatform.services.jcr.impl.core.query.lucene.SearchIndex">
+++            <properties>
+++              <property name="index-dir" value="${gatein.jcr.index.data.dir}/bookstore${container.name.suffix}"/>
+++              <property name="changesfilter-class" value="${gatein.jcr.index.changefilterclass}" />
+++              <property name="jbosscache-configuration" value="${gatein.jcr.index.cache.config}" />
+++              <property name="jgroups-configuration" value="${gatein.jcr.jgroups.config}" />
+++              <property name="jbosscache-cluster-name" value="jcr-indexer${container.name.suffix}" />
+++              <property name="jbosscache-shareable" value="true" />
+++              <property name="max-volatile-time" value="60" />
+++            </properties>
+++          </query-handler>
+++          
+++          <lock-manager class="org.exoplatform.services.jcr.impl.core.lock.jbosscache.CacheableLockManagerImpl">
+++            <properties>
+++              <property name="time-out" value="15m" />
+++              <property name="jbosscache-configuration" value="${gatein.jcr.lock.cache.config}" />
+++              <property name="jgroups-configuration" value="${gatein.jcr.jgroups.config}" />
+++              <property name="jbosscache-cluster-name" value="jcr-lock${container.name.suffix}" />
+++              <property name="jbosscache-shareable" value="true" />
+++              <property name="jbosscache-cl-cache.jdbc.table.name" value="jcrlocks" />
+++              <property name="jbosscache-cl-cache.jdbc.table.create" value="true" />
+++              <property name="jbosscache-cl-cache.jdbc.table.drop" value="false" />
+++              <property name="jbosscache-cl-cache.jdbc.table.primarykey" value="pk" />
+++              <property name="jbosscache-cl-cache.jdbc.fqn.column" value="fqn" />
+++              <property name="jbosscache-cl-cache.jdbc.node.column" value="node" />
+++              <property name="jbosscache-cl-cache.jdbc.parent.column" value="parent" />
+++              <property name="jbosscache-cl-cache.jdbc.datasource" value="${gatein.jcr.datasource.name}${container.name.suffix}" />
+++            </properties>
+++          </lock-manager>
+++
+++        </workspace>
+++      </workspaces>
+++    </repository>
+++  </repositories>
+++</repository-service>
++diff --git a/src/test/resources/conf/portal/test-configuration.xml b/src/test/resources/conf/portal/test-configuration.xml
++index abcbb46..710685d 100644
++--- a/src/test/resources/conf/portal/test-configuration.xml
+++++ b/src/test/resources/conf/portal/test-configuration.xml
++@@ -1,8 +1,146 @@
++ <?xml version="1.0" encoding="ISO-8859-1"?>
++ <configuration xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.exoplaform.org/xml/ns/kernel_1_0.xsd http://www.exoplaform.org/xml/ns/kernel_1_0.xsd"
++   xmlns="http://www.exoplaform.org/xml/ns/kernel_1_0.xsd">
+++
+++   <component>
+++    <key>exoplatform.BookStoreService</key>
+++    <type>exoplatform.BookStoreServiceImpl</type>
+++  </component>
+++  
+++  <component>
+++    <key>org.exoplatform.services.organization.OrganizationService</key>
+++    <type>org.exoplatform.services.organization.hibernate.OrganizationServiceImpl</type>
+++  </component>
+++  
+++  <component>
+++    <key>org.exoplatform.services.database.HibernateService</key>
+++    <type>org.exoplatform.services.database.impl.HibernateServiceImpl</type>
+++    <init-params>
+++      <properties-param>
+++        <name>hibernate.properties</name>
+++        <description>Default Hibernate Service</description>
+++        <property name="hibernate.show_sql" value="false" />
+++        <property name="hibernate.cglib.use_reflection_optimizer" value="true" />
+++        <property name="hibernate.connection.url" value="jdbc:hsqldb:mem:target/temp/data/portal" />
+++        <property name="hibernate.connection.driver_class" value="org.hsqldb.jdbcDriver" />
+++        <property name="hibernate.connection.autocommit" value="true" />
+++        <property name="hibernate.connection.username" value="sa" />
+++        <property name="hibernate.connection.password" value="" />
+++        <property name="hibernate.dialect" value="org.hibernate.dialect.HSQLDialect" />
+++        <property name="hibernate.c3p0.min_size" value="5" />
+++        <property name="hibernate.c3p0.max_size" value="20" />
+++        <property name="hibernate.c3p0.timeout" value="1800" />
+++        <property name="hibernate.c3p0.max_statements" value="50" />
+++      </properties-param>
+++    </init-params>
+++  </component>
+++  
+++  <component>
+++    <key>org.exoplatform.services.cache.CacheService</key>
+++    <jmx-name>cache:type=CacheService</jmx-name>
+++    <type>org.exoplatform.services.cache.impl.CacheServiceImpl</type>
+++    <init-params>
+++      <object-param>
+++        <name>cache.config.default</name>
+++        <description>The default cache configuration</description>
+++        <object type="org.exoplatform.services.cache.ExoCacheConfig">
+++          <field name="name"><string>default</string></field>
+++          <field name="maxSize"><int>30000</int></field>
+++          <field name="liveTime"><long>60000</long></field>
+++          <field name="distributed"><boolean>false</boolean></field>
+++          <field name="implementation"><string>org.exoplatform.services.cache.concurrent.ConcurrentFIFOExoCache</string></field>
+++        </object>
+++      </object-param>
+++    </init-params>
+++  </component> 
+++  
+++   <component>
+++    <key>org.exoplatform.services.cache.ExoCacheFactory</key>
+++    <type>org.exoplatform.services.cache.impl.jboss.ExoCacheFactoryImpl</type>
+++    <init-params>
+++      <value-param>
+++        <name>cache.config.template</name>
+++        <value>classpath:/conf/jbosscache/cluster/config.xml</value>
+++      </value-param>
+++      <value-param profiles="cluster">
+++        <name>cache.config.template</name>
+++        <value>classpath:/conf/jbosscache/cluster/config.xml</value>
+++      </value-param>
+++    </init-params>
+++  </component>
+++  <component>
+++    <key>org.exoplatform.services.log.LogConfigurationInitializer</key>
+++    <type>org.exoplatform.services.log.LogConfigurationInitializer</type>
+++    <init-params>
+++      <value-param>
+++        <name>logger</name>
+++        <value>org.exoplatform.services.log.impl.BufferedLog4JLogger</value>
+++      </value-param>
+++      <value-param>
+++        <name>configurator</name>
+++        <value>org.exoplatform.services.log.impl.Log4JConfigurator</value>
+++      </value-param>
+++      <properties-param>
+++        <name>properties</name>
+++        <description>Log4J properties</description>
+++        <property name="log4j.rootLogger" value="INFO, stdout, file"/>
+++
+++        <property name="log4j.appender.stdout" value="org.apache.log4j.ConsoleAppender"/>
+++        <property name="log4j.appender.stdout.threshold" value="INFO"/>
+++
+++        <property name="log4j.appender.stdout.layout" value="org.apache.log4j.PatternLayout"/>
+++        <property name="log4j.appender.stdout.layout.ConversionPattern" value="%d{dd.MM.yyyy HH:mm:ss} *%-5p* [%t] %c{1}: %m (%F, line %L) %n"/>
+++
+++        <property name="log4j.appender.file" value="org.apache.log4j.FileAppender"/>
+++        <property name="log4j.appender.file.File" value="target/jcr.log"/>
+++
+++        <property name="log4j.appender.file.layout" value="org.apache.log4j.PatternLayout"/>
+++        <property name="log4j.appender.file.layout.ConversionPattern" value="%d{dd.MM.yyyy HH:mm:ss} *%-5p* [%t] %c{1}: %m (%F, line %L) %n"/>
+++
+++        <!-- property name="log4j.category.ext.BackupScheduler" value="DEBUG"/>
+++        <property name="log4j.category.ext.BackupManagerImpl" value="DEBUG"/ -->
+++
+++      </properties-param>
+++    </init-params>
+++  </component>
+++  
+++  <!-- component>
+++    <key>org.exoplatform.services.organization.auth.AuthenticationService</key>
+++    <type>org.exoplatform.services.organization.auth.impl.AuthenticationServiceImpl</type>
+++  </component-->
+++  
+++  <!-- REST -->
+++  
+++  <component>
+++    <type>org.exoplatform.services.jcr.ext.app.ThreadLocalSessionProviderService</type>
+++  </component>
++   
++   <component>
+++      <key>org.exoplatform.services.jcr.ext.distribution.DataDistributionManager</key>
+++      <type>org.exoplatform.services.jcr.ext.distribution.impl.DataDistributionManagerImpl</type>     
+++  </component>
+++  <component>
+++    <key>org.exoplatform.services.jcr.ext.hierarchy.NodeHierarchyCreator</key>
+++    <type>org.exoplatform.services.jcr.ext.hierarchy.impl.NodeHierarchyCreatorImpl</type>
+++  </component> 
+++  
+++
+++  <component>
+++    <type>org.exoplatform.services.jcr.ext.registry.RegistryService</type>
+++    <init-params>
+++      <properties-param>
+++      <name>locations</name>
+++      <property name="repository" value="collaboration"/>
+++      </properties-param>
+++    </init-params>
+++  </component>
+++
+++    <!-- component>
+++      <key>org.exoplatform.services.jcr.ext.audit.AuditService</key>
+++      <type>org.exoplatform.services.jcr.ext.audit.AuditServiceImpl</type>
+++    </component-->
+++
+++    <component>
++       <key>org.exoplatform.services.jcr.RepositoryService</key>
++       <type>org.exoplatform.services.jcr.impl.RepositoryServiceImpl</type>
++       <component-plugins>
++@@ -14,14 +152,53 @@
++             <values-param>
++               <name>autoCreatedInNewRepository</name>
++               <description>Node types configuration file</description>
++-              <value>jar:/conf/portal/book-nodetypes.xml</value>              
+++              <value>jar:/conf/portal/nodetypes.xml</value>              
++             </values-param>
++           </init-params>
++         </component-plugin>
++       </component-plugins>
++     </component>
+++    
+++    
+++  <component>
+++    <key>org.exoplatform.services.resources.LocaleConfigService</key>
+++    <type>org.exoplatform.services.resources.impl.LocaleConfigServiceImpl</type>
+++      <init-params>
+++        <value-param>
+++          <name>locale.config.file</name>
+++          <value>jar:/conf/portal/locales-config.xml</value>
+++        </value-param>
+++      </init-params>
+++  </component>
+++  
++   
++   <component>
+++      <key>org.exoplatform.services.resources.ResourceBundleService</key>
+++      <type>org.exoplatform.services.resources.impl.SimpleResourceBundleService</type>
+++        <init-params>
+++          <values-param>
+++            <name>classpath.resources</name>
+++            <description>The resources  that start with the following package name should be load from file system</description>
+++            <value>locale.portlet</value>
+++          </values-param>
+++
+++          <values-param>
+++            <name>init.resources</name>
+++            <description>Store the following resources into the db for  the first launch </description>
+++            <value>locale.test.resources.test</value>
+++          </values-param>
+++
+++          <values-param>
+++            <name>portal.resource.names</name>
+++            <description>The properties files of  the portal ,  those file will be merged
+++              into one ResourceBundle properties </description>
+++            <value>local.portal.portal</value>
+++            <value>local.portal.custom</value>
+++          </values-param>
+++        </init-params>
+++    </component>
+++  
+++    <component>
++       <key>org.exoplatform.services.jcr.config.RepositoryServiceConfiguration</key>
++       <type>org.exoplatform.services.jcr.impl.config.RepositoryServiceConfigurationImpl</type>
++       <init-params>
++@@ -32,6 +209,193 @@
++         </value-param>
++       </init-params>
++   </component>
+++  <component>
+++      <type>org.exoplatform.services.jcr.impl.ext.action.SessionActionCatalog</type>
+++      <component-plugins>
+++      <component-plugin>
+++      <name>Last Update Action</name>
+++      <set-method>addPlugin</set-method>
+++      <type>org.exoplatform.services.jcr.impl.ext.action.AddActionsPlugin</type>
+++      <description>add actions plugin</description>
+++      <init-params>
+++        <object-param>
+++          <name>actions</name>
+++          <object type="org.exoplatform.services.jcr.impl.ext.action.AddActionsPlugin$ActionsConfig">
+++            <field  name="actions">
+++              <collection type="java.util.ArrayList">                
+++                <value>
+++                  <object type="org.exoplatform.services.jcr.impl.ext.action.ActionConfiguration">
+++                    <field  name="eventTypes"><string>addNode,changeProperty</string></field>
+++                    <field  name="nodeTypes"><string>exo:calendarEvent</string></field>                     
+++                    <field  name="actionClassName"><string>org.exoplatform.calendar.service.test.LastUpdateAction</string></field>
+++                  </object>
+++                </value>
+++              </collection>
+++            </field>
+++          </object>
+++        </object-param>
+++      </init-params>
+++      </component-plugin>
+++      </component-plugins>
+++    </component>
+++<external-component-plugins>
+++    <target-component>org.exoplatform.services.jcr.ext.hierarchy.NodeHierarchyCreator</target-component>
+++    <component-plugin>
+++      <name>addPaths</name>
+++      <set-method>addPlugin</set-method>
+++      <type>org.exoplatform.services.jcr.ext.hierarchy.impl.AddPathPlugin</type>            
+++      <init-params>
+++        <object-param>
+++          <name>cms.configuration</name>
+++          <description>configuration for the cms path</description>
+++          <object type="org.exoplatform.services.jcr.ext.hierarchy.impl.HierarchyConfig">
+++            <field  name="repository"><string>repository</string></field>
+++            <field name="workspaces">
+++              <collection type="java.util.ArrayList">
+++                <value><string>collaboration</string></value>                               
+++              </collection>                
+++            </field>
+++            <field  name="jcrPaths">
+++              <collection type="java.util.ArrayList">
+++                <value>                
+++                   <object type="org.exoplatform.services.jcr.ext.hierarchy.impl.HierarchyConfig$JcrPath">                   
+++                     <field name="alias"><string>userApplicationData</string></field>
+++                    <field name="path"><string>ApplicationData</string></field>
+++                    <field name="nodeType"><string>nt:unstructured</string></field>
+++                    <field name="permissions">
+++                      <collection type="java.util.ArrayList">               
+++                        <value>                            
+++                          <object type="org.exoplatform.services.jcr.ext.hierarchy.impl.HierarchyConfig$Permission">             
+++                            <field name="identity"><string>*:/platform/administrators</string></field>
+++                            <field name="read"><string>true</string></field>                
+++                            <field name="addNode"><string>true</string></field>                
+++                            <field name="setProperty"><string>true</string></field>                
+++                            <field name="remove"><string>true</string></field>                
+++                          </object>  
+++                        </value>                        
+++                      </collection>
+++                    </field>                                            
+++                  </object>
+++                  </value>
+++                <value>                
+++                   <object type="org.exoplatform.services.jcr.ext.hierarchy.impl.HierarchyConfig$JcrPath">                   
+++                     <field  name="alias"><string>eXoApplications</string></field>
+++                    <field  name="path"><string>/exo:applications</string></field>                                          
+++                    <field name="permissions">
+++                      <collection type="java.util.ArrayList">               
+++                        <value>                            
+++                          <object type="org.exoplatform.services.jcr.ext.hierarchy.impl.HierarchyConfig$Permission">             
+++                              <field name="identity"><string>*:/platform/administrators</string></field>
+++                              <field name="read"><string>true</string></field>                
+++                              <field name="addNode"><string>true</string></field>                
+++                              <field name="setProperty"><string>true</string></field>                
+++                              <field name="remove"><string>true</string></field>                
+++                            </object>  
+++                        </value>                        
+++                      </collection>
+++                    </field>                        
+++                  </object>
+++                </value>
+++                 <value>                
+++                   <object type="org.exoplatform.services.jcr.ext.hierarchy.impl.HierarchyConfig$JcrPath">                   
+++                     <field  name="alias"><string>eXoServices</string></field>
+++                    <field  name="path"><string>/exo:services</string></field>                    
+++                    <field name="permissions">
+++                      <collection type="java.util.ArrayList">               
+++                        <value>                            
+++                          <object type="org.exoplatform.services.jcr.ext.hierarchy.impl.HierarchyConfig$Permission">             
+++                              <field name="identity"><string>*:/platform/administrators</string></field>
+++                              <field name="read"><string>true</string></field>                
+++                              <field name="addNode"><string>true</string></field>                
+++                              <field name="setProperty"><string>true</string></field>                
+++                              <field name="remove"><string>true</string></field>                
+++                            </object>  
+++                        </value>                        
+++                      </collection>
+++                    </field>                        
+++                  </object>
+++                </value>                
+++                <value>                
+++                  <object type="org.exoplatform.services.jcr.ext.hierarchy.impl.HierarchyConfig$JcrPath">                   
+++                    <field  name="alias"><string>usersPath</string></field>
+++                    <field  name="path"><string>/Users</string></field>
+++                    <field name="permissions">
+++                      <collection type="java.util.ArrayList">               
+++                        <value>                            
+++                          <object type="org.exoplatform.services.jcr.ext.hierarchy.impl.HierarchyConfig$Permission">             
+++                            <field name="identity"><string>*:/platform/administrators</string></field>
+++                            <field name="read"><string>true</string></field>                
+++                            <field name="addNode"><string>true</string></field>                
+++                            <field name="setProperty"><string>true</string></field>                
+++                            <field name="remove"><string>true</string></field>                
+++                          </object>  
+++                        </value>
+++                        <value>                            
+++                          <object type="org.exoplatform.services.jcr.ext.hierarchy.impl.HierarchyConfig$Permission">             
+++                            <field name="identity"><string>any</string></field>
+++                            <field name="read"><string>true</string></field>                
+++                            <field name="addNode"><string>false</string></field>                
+++                            <field name="setProperty"><string>true</string></field>                
+++                            <field name="remove"><string>false</string></field>                
+++                          </object>  
+++                        </value>
+++                      </collection>
+++                    </field>                        
+++                  </object>
+++                </value>
+++                <value>                
+++                  <object type="org.exoplatform.services.jcr.ext.hierarchy.impl.HierarchyConfig$JcrPath">                   
+++                    <field  name="alias"><string>groupsPath</string></field>
+++                    <field  name="path"><string>/Groups</string></field>
+++                    <field name="permissions">
+++                      <collection type="java.util.ArrayList">               
+++                        <value>                            
+++                          <object type="org.exoplatform.services.jcr.ext.hierarchy.impl.HierarchyConfig$Permission">             
+++                            <field name="identity"><string>*:/platform/administrators</string></field>
+++                            <field name="read"><string>true</string></field>                
+++                            <field name="addNode"><string>true</string></field>                
+++                            <field name="setProperty"><string>true</string></field>                
+++                            <field name="remove"><string>true</string></field>                
+++                          </object>  
+++                        </value>
+++                        <value>                            
+++                          <object type="org.exoplatform.services.jcr.ext.hierarchy.impl.HierarchyConfig$Permission">             
+++                            <field name="identity"><string>any</string></field>
+++                            <field name="read"><string>true</string></field>                
+++                            <field name="addNode"><string>false</string></field>                
+++                            <field name="setProperty"><string>true</string></field>                
+++                            <field name="remove"><string>false</string></field>                
+++                          </object>  
+++                        </value>
+++                      </collection>
+++                    </field>                        
+++                  </object>
+++                </value>                                                                        
+++              </collection>                                
+++            </field>
+++          </object>
+++        </object-param>
+++      </init-params>            
+++    </component-plugin>
+++  </external-component-plugins>
+++  <external-component-plugins>
+++    <target-component>org.exoplatform.services.database.HibernateService</target-component>
+++    <component-plugin> 
+++      <name>add.hibernate.mapping</name>
+++      <set-method>addPlugin</set-method>
+++      <type>org.exoplatform.services.database.impl.AddHibernateMappingPlugin</type>
+++      <init-params>
+++        <values-param>
+++          <name>hibernate.mapping</name>
+++          <value>org/exoplatform/services/organization/impl/UserImpl.hbm.xml</value>
+++          <value>org/exoplatform/services/organization/impl/MembershipImpl.hbm.xml</value>
+++          <value>org/exoplatform/services/organization/impl/GroupImpl.hbm.xml</value>
+++          <value>org/exoplatform/services/organization/impl/MembershipTypeImpl.hbm.xml</value>
+++          <value>org/exoplatform/services/organization/impl/UserProfileData.hbm.xml</value>
+++        </values-param>
+++      </init-params>
+++    </component-plugin>
+++  </external-component-plugins>
++   
++   <external-component-plugins>
++     <target-component>org.exoplatform.services.naming.InitialContextInitializer</target-component>
++@@ -63,4 +427,204 @@
++       </init-params>
++     </component-plugin>        
++   </external-component-plugins>
+++  
+++  <external-component-plugins>
+++    <target-component>org.exoplatform.services.listener.ListenerService</target-component>
+++    <component-plugin>
+++      <name>exo.service.authentication.login</name>
+++      <set-method>addListener</set-method>
+++      <type>org.exoplatform.services.organization.auth.MembershipListener</type>
+++    </component-plugin>
+++  </external-component-plugins>
+++  
+++      
+++  
+++  
+++  <external-component-plugins>
+++    <target-component>org.exoplatform.services.organization.OrganizationService</target-component>    
+++    <component-plugin>
+++      <name>ecm.new.group.event.listener</name>
+++      <set-method>addListenerPlugin</set-method>
+++      <type>org.exoplatform.services.jcr.ext.hierarchy.impl.NewGroupListener</type>
+++      <description>description</description>
+++      <init-params>
+++        <object-param>
+++          <name>configuration></name>
+++          <description>description</description>
+++          <object type="org.exoplatform.services.jcr.ext.hierarchy.impl.HierarchyConfig">
+++            <field  name="repository"><string>repository</string></field>
+++             <field name="workspaces">
+++               <collection type="java.util.ArrayList">
+++                <value><string>collaboration</string></value>                              
+++              </collection>                
+++            </field>            
+++            <field  name="jcrPaths">
+++               <collection type="java.util.ArrayList">
+++                <value>                
+++                   <object type="org.exoplatform.services.jcr.ext.hierarchy.impl.HierarchyConfig$JcrPath">                   
+++                     <field name="alias"><string>groupApplicationData</string></field>
+++                    <field name="path"><string>ApplicationData</string></field>
+++                    <field name="nodeType"><string>nt:unstructured</string></field>
+++                    <field name="permissions">
+++                      <collection type="java.util.ArrayList">               
+++                        <value>                            
+++                          <object type="org.exoplatform.services.jcr.ext.hierarchy.impl.HierarchyConfig$Permission">             
+++                            <field name="identity"><string>*:/platform/administrators</string></field>
+++                            <field name="read"><string>true</string></field>                
+++                            <field name="addNode"><string>true</string></field>                
+++                            <field name="setProperty"><string>true</string></field>                
+++                            <field name="remove"><string>true</string></field>                
+++                          </object>  
+++                        </value>                        
+++                      </collection>
+++                    </field>                                            
+++                  </object>
+++                </value>                                                            
+++               </collection>
+++            </field>            
+++          </object>
+++        </object-param>
+++      </init-params> 
+++    </component-plugin>
+++    <component-plugin>
+++      <name>ecm.new.user.event.listener</name>
+++      <set-method>addListenerPlugin</set-method>
+++      <type>org.exoplatform.services.jcr.ext.hierarchy.impl.NewUserListener</type>
+++      <description>description</description>
+++      <init-params>
+++        <object-param>
+++          <name>configuration</name>
+++          <description>description</description>
+++          <object type="org.exoplatform.services.jcr.ext.hierarchy.impl.HierarchyConfig">
+++            <field  name="repository"><string>repository</string></field>
+++             <field name="workspaces">
+++               <collection type="java.util.ArrayList">
+++                <value><string>collaboration</string></value>                              
+++              </collection>                
+++            </field>            
+++            <field  name="jcrPaths">
+++               <collection type="java.util.ArrayList">
+++                <value>                
+++                   <object type="org.exoplatform.services.jcr.ext.hierarchy.impl.HierarchyConfig$JcrPath">                   
+++                     <field name="alias"><string>userApplicationData</string></field>
+++                    <field name="path"><string>ApplicationData</string></field>
+++                    <field name="nodeType"><string>nt:unstructured</string></field>
+++                    <field name="permissions">
+++                      <collection type="java.util.ArrayList">               
+++                        <value>                            
+++                          <object type="org.exoplatform.services.jcr.ext.hierarchy.impl.HierarchyConfig$Permission">             
+++                            <field name="identity"><string>*:/platform/administrators</string></field>
+++                            <field name="read"><string>true</string></field>                
+++                            <field name="addNode"><string>true</string></field>                
+++                            <field name="setProperty"><string>true</string></field>                
+++                            <field name="remove"><string>true</string></field>                
+++                          </object>  
+++                        </value>                        
+++                      </collection>
+++                    </field>                                            
+++                  </object>
+++                </value>                
+++               </collection>
+++            </field>            
+++          </object>
+++        </object-param>
+++      </init-params>
+++    </component-plugin>
+++  </external-component-plugins>
+++
+++  <external-component-plugins>
+++    <target-component>org.exoplatform.services.organization.OrganizationService</target-component>    
+++    <component-plugin>
+++      <name>ecm.new.group.event.listener</name>
+++      <set-method>addListenerPlugin</set-method>
+++      <type>org.exoplatform.services.jcr.ext.hierarchy.impl.NewGroupListener</type>
+++      <description>description</description>
+++      <init-params>
+++        <object-param>
+++          <name>configuration></name>
+++          <description>description</description>
+++          <object type="org.exoplatform.services.jcr.ext.hierarchy.impl.HierarchyConfig">
+++            <field  name="repository"><string>repository</string></field>
+++             <field name="workspaces">
+++               <collection type="java.util.ArrayList">
+++                <value><string>collaboration</string></value>                              
+++              </collection>                
+++            </field>            
+++            <field  name="jcrPaths">
+++               <collection type="java.util.ArrayList">
+++                <value>                
+++                   <object type="org.exoplatform.services.jcr.ext.hierarchy.impl.HierarchyConfig$JcrPath">                   
+++                     <field name="alias"><string>groupApplicationData</string></field>
+++                    <field name="path"><string>ApplicationData</string></field>
+++                    <field name="nodeType"><string>nt:unstructured</string></field>
+++                    <field name="permissions">
+++                      <collection type="java.util.ArrayList">               
+++                        <value>                            
+++                          <object type="org.exoplatform.services.jcr.ext.hierarchy.impl.HierarchyConfig$Permission">             
+++                            <field name="identity"><string>*:/platform/administrators</string></field>
+++                            <field name="read"><string>true</string></field>                
+++                            <field name="addNode"><string>true</string></field>                
+++                            <field name="setProperty"><string>true</string></field>                
+++                            <field name="remove"><string>true</string></field>                
+++                          </object>  
+++                        </value>                        
+++                      </collection>
+++                    </field>                                            
+++                  </object>
+++                </value>                                                            
+++               </collection>
+++            </field>            
+++          </object>
+++        </object-param>
+++      </init-params> 
+++    </component-plugin>
+++    <component-plugin>
+++      <name>ecm.new.user.event.listener</name>
+++      <set-method>addListenerPlugin</set-method>
+++      <type>org.exoplatform.services.jcr.ext.hierarchy.impl.NewUserListener</type>
+++      <description>description</description>
+++      <init-params>
+++        <object-param>
+++          <name>configuration</name>
+++          <description>description</description>
+++          <object type="org.exoplatform.services.jcr.ext.hierarchy.impl.HierarchyConfig">
+++            <field  name="repository"><string>repository</string></field>
+++             <field name="workspaces">
+++               <collection type="java.util.ArrayList">
+++                <value><string>collaboration</string></value>                              
+++              </collection>                
+++            </field>            
+++            <field  name="jcrPaths">
+++               <collection type="java.util.ArrayList">
+++                <value>                
+++                   <object type="org.exoplatform.services.jcr.ext.hierarchy.impl.HierarchyConfig$JcrPath">                   
+++                     <field name="alias"><string>userApplicationData</string></field>
+++                    <field name="path"><string>ApplicationData</string></field>
+++                    <field name="nodeType"><string>nt:unstructured</string></field>
+++                    <field name="permissions">
+++                      <collection type="java.util.ArrayList">               
+++                        <value>                            
+++                          <object type="org.exoplatform.services.jcr.ext.hierarchy.impl.HierarchyConfig$Permission">             
+++                            <field name="identity"><string>*:/platform/administrators</string></field>
+++                            <field name="read"><string>true</string></field>                
+++                            <field name="addNode"><string>true</string></field>                
+++                            <field name="setProperty"><string>true</string></field>                
+++                            <field name="remove"><string>true</string></field>                
+++                          </object>  
+++                        </value>                        
+++                      </collection>
+++                    </field>                                            
+++                  </object>
+++                </value>                
+++               </collection>
+++            </field>            
+++          </object>
+++        </object-param>
+++      </init-params>
+++    </component-plugin>     
+++  </external-component-plugins>
+++  
+++  
+++    <remove-configuration>org.exoplatform.services.deployment.ContentInitializerService</remove-configuration> 
+++    <remove-configuration>org.exoplatform.services.transaction.ExoTransactionService</remove-configuration> 
++ </configuration>
++\ No newline at end of file
+diff --git a/pom.xml b/pom.xml
+index aafce74..65d0e39 100644
+--- a/pom.xml
++++ b/pom.xml
+@@ -11,84 +11,7 @@
+   <url>http://maven.apache.org</url>
+ 
+   <properties>
+-   <org.exoplatform.kernel.version>2.3.8-GA-SNAPSHOT</org.exoplatform.kernel.version>
+-    <org.exoplatform.core.version>2.4.8-GA-SNAPSHOT</org.exoplatform.core.version>
+-    <org.exoplatform.ws.version>2.2.8-GA-SNAPSHOT</org.exoplatform.ws.version>
+-    <org.exoplatform.jcr.version>1.14.8-GA-SNAPSHOT</org.exoplatform.jcr.version>
+-    <org.exoplatform.portal.version>3.2.5-PLF-SNAPSHOT</org.exoplatform.portal.version>
+-     
+-    <exo.tool.framework.junit.version>1.2.0</exo.tool.framework.junit.version>
+-    <org.exoplatform.exopackage.version>1.1.4</org.exoplatform.exopackage.version>
+-     
+-     <!--commons dependencies-->
+-     
+-    <org.hsqldb.version>2.0.0</org.hsqldb.version>
+-     <!-- eXo extended service -->
+-     
+-    <org.aspectj.version>1.6.10</org.aspectj.version>
+-    <ehcache.version>1.6.0</ehcache.version>
+-    <juel.version>2.1.2</juel.version>
+-    <commons-lang.version>2.6</commons-lang.version>
+-    <commons-chain.version>1.2</commons-chain.version>
+-    <commons-logging.version>1.1.1</commons-logging.version>
+-    <commons-httpclient.version>3.1</commons-httpclient.version>
+-    <org.apache.httpcomponents.httpclient.version>4.0</org.apache.httpcomponents.httpclient.version>
+-    <com.google.guava.version>r07</com.google.guava.version>
+-    <javax.servlet.servlet-api.version>2.5</javax.servlet.servlet-api.version>
+-    <javax.portlet.portlet-api.version>2.0</javax.portlet.portlet-api.version>
+-    <javax.mail.mail.version>1.4.4</javax.mail.mail.version>
+-    <javax.xml.bind.jaxb-api.version>2.1</javax.xml.bind.jaxb-api.version>
+-    <javax.xml.stream.stax-api.version>1.0-2</javax.xml.stream.stax-api.version>
+-    <javax.ws.rs.jsr311-api.version>1.0</javax.ws.rs.jsr311-api.version>
+-    <javax.jcr.api.version>1.0</javax.jcr.api.version>
+-    <javax.resource.connector-api.version>1.5</javax.resource.connector-api.version>
+-    <org.jibx.jibx-run.version>1.2.2</org.jibx.jibx-run.version>
+-    <javax.activation.activation.version>1.1.1</javax.activation.activation.version>
+-    <org.log4j.version>1.2.14</org.log4j.version>
+-    <org.jvnet.mock-javamail.version>1.9</org.jvnet.mock-javamail.version>
+-    <xml-apis.version>1.0.b2</xml-apis.version>
+-    <pull-parser.version>2</pull-parser.version>
+-    <quartz.version>1.5.2</quartz.version>
+-    <rome.version>1.0</rome.version>
+-    <picocontainer.version>1.1</picocontainer.version>
+-    <commons-io.version>1.4</commons-io.version>
+-    <junit.version>3.8.2</junit.version>
+-    <xpp3.version>1.1.4c</xpp3.version>
+-    <mockito.version>1.8.1</mockito.version>
+-    <net.sf.jtidy.version>r938</net.sf.jtidy.version>
+-      
+-    
+-    <!--need when deploy CS-->
+-    <org.slf4j.version>1.5.8</org.slf4j.version>
+-    <c3p0.version>0.9.1.2</c3p0.version>
+-    <net.oauth.version>20080621</net.oauth.version>
+-    <cglib.version>2.2</cglib.version>
+-    <commons-dbcp.version>1.2.2</commons-dbcp.version>
+-    <org.exoplatform.tool.version>1.0.0</org.exoplatform.tool.version>
+-    <org.javassist.version>3.14.0-GA</org.javassist.version>
+-    <html-parser.version>1.6</html-parser.version>
+-    <com.sun.xml.bind.version>2.1.7</com.sun.xml.bind.version>
+-    <org.jvnet.jaxb2.maven2.version>0.7.4</org.jvnet.jaxb2.maven2.version>
+-    <commons-pool.version>1.5.5</commons-pool.version>
+-    <asm.version>1.5.3</asm.version>
+-    <antlr.version>2.7.6rc1</antlr.version>
+-    <jcr.version>1.0</jcr.version>
+-    <stax.version>1.0</stax.version>
+-    <xml-apis.version>1.3.04</xml-apis.version>
+-    <org.jsecurity.version>0.9.0</org.jsecurity.version>
+-    <org.gatein.pc.version>2.3.0-GA</org.gatein.pc.version>
+-    <org.gatein.shindig.version>2.0.2</org.gatein.shindig.version>
+-    <org.gatein.wci.version>2.1.0-GA</org.gatein.wci.version>
+-    <org.gatein.wsrp.version>2.1.0-GA</org.gatein.wsrp.version>
+-    <org.reflext.version>1.1.0</org.reflext.version>
+-    <xerces.version>2.9.1</xerces.version>
+-    <commons-collections.version>3.2.1</commons-collections.version>
+-    <javax.activation.version>1.1</javax.activation.version>
+-    <org.jboss.version>2.2.9.GA</org.jboss.version>
+-    <org.jbossxb.version>2.0.1.GA</org.jbossxb.version>
+-    <org.staxnav.version>0.9.6</org.staxnav.version>
+-    <nekohtml.version>1.9.14</nekohtml.version>
+-    <caja.version>r1</caja.version>
++    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
+   </properties>
+ 
+   <build>
+@@ -115,126 +38,38 @@
+   </build>
+   <dependencies>
+     <dependency>
+-      <groupId>org.exoplatform.kernel</groupId>
+-      <artifactId>exo.kernel.component.common</artifactId>
+-      <version>${org.exoplatform.kernel.version}</version>
+-       <scope>provided</scope>
+-    </dependency>
+-    <dependency>
+-      <groupId>org.exoplatform.kernel</groupId>
+-      <artifactId>exo.kernel.commons</artifactId>
+-      <version>${org.exoplatform.kernel.version}</version>
+-      <scope>provided</scope>
+-    </dependency>
+-    <dependency>
+-      <groupId>org.exoplatform.kernel</groupId>
+-      <artifactId>exo.kernel.container</artifactId>
+-      <version>${org.exoplatform.kernel.version}</version>
+-      <scope>provided</scope>
+-    </dependency>
+-    <dependency>
+-      <groupId>org.exoplatform.core</groupId>
+-      <artifactId>exo.core.component.organization.api</artifactId>
+-      <version>${org.exoplatform.core.version}</version>
+-      <scope>provided</scope>
+-    </dependency>
+-    <dependency>
+-      <groupId>org.exoplatform.portal</groupId>
+-      <artifactId>exo.portal.component.test.core</artifactId>
+-      <version>${org.exoplatform.portal.version}</version>
+-      <scope>test</scope>
+-    </dependency>
+-    <dependency>
+-      <groupId>org.exoplatform.portal</groupId>
+-      <artifactId>exo.portal.component.test.jcr</artifactId>
+-      <version>${org.exoplatform.portal.version}</version>
+-      <scope>test</scope>
+-    </dependency>
+-    <dependency>
+-      <groupId>org.exoplatform.portal</groupId>
+-      <artifactId>exo.portal.component.identity</artifactId>
+-      <version>${org.exoplatform.portal.version}</version>
+-      <type>test-jar</type>
+-      <scope>test</scope>
+-    </dependency>
+-    <dependency>
+-      <groupId>org.exoplatform.portal</groupId>
+-      <artifactId>exo.portal.component.portal</artifactId>
+-      <version>${org.exoplatform.portal.version}</version>
+-      <scope>provided</scope>
+-    </dependency>
+-     
+-    <dependency>
+-      <groupId>org.exoplatform.jcr</groupId>
+-      <artifactId>exo.jcr.component.core</artifactId>
+-      <version>${org.exoplatform.jcr.version}</version>
+-      <scope>provided</scope>
++      <groupId>org.hsqldb</groupId>
++      <artifactId>hsqldb</artifactId>
++      <version>2.0.0</version>
+     </dependency>
+     <dependency>
+       <groupId>org.exoplatform.jcr</groupId>
+       <artifactId>exo.jcr.component.ext</artifactId>
+-      <version>${org.exoplatform.jcr.version}</version>
++      <version>1.14.0-CR2</version>
+       <scope>provided</scope>
+     </dependency>
+     <dependency>
+-      <groupId>org.exoplatform.ws</groupId>
+-      <artifactId>exo.ws.frameworks.json</artifactId>
+-      <version>${org.exoplatform.ws.version}</version>
+-      <scope>provided</scope>
+-    </dependency>
+-    <dependency>
+-      <groupId>javax.jcr</groupId>
+-      <artifactId>jcr</artifactId>
+-      <version>${javax.jcr.api.version}</version>
+-      <scope>provided</scope>
+-    </dependency>
+-    <dependency>
+-      <groupId>commons-io</groupId>
+-      <artifactId>commons-io</artifactId>
+-      <version>${commons-io.version}</version>
+-      <scope>provided</scope>
+-    </dependency>
+-    <dependency>
+-      <groupId>commons-logging</groupId>
+-      <artifactId>commons-logging</artifactId>
+-      <version>${commons-logging.version}</version>
+-      <scope>provided</scope>
+-    </dependency>
+-    <dependency>
+-      <groupId>javax.mail</groupId>
+-      <artifactId>mail</artifactId>
+-      <version>${javax.mail.mail.version}</version>
+-      <scope>provided</scope>
+-    </dependency>
+-    
+-  <dependency>
+-      <groupId>org.exoplatform.core</groupId>
+-      <artifactId>exo.core.component.security.core</artifactId>
+-      <version>${org.exoplatform.core.version}</version>
+-      <scope>provided</scope>
++      <groupId>junit</groupId>
++      <artifactId>junit</artifactId>
++      <version>3.8.1</version>
++      <scope>test</scope>
+     </dependency>
+     <dependency>
+-      <groupId>org.exoplatform.portal</groupId>
+-      <artifactId>exo.portal.component.common</artifactId>
+-      <version>${org.exoplatform.portal.version}</version>
++      <groupId>org.exoplatform.kernel</groupId>
++      <artifactId>exo.kernel.component.cache</artifactId>
++      <version>2.3.0-CR2</version>
+       <scope>provided</scope>
+     </dependency>
+     <dependency>
+       <groupId>org.slf4j</groupId>
+-      <artifactId>slf4j-simple</artifactId>
+-      <version>${org.slf4j.version}</version>
+-      <scope>provided</scope>
+-    </dependency>    
+-    <dependency>
+-      <groupId>commons-lang</groupId>
+-      <artifactId>commons-lang</artifactId>
+-      <version>${commons-lang.version}</version>
+-      <scope>provided</scope>
++      <artifactId>slf4j-log4j12</artifactId>
++      <version>1.5.8</version>
++      <scope>test</scope>
+     </dependency>
+     <dependency>
+-      <groupId>org.exoplatform.portal</groupId>
+-      <artifactId>exo.portal.component.test.core</artifactId>
+-      <version>${org.exoplatform.portal.version}</version>
++      <groupId>org.exoplatform.ws</groupId>
++      <artifactId>exo.ws.rest.core</artifactId>
++      <version>2.2.0-CR2</version>
+       <scope>provided</scope>
+     </dependency>
+   </dependencies>
+diff --git a/src/main/java/exoplatform/BookStoreService.java b/src/main/java/exoplatform/BookStoreService.java
+index b8aac51..d4b35b2 100644
+--- a/src/main/java/exoplatform/BookStoreService.java
++++ b/src/main/java/exoplatform/BookStoreService.java
+@@ -16,16 +16,74 @@
+  */
+ package exoplatform;
+ 
++import javax.jcr.Node;
++
+ import exoplatform.entity.User;
++import exoplatform.entity.Book.CATEGORY;
++import exoplatform.exception.DuplicateBookException;
+ 
+ /**
+  * Created by The eXo Platform SAS
+  * Author : BinhNV
+  *          binhnv@exoplatform.com
+- * Jul 18, 2012  
++ * Jul 19, 2012  
+  */
+ public interface BookStoreService {
+ 
++  /**
++   * create new database
++   */
++  public void createDB();
++  
++  /**
++   * get user by name with sql statement
++   * 
++   * @param username
++   * @return
++   */
+   public User getUserByNameSQL(String username);
+   
++  /**
++   * get user by name with xpath statement
++   * 
++   * @param username
++   * @return
++   */
++  public User getUserByNameXPath(String username);
++  
++  /**
++   * get user by name in range with sql statement
++   * 
++   * @param username
++   * @return
++   */
++  public User getUserByNameLimtSQL(String username);
++  
++  /**
++   * get user by name in range with xpath statement
++   * 
++   * @param username
++   * @return
++   */
++  public User getUserByNameLimtXPath(String username);
++  
++  /**
++   * get user by book name with sql statement
++   * 
++   * @param bookName
++   * @return
++   */
++  public User getUserByBookQuery(String bookName);
++  
++  /**
++   * add new book to datastorage
++   * 
++   * @param bookName
++   * @param category
++   * @param content
++   * @return
++   * @throws DuplicateBookException
++   */
++  public Node addBook(String bookName, CATEGORY category, String content, String nodePath) throws DuplicateBookException;
++  
+ }
+diff --git a/src/main/java/exoplatform/BookStoreServiceImpl.java b/src/main/java/exoplatform/BookStoreServiceImpl.java
+index 7b5faac..3a7362c 100644
+--- a/src/main/java/exoplatform/BookStoreServiceImpl.java
++++ b/src/main/java/exoplatform/BookStoreServiceImpl.java
+@@ -26,6 +26,7 @@ import javax.jcr.RepositoryException;
+ import org.exoplatform.services.cache.CacheService;
+ import org.exoplatform.services.cache.ExoCache;
+ import org.exoplatform.services.jcr.RepositoryService;
++import org.picocontainer.Startable;
+ 
+ import exoplatform.entity.Author;
+ import exoplatform.entity.Book;
+@@ -39,7 +40,7 @@ import exoplatform.exception.DuplicateBookException;
+  *          binhnv@exoplatform.com
+  * Jul 6, 2012  
+  */
+-public class BookStoreServiceImpl implements BookStoreService {
++public class BookStoreServiceImpl implements Startable, BookStoreService {
+ 
+   /* Define a exo cache */
+   private ExoCache<Serializable, Book> cache;
+@@ -79,7 +80,7 @@ public class BookStoreServiceImpl implements BookStoreService {
+   /**
+    * create new database
+    */
+-  private void createDB() {
++  public void createDB() {
+     try {
+       Node authorNode1 = addAuthor("Conan Doyle", "England", "123456789");
+       Node authorNode2 = addAuthor("JK Rowling", "England", "987654321");
+diff --git a/src/test/java/exoplatform/BaseBookstoreTestCase.java b/src/test/java/exoplatform/BaseBookstoreTestCase.java
+deleted file mode 100644
+index d46be09..0000000
+--- a/src/test/java/exoplatform/BaseBookstoreTestCase.java
++++ /dev/null
+@@ -1,142 +0,0 @@
+-/*
+- * Copyright (C) 2003-2008 eXo Platform SAS.
+- *
+- * This program is free software; you can redistribute it and/or
+- * modify it under the terms of the GNU Affero General Public License
+- * as published by the Free Software Foundation; either version 3
+- * of the License, or (at your option) any later version.
+- *
+- * This program is distributed in the hope that it will be useful,
+- * but WITHOUT ANY WARRANTY; without even the implied warranty of
+- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+- * GNU General Public License for more details.
+- *
+- * You should have received a copy of the GNU General Public License
+- * along with this program; if not, see<http://www.gnu.org/licenses/>.
+- */
+-package exoplatform;
+-
+-import java.util.List;
+-
+-import javax.jcr.Node;
+-import javax.jcr.Session;
+-
+-import org.exoplatform.container.StandaloneContainer;
+-import org.exoplatform.services.jcr.RepositoryService;
+-import org.exoplatform.services.jcr.ext.app.SessionProviderService;
+-import org.exoplatform.services.jcr.ext.common.SessionProvider;
+-import org.exoplatform.services.log.ExoLogger;
+-import org.exoplatform.services.log.Log;
+-import org.exoplatform.services.security.ConversationState;
+-import org.exoplatform.services.security.Identity;
+-import org.exoplatform.test.BasicTestCase;
+-
+-/**
+- * Created by The eXo Platform SAS
+- * @author : Hung nguyen
+- *          hung.nguyen@exoplatform.com
+- * May 7, 2008  
+- */
+-public abstract class BaseBookstoreTestCase extends BasicTestCase {
+-
+-  protected static Log                  log                    = ExoLogger.getLogger("exoplatform.bookstore.test");
+-
+-  protected static RepositoryService    repositoryService;
+-
+-  protected static StandaloneContainer  container;
+-
+-  protected final static String         REPO_NAME              = "repository".intern();
+-
+-  protected final static String         BOOKSTORE_WS              = "bookstore".intern();
+-
+-  protected static Node                 root_                  = null;
+-
+-  protected SessionProvider             sessionProvider;
+-
+-  private static SessionProviderService sessionProviderService = null;
+-
+-  public static void init() {
+-    // we do this in static to save a few cycles
+-    initContainer();
+-    initJCR();
+-  }
+-
+-  public BaseBookstoreTestCase() throws Exception {
+-    init();
+-  }
+-
+-  public void setUp() throws Exception {
+-    startSystemSession();
+-  }
+-
+-  public void tearDown() throws Exception {
+-  }
+-
+-  protected void startSystemSession() {
+-    sessionProvider = sessionProviderService.getSystemSessionProvider(null);
+-  }
+-
+-  protected void startSessionAs(String user) {
+-    Identity identity = new Identity(user);
+-    ConversationState state = new ConversationState(identity);
+-    sessionProviderService.setSessionProvider(null, new SessionProvider(state));
+-    sessionProvider = sessionProviderService.getSessionProvider(null);
+-  }
+-
+-  protected void endSession() {
+-    sessionProviderService.removeSessionProvider(null);
+-    startSystemSession();
+-  }
+-
+-  /**
+-   * All elements of a list should be contained in the expected array of String
+-   * @param message
+-   * @param expected
+-   * @param actual
+-   */
+-  public static void assertContainsAll(String message, List<String> expected, List<String> actual) {
+-    assertEquals(message, expected.size(), actual.size());
+-    assertTrue(message, expected.containsAll(actual));
+-  }
+-
+-  /**
+-   * Assertion method on string arrays
+-   * @param message
+-   * @param expected
+-   * @param actual
+-   */
+-  public static void assertEquals(String message, String[] expected, String[] actual) {
+-    assertEquals(message, expected.length, actual.length);
+-    for (int i = 0; i < expected.length; i++) {
+-      assertEquals(message, expected[i], actual[i]);
+-    }
+-  }
+-
+-  private static void initContainer() {
+-    try {
+-      String containerConf = BaseBookstoreTestCase.class.getResource("/conf/portal/configuration.xml").toString();
+-      StandaloneContainer.addConfigurationURL(containerConf);
+-      container = StandaloneContainer.getInstance();
+-      String loginConf = Thread.currentThread().getContextClassLoader().getResource("conf/portal/login.conf").toString();
+-
+-      if (System.getProperty("java.security.auth.login.config") == null)
+-        System.setProperty("java.security.auth.login.config", loginConf);
+-    } catch (Exception e) {
+-      throw new RuntimeException("Failed to initialize standalone container: " + e.getMessage(), e);
+-    }
+-  }
+-
+-  private static void initJCR() {
+-    try {
+-      repositoryService = (RepositoryService) container.getComponentInstanceOfType(RepositoryService.class);
+-
+-      // Initialize datas
+-      Session session = repositoryService.getRepository(REPO_NAME).getSystemSession(BOOKSTORE_WS);
+-      root_ = session.getRootNode();
+-      sessionProviderService = (SessionProviderService) container.getComponentInstanceOfType(SessionProviderService.class);
+-    } catch (Exception e) {
+-      throw new RuntimeException("Failed to initialize JCR: " + e.getMessage(), e);
+-    }
+-  }
+-
+-}
+diff --git a/src/test/java/exoplatform/BookStoreTest.java b/src/test/java/exoplatform/BookStoreTest.java
+index fb3b0a1..f56a4c3 100644
+--- a/src/test/java/exoplatform/BookStoreTest.java
++++ b/src/test/java/exoplatform/BookStoreTest.java
+@@ -16,7 +16,9 @@
+  */
+ package exoplatform;
+ 
+-import org.exoplatform.services.organization.OrganizationService;
++import junit.framework.TestCase;
++
++import org.exoplatform.container.StandaloneContainer;
+ 
+ import exoplatform.entity.User;
+ 
+@@ -26,32 +28,88 @@ import exoplatform.entity.User;
+  *          binhnv@exoplatform.com
+  * Jul 17, 2012  
+  */
+-public class BookStoreTest extends BaseBookstoreTestCase {
+-
++public class BookStoreTest extends TestCase {
++  
+   private static BookStoreService service;
+-  private static JCRDataStorage storage;
+-  private OrganizationService organizationService;
++  private static StandaloneContainer container;
++  
++  static {
++    initContainer();
++  }
+   
+   public BookStoreTest() throws Exception {
+     super();
+-    service = (BookStoreService) container.getComponentInstanceOfType(BookStoreService.class);
+-    storage = new JCRDataStorage(repositoryService);
+-    organizationService = (OrganizationService) container.getComponentAdapterOfType(OrganizationService.class);
+   }
+   
+-  /* (non-Javadoc)
+-   * @see junit.framework.TestCase#setUp()
+-   */
+-  @Override
+-  public void setUp() throws Exception {
+-    super.setUp();
++  private static void initContainer() {
++    try {
++      String configFile = BookStoreTest.class.getResource("/conf/portal/test-configuration.xml").toString();
++      StandaloneContainer.addConfigurationURL(configFile);
++      container = StandaloneContainer.getInstance();
++      service = (BookStoreService) container.getComponentInstanceOfType(BookStoreService.class);
++    } catch (Exception e) {
++      throw new RuntimeException("fail to initialize container: " + e.getMessage(), e);
++    }
+   }
+   
+-  public void testUserByNameSQL() {
+-    String name = "BinhNV";
++  @Override
++  protected void setUp() throws Exception {
+     
++  }
++  
++  /**
++   * create new database
++   */
++  public void testCreateDB() {
++    service.createDB();
++  }
++  
++  /**
++   * get user by name with sql statement
++   * 
++   * @param username
++   * @return
++   */
++  public void testGetUserByNameSQL() {
++    String name = "binhnv";
+     User user = service.getUserByNameSQL(name);
+     assertNotNull(user);
+   }
+   
++  /**
++   * get user by name with xpath statement
++   * 
++   * @param username
++   * @return
++   */
++  public void testGetUserByNameXPath() {
++    String name = "binhnv";
++    User user = service.getUserByNameXPath(name);
++    assertNotNull(user);
++  }
++  
++  /**
++   * get user by name in range with sql statement
++   * 
++   * @param username
++   * @return
++   */
++  public void testGetUserByNameLimtSQL() {
++    String name = "binhnv";
++    User user = service.getUserByNameLimtSQL(name);
++    assertNotNull(user);
++  }
++  
++  /**
++   * get user by name in range with xpath statement
++   * 
++   * @param username
++   * @return
++   */
++  public void testGetUserByNameLimtXPath() {
++    String name = "binhnv";
++    User user = service.getUserByNameLimtXPath(name);
++    assertNotNull(user);
++  }
++  
+ }
+diff --git a/src/test/resources/conf/portal/configuration.properties b/src/test/resources/conf/portal/configuration.properties
+deleted file mode 100644
+index 1f902e4..0000000
+--- a/src/test/resources/conf/portal/configuration.properties
++++ /dev/null
+@@ -1,70 +0,0 @@
+-#
+-# Copyright (C) 2009 eXo Platform SAS.
+-#
+-# This is free software; you can redistribute it and/or modify it
+-# under the terms of the GNU Lesser General Public License as
+-# published by the Free Software Foundation; either version 2.1 of
+-# the License, or (at your option) any later version.
+-#
+-# This software is distributed in the hope that it will be useful,
+-# but WITHOUT ANY WARRANTY; without even the implied warranty of
+-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+-# Lesser General Public License for more details.
+-#
+-# You should have received a copy of the GNU Lesser General Public
+-# License along with this software; if not, write to the Free
+-# Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
+-# 02110-1301 USA, or see the FSF site: http://www.fsf.org.
+-#
+-
+-# Data
+-gatein.data.dir=target/gatein/data
+-
+-# DB
+-gatein.db.data.dir=${gatein.data.dir}/db
+-
+-# JCR
+-gatein.jcr.config.type=local
+-gatein.jcr.datasource.name=jdbcjcr
+-gatein.jcr.datasource.dialect=auto
+-gatein.jcr.datasource.driver=org.hsqldb.jdbcDriver
+-gatein.jcr.datasource.url=jdbc:hsqldb:file:${gatein.db.data.dir}/data/jdbcjcr_${name}
+-gatein.jcr.datasource.username=sa
+-gatein.jcr.datasource.password=
+-
+-gatein.jcr.data.dir=${gatein.data.dir}/jcr
+-gatein.jcr.storage.data.dir=${gatein.jcr.data.dir}/values
+-gatein.jcr.cache.config=classpath:/conf/jcr/jbosscache/${gatein.jcr.config.type}/cache-config.xml
+-gatein.jcr.cache.expiration.time=15m
+-gatein.jcr.lock.cache.config=classpath:/conf/jcr/jbosscache/${gatein.jcr.config.type}/lock-config.xml
+-gatein.jcr.index.data.dir=${gatein.jcr.data.dir}/lucene
+-gatein.jcr.index.changefilterclass=org.exoplatform.services.jcr.impl.core.query.DefaultChangesFilter
+-gatein.jcr.index.cache.config=classpath:/conf/jcr/jbosscache/${gatein.jcr.config.type}/indexer-config.xml
+-gatein.jcr.jgroups.config=classpath:/conf/jcr/jbosscache/cluster/jgroups-udp.xml
+-gatein.jcr.repository.default=repository
+-gatein.jcr.workspace.default=collaboration
+-gatein.jcr.workspace.system=system
+-
+-# IDM
+-gatein.idm.datasource.name=jdbcidm
+-gatein.idm.datasource.driver=org.hsqldb.jdbcDriver
+-gatein.idm.datasource.url=jdbc:hsqldb:file:${gatein.db.data.dir}/data/jdbcidm_${name}
+-gatein.idm.datasource.username=sa
+-gatein.idm.datasource.password=
+-
+-# Arjuna configuration
+-com.arjuna.ats.arjuna.objectstore.objectStoreDir=${gatein.data.dir}/jta
+-
+-# EMail
+-gatein.email.smtp.username=
+-gatein.email.smtp.password=
+-gatein.email.smtp.host=smtp.gmail.com
+-gatein.email.smtp.port=465
+-gatein.email.smtp.starttls.enable=true
+-gatein.email.smtp.auth=true
+-gatein.email.smtp.socketFactory.port=465
+-gatein.email.smtp.socketFactory.class=javax.net.ssl.SSLSocketFactory
+-
+-# Debug environment variables
+-mail.debug=false
+-smack.debugEnabled=false
+\ No newline at end of file
+diff --git a/src/test/resources/conf/portal/configuration.xml b/src/test/resources/conf/portal/configuration.xml
+deleted file mode 100644
+index ee99d2d..0000000
+--- a/src/test/resources/conf/portal/configuration.xml
++++ /dev/null
+@@ -1,28 +0,0 @@
+-<?xml version="1.0" encoding="ISO-8859-1"?>
+-<!--
+-
+-    Copyright (C) 2009 eXo Platform SAS.
+-
+-    This is free software; you can redistribute it and/or modify it
+-    under the terms of the GNU Lesser General Public License as
+-    published by the Free Software Foundation; either version 2.1 of
+-    the License, or (at your option) any later version.
+-
+-    This software is distributed in the hope that it will be useful,
+-    but WITHOUT ANY WARRANTY; without even the implied warranty of
+-    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+-    Lesser General Public License for more details.
+-
+-    You should have received a copy of the GNU Lesser General Public
+-    License along with this software; if not, write to the Free
+-    Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
+-    02110-1301 USA, or see the FSF site: http://www.fsf.org.
+-
+--->
+-<configuration
+-   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+-   xsi:schemaLocation="http://www.exoplaform.org/xml/ns/kernel_1_0.xsd http://www.exoplaform.org/xml/ns/kernel_1_0.xsd"
+-   xmlns="http://www.exoplaform.org/xml/ns/kernel_1_0.xsd">
+-  <import>jar:/conf/portal/organization-configuration.xml</import>
+-  <import>jar:/conf/portal/test-configuration.xml</import>
+-</configuration>
+\ No newline at end of file
+diff --git a/src/test/resources/conf/portal/exo.portal.component.test.jcr-jbosscache-config.xml b/src/test/resources/conf/portal/exo.portal.component.test.jcr-jbosscache-config.xml
+new file mode 100644
+index 0000000..6e515ad
+--- /dev/null
++++ b/src/test/resources/conf/portal/exo.portal.component.test.jcr-jbosscache-config.xml
+@@ -0,0 +1,37 @@
++<!--
++  ~ Copyright (C) 2009 eXo Platform SAS.
++  ~
++  ~ This is free software; you can redistribute it and/or modify it
++  ~ under the terms of the GNU Lesser General Public License as
++  ~ published by the Free Software Foundation; either version 2.1 of
++  ~ the License, or (at your option) any later version.
++  ~
++  ~ This software is distributed in the hope that it will be useful,
++  ~ but WITHOUT ANY WARRANTY; without even the implied warranty of
++  ~ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
++  ~ Lesser General Public License for more details.
++  ~
++  ~ You should have received a copy of the GNU Lesser General Public
++  ~ License along with this software; if not, write to the Free
++  ~ Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
++  ~ 02110-1301 USA, or see the FSF site: http://www.fsf.org.
++  -->
++<jbosscache xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="urn:jboss:jbosscache-core:config:3.1">
++
++   <locking useLockStriping="false" concurrencyLevel="50000" lockParentForChildInsertRemove="false" lockAcquisitionTimeout="20000"/>
++
++   <!-- Configure the TransactionManager -->
++   <transaction transactionManagerLookupClass="org.jboss.cache.transaction.JBossStandaloneJTAManagerLookup" />
++
++   <!-- Enable batching -->
++   <invocationBatching enabled="true" />
++
++   <!-- Eviction configuration -->
++   <eviction wakeUpInterval="5000">
++      <default algorithmClass="org.jboss.cache.eviction.FIFOAlgorithm" actionPolicyClass="org.exoplatform.services.jcr.impl.dataflow.persistent.jbosscache.ParentNodeEvictionActionPolicy" eventQueueSize="1000000">
++         <property name="maxNodes" value="5000" />
++         <property name="minTimeToLive" value="60000" />
++      </default>
++   </eviction>
++
++</jbosscache>
+\ No newline at end of file
+diff --git a/src/test/resources/conf/portal/exo.portal.component.test.jcr-jbosscache-lock-config.xml b/src/test/resources/conf/portal/exo.portal.component.test.jcr-jbosscache-lock-config.xml
+new file mode 100644
+index 0000000..c90f0fc
+--- /dev/null
++++ b/src/test/resources/conf/portal/exo.portal.component.test.jcr-jbosscache-lock-config.xml
+@@ -0,0 +1,23 @@
++<!--
++  ~ Copyright (C) 2009 eXo Platform SAS.
++  ~
++  ~ This is free software; you can redistribute it and/or modify it
++  ~ under the terms of the GNU Lesser General Public License as
++  ~ published by the Free Software Foundation; either version 2.1 of
++  ~ the License, or (at your option) any later version.
++  ~
++  ~ This software is distributed in the hope that it will be useful,
++  ~ but WITHOUT ANY WARRANTY; without even the implied warranty of
++  ~ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
++  ~ Lesser General Public License for more details.
++  ~
++  ~ You should have received a copy of the GNU Lesser General Public
++  ~ License along with this software; if not, write to the Free
++  ~ Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
++  ~ 02110-1301 USA, or see the FSF site: http://www.fsf.org.
++  -->
++<jbosscache xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="urn:jboss:jbosscache-core:config:3.1">
++
++	<locking useLockStriping="false" concurrencyLevel="50000" lockParentForChildInsertRemove="false" lockAcquisitionTimeout="20000" />
++
++</jbosscache>
+\ No newline at end of file
+diff --git a/src/test/resources/conf/portal/locales-config.xml b/src/test/resources/conf/portal/locales-config.xml
+deleted file mode 100644
+index 8af46ed..0000000
+--- a/src/test/resources/conf/portal/locales-config.xml
++++ /dev/null
+@@ -1,39 +0,0 @@
+-<?xml version="1.0" encoding="UTF-8"?>
+-<locales-config>
+-  <!--
+-    Check http://www.ics.uci.edu/pub/ietf/http/related/iso639.txt for locale code 
+-    The encoding parameter will be used for the request  response stream.
+-    The input-encoding parameter will be used for request setCharacterEncoding(..) 
+-
+-    encoding: ISO-8859-1 
+-  -->
+-  
+-  <locale-config>
+-    <locale>en</locale>
+-    <output-encoding>UTF-8</output-encoding>
+-    <input-encoding>UTF-8</input-encoding>
+-    <description>Default configuration for english locale</description>
+-  </locale-config>
+-
+-  <locale-config>
+-    <locale>fr</locale>
+-    <output-encoding>UTF-8</output-encoding>
+-    <input-encoding>UTF-8</input-encoding>
+-    <description>Default configuration for the french locale</description>
+-  </locale-config>
+-
+- <locale-config>
+-    <locale>nl</locale>
+-    <output-encoding>UTF-8</output-encoding>
+-    <input-encoding>UTF-8</input-encoding>
+-    <description>Default configuration for the dutch locale</description>
+-  </locale-config>
+-
+- <locale-config>
+-    <locale>de</locale>
+-    <output-encoding>UTF-8</output-encoding>
+-    <input-encoding>UTF-8</input-encoding>
+-    <description>Default configuration for the german locale</description>
+-  </locale-config>
+-  
+-</locales-config>
+diff --git a/src/test/resources/conf/portal/login.conf b/src/test/resources/conf/portal/login.conf
+deleted file mode 100644
+index 55018c0..0000000
+--- a/src/test/resources/conf/portal/login.conf
++++ /dev/null
+@@ -1,5 +0,0 @@
+-gatein-domain {
+-  org.exoplatform.web.security.PortalLoginModule required;
+-  org.exoplatform.services.security.jaas.SharedStateLoginModule required;
+-  org.exoplatform.services.security.j2ee.TomcatLoginModule required; 
+-};
+diff --git a/src/test/resources/conf/portal/organization-configuration.xml b/src/test/resources/conf/portal/organization-configuration.xml
+deleted file mode 100644
+index d45846e..0000000
+--- a/src/test/resources/conf/portal/organization-configuration.xml
++++ /dev/null
+@@ -1,270 +0,0 @@
+-<?xml version="1.0" encoding="ISO-8859-1"?>
+-<!--
+-
+-    Copyright (C) 2009 eXo Platform SAS.
+-    
+-    This is free software; you can redistribute it and/or modify it
+-    under the terms of the GNU Lesser General Public License as
+-    published by the Free Software Foundation; either version 2.1 of
+-    the License, or (at your option) any later version.
+-    
+-    This software is distributed in the hope that it will be useful,
+-    but WITHOUT ANY WARRANTY; without even the implied warranty of
+-    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+-    Lesser General Public License for more details.
+-    
+-    You should have received a copy of the GNU Lesser General Public
+-    License along with this software; if not, write to the Free
+-    Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
+-    02110-1301 USA, or see the FSF site: http://www.fsf.org.
+-
+--->
+-
+-<configuration
+-   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+-   xsi:schemaLocation="http://www.exoplaform.org/xml/ns/kernel_1_0.xsd http://www.exoplaform.org/xml/ns/kernel_1_0.xsd"
+-   xmlns="http://www.exoplaform.org/xml/ns/kernel_1_0.xsd">
+-  <external-component-plugins>
+-    <target-component>org.exoplatform.services.organization.OrganizationService</target-component>
+-    <component-plugin>
+-      <name>init.service.listener</name>
+-      <set-method>addListenerPlugin</set-method>
+-      <type>org.exoplatform.services.organization.OrganizationDatabaseInitializer</type>
+-      <description>this listener populate organization data for the first launch</description>
+-      <init-params>      
+-        <value-param>
+-          <name>checkDatabaseAlgorithm</name>
+-          <description>check database</description>
+-          <value>entry</value>
+-        </value-param>      
+-        <value-param>
+-          <name>printInformation</name>
+-          <description>Print information init database</description>
+-          <value>false</value>
+-        </value-param> 
+-        <object-param>
+-          <name>configuration</name>
+-          <description>description</description>
+-          <object type="org.exoplatform.services.organization.OrganizationConfig">
+-          
+-            <field  name="membershipType">
+-              <collection type="java.util.ArrayList">
+-              	<value>
+-                  <object type="org.exoplatform.services.organization.OrganizationConfig$MembershipType">
+-                    <field  name="type"><string>manager</string></field>
+-                    <field  name="description"><string>manager membership type</string></field>
+-                  </object>
+-                </value>
+-                <value>
+-                  <object type="org.exoplatform.services.organization.OrganizationConfig$MembershipType">
+-                    <field  name="type"><string>member</string></field>
+-                    <field  name="description"><string>member membership type</string></field>
+-                  </object>
+-                </value>                
+-                <value>
+-                  <object type="org.exoplatform.services.organization.OrganizationConfig$MembershipType">
+-                    <field  name="type"><string>validator</string></field>
+-                    <field  name="description"><string>validator membership type</string></field>
+-                  </object>
+-                </value>
+-              </collection>
+-            </field>
+-
+-            <field  name="group">
+-              <collection type="java.util.ArrayList">             
+-                <value>
+-                  <object type="org.exoplatform.services.organization.OrganizationConfig$Group">
+-                    <field  name="name"><string>platform</string></field>
+-                    <field  name="parentId"><string></string></field>
+-                    <field  name="description"><string>the /platform group</string></field>
+-                    <field  name="label"><string>Platform</string></field>                    
+-                  </object>
+-                </value>
+-                <value>
+-                  <object type="org.exoplatform.services.organization.OrganizationConfig$Group">
+-                    <field  name="name"><string>administrators</string></field>
+-                    <field  name="parentId"><string>/platform</string></field>
+-                    <field  name="description"><string>the /platform/administrators group</string></field>
+-                    <field  name="label"><string>Administrators</string></field>
+-                  </object>
+-                </value>
+-                <value>
+-                  <object type="org.exoplatform.services.organization.OrganizationConfig$Group">
+-                    <field  name="name"><string>users</string></field>
+-                    <field  name="parentId"><string>/platform</string></field>
+-                    <field  name="description"><string>the /platform/users group</string></field>
+-                    <field  name="label"><string>Users</string></field>
+-                  </object>
+-                </value>
+-                <value>
+-                  <object type="org.exoplatform.services.organization.OrganizationConfig$Group">
+-                    <field  name="name"><string>guests</string></field>
+-                    <field  name="parentId"><string>/platform</string></field>
+-                    <field  name="description"><string>the /platform/guests group</string></field>
+-                    <field  name="label"><string>Guests</string></field>
+-                  </object>
+-                </value>
+-                <value>
+-                  <object type="org.exoplatform.services.organization.OrganizationConfig$Group">
+-                    <field  name="name"><string>organization</string></field>
+-                    <field  name="parentId"><string></string></field>
+-                    <field  name="description"><string>the organization group</string></field>
+-                    <field  name="label"><string>Organization</string></field>
+-                  </object>
+-                </value>
+-                <value>
+-                  <object type="org.exoplatform.services.organization.OrganizationConfig$Group">
+-                    <field  name="name"><string>management</string></field>
+-                    <field  name="parentId"><string>/organization</string></field>
+-                    <field  name="description"><string>the /organization/management group</string></field>
+-                    <field  name="label"><string>Management</string></field>
+-                  </object>
+-                </value>
+-                <value>
+-                  <object type="org.exoplatform.services.organization.OrganizationConfig$Group">
+-                    <field  name="name"><string>executive-board</string></field>
+-                    <field  name="parentId"><string>/organization/management</string></field>
+-                    <field  name="description"><string>the /organization/management/executive-board group</string></field>
+-                    <field  name="label"><string>Executive Board</string></field>
+-                  </object>
+-                </value>
+-                <value>
+-                  <object type="org.exoplatform.services.organization.OrganizationConfig$Group">
+-                    <field  name="name"><string>human-resources</string></field>
+-                    <field  name="parentId"><string>/organization/management</string></field>
+-                    <field  name="description"><string>the /organization/management/human-resource group</string></field>
+-                    <field  name="label"><string>Human Resources</string></field>
+-                  </object>
+-                </value>
+-                <value>
+-                  <object type="org.exoplatform.services.organization.OrganizationConfig$Group">
+-                    <field  name="name"><string>communication</string></field>
+-                    <field  name="parentId"><string>/organization</string></field>
+-                    <field  name="description"><string>the /organization/communication group</string></field>
+-                    <field  name="label"><string>Communication</string></field>
+-                  </object>
+-                </value>
+-                <value>
+-                  <object type="org.exoplatform.services.organization.OrganizationConfig$Group">
+-                    <field  name="name"><string>marketing</string></field>
+-                    <field  name="parentId"><string>/organization/communication</string></field>
+-                    <field  name="description"><string>the /organization/communication/marketing group</string></field>
+-                    <field  name="label"><string>Marketing</string></field>
+-                  </object>
+-                </value>
+-                <value>
+-                  <object type="org.exoplatform.services.organization.OrganizationConfig$Group">
+-                    <field  name="name"><string>press-and-media</string></field>
+-                    <field  name="parentId"><string>/organization/communication</string></field>
+-                    <field  name="description"><string>the /organization/communication/press-and-media group</string></field>
+-                    <field  name="label"><string>Press and Media</string></field>
+-                  </object>
+-                </value>
+-                <value>
+-                  <object type="org.exoplatform.services.organization.OrganizationConfig$Group">
+-                    <field  name="name"><string>operations</string></field>
+-                    <field  name="parentId"><string>/organization</string></field>
+-                    <field  name="description"><string>the /organization/operations and media group</string></field>
+-                    <field  name="label"><string>Operations</string></field>
+-                  </object>
+-                </value>
+-                <value>
+-                  <object type="org.exoplatform.services.organization.OrganizationConfig$Group">
+-                    <field  name="name"><string>sales</string></field>
+-                    <field  name="parentId"><string>/organization/operations</string></field>
+-                    <field  name="description"><string>the /organization/operations/sales group</string></field>
+-                    <field  name="label"><string>Sales</string></field>
+-                  </object>
+-                </value>
+-                <value>
+-                  <object type="org.exoplatform.services.organization.OrganizationConfig$Group">
+-                    <field  name="name"><string>finances</string></field>
+-                    <field  name="parentId"><string>/organization/operations</string></field>
+-                    <field  name="description"><string>the /organization/operations/finances group</string></field>
+-                    <field  name="label"><string>Finances</string></field>
+-                  </object>
+-                </value>
+-                <value>
+-                  <object type="org.exoplatform.services.organization.OrganizationConfig$Group">
+-                    <field  name="name"><string>customers</string></field>
+-                    <field  name="parentId"><string></string></field>
+-                    <field  name="description"><string>the /customers group</string></field>
+-                    <field  name="label"><string>Customers</string></field>
+-                  </object>
+-                </value>                
+-                <value>
+-                  <object type="org.exoplatform.services.organization.OrganizationConfig$Group">
+-                    <field  name="name"><string>partners</string></field>
+-                    <field  name="parentId"><string></string></field>
+-                    <field  name="description"><string>the /partners group</string></field>
+-                    <field  name="label"><string>Partners</string></field>
+-                  </object>
+-                </value>                
+-              </collection>
+-            </field>
+-
+-            <field  name="user">
+-              <collection type="java.util.ArrayList">
+-                <value>
+-                  <object type="org.exoplatform.services.organization.OrganizationConfig$User">
+-                    <field  name="userName"><string>root</string></field>
+-                    <field  name="password"><string>gtn</string></field>
+-                    <field  name="firstName"><string>Root</string></field>
+-                    <field  name="lastName"><string>Root</string></field>
+-                    <field  name="email"><string>root@localhost</string></field>
+-                    <field  name="groups">
+-                      <string>
+-                      	manager:/platform/administrators,member:/platform/users,
+-                      	member:/organization/management/executive-board
+-                      </string>
+-                    </field>
+-                  </object>
+-                </value>
+-                
+-                <value>
+-                  <object type="org.exoplatform.services.organization.OrganizationConfig$User">
+-                    <field  name="userName"><string>john</string></field>
+-                    <field  name="password"><string>gtn</string></field>
+-                    <field  name="firstName"><string>John</string></field>
+-                    <field  name="lastName"><string>Anthony</string></field>
+-                    <field  name="email"><string>john@localhost</string></field>
+-                    <field  name="groups">
+-                      <string>
+-                      	member:/platform/administrators,member:/platform/users,
+-                      	manager:/organization/management/executive-board
+-                      </string>
+-                    </field>
+-                  </object>
+-                </value>                                                        
+-                <value>
+-                  <object type="org.exoplatform.services.organization.OrganizationConfig$User">
+-                    <field  name="userName"><string>mary</string></field>
+-                    <field  name="password"><string>gtn</string></field>
+-                    <field  name="firstName"><string>Mary</string></field>
+-                    <field  name="lastName"><string>Kelly</string></field>
+-                    <field  name="email"><string>mary@localhost</string></field>
+-                    <field  name="groups">
+-                      <string>member:/platform/users</string>
+-                    </field>
+-                  </object>
+-                </value>
+-                <value>
+-                  <object type="org.exoplatform.services.organization.OrganizationConfig$User">
+-                    <field  name="userName"><string>demo</string></field>
+-                    <field  name="password"><string>gtn</string></field>
+-                    <field  name="firstName"><string>Demo</string></field>
+-                    <field  name="lastName"><string>gtn</string></field>
+-                    <field  name="email"><string>demo@localhost</string></field>
+-                    <field  name="groups">
+-                      <string>member:/platform/guests,member:/platform/users</string>
+-                    </field>
+-                  </object>
+-                </value>                       
+-              </collection>
+-            </field>
+-          </object>
+-        </object-param>
+-      </init-params>
+-    </component-plugin>
+-  </external-component-plugins>
+-</configuration>
+diff --git a/src/test/resources/conf/portal/repository-configuration.xml b/src/test/resources/conf/portal/repository-configuration.xml
+index 6632e78..23924a4 100644
+--- a/src/test/resources/conf/portal/repository-configuration.xml
++++ b/src/test/resources/conf/portal/repository-configuration.xml
+@@ -1,28 +1,45 @@
+-<repository-service default-repository="${gatein.jcr.repository.default}">
++<!--
++  ~ Copyright (C) 2009 eXo Platform SAS.
++  ~
++  ~ This is free software; you can redistribute it and/or modify it
++  ~ under the terms of the GNU Lesser General Public License as
++  ~ published by the Free Software Foundation; either version 2.1 of
++  ~ the License, or (at your option) any later version.
++  ~
++  ~ This software is distributed in the hope that it will be useful,
++  ~ but WITHOUT ANY WARRANTY; without even the implied warranty of
++  ~ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
++  ~ Lesser General Public License for more details.
++  ~
++  ~ You should have received a copy of the GNU Lesser General Public
++  ~ License along with this software; if not, write to the Free
++  ~ Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
++  ~ 02110-1301 USA, or see the FSF site: http://www.fsf.org.
++  -->
++
++<repository-service default-repository="repository">
+   <repositories>
+-    <repository name="${gatein.jcr.repository.default}" system-workspace="${gatein.jcr.workspace.system}" default-workspace="${gatein.jcr.workspace.default}">
++    <repository name="repository" system-workspace="system" default-workspace="bookstore">
+       <security-domain>gatein-domain</security-domain>
+       <access-control>optional</access-control>
+       <authentication-policy>org.exoplatform.services.jcr.impl.core.access.JAASAuthenticator</authentication-policy>
++
++      <!-- System --> 
+       <workspaces>
+-          
+-         <workspace name="system" auto-init-root-nodetype="nt:unstructured" 
+-                  auto-init-permissions="*:/platform/administrators read;*:/platform/administrators add_node;*:/platform/administrators set_property;*:/platform/administrators remove" >
+-          <!-- for system storage -->
+-          <container class="org.exoplatform.services.jcr.impl.storage.jdbc.JDBCWorkspaceDataContainer">
++        <workspace name="system">
++          <container class="org.exoplatform.services.jcr.impl.storage.jdbc.optimisation.CQJDBCWorkspaceDataContainer">
+             <properties>
+-              <property name="sourceName" value="jdbcexo"/>
+-              <property name="dialect" value="hsqldb"/>
+-              <!-- property name="db-type" value="mysql"/ -->
++              <property name="source-name" value="jdbcexo"/>
++              <property name="dialect" value="auto"/>
+               <property name="multi-db" value="false"/>
+               <property name="update-storage" value="true"/>
+               <property name="max-buffer-size" value="204800"/>
+-              <property name="swap-directory" value="target/temp/swap/system"/>
++              <property name="swap-directory" value="${gatein.test.tmp.dir}/jcr/swap/system"/>
+             </properties>
+             <value-storages>
+               <value-storage id="system" class="org.exoplatform.services.jcr.impl.storage.value.fs.TreeFileValueStorage">
+                 <properties>
+-                  <property name="path" value="target/temp/values/system"/>
++                  <property name="path" value="${gatein.test.tmp.dir}/jcr/values/system"/>
+                 </properties>
+                 <filters>
+                   <filter property-type="Binary"/>
+@@ -30,86 +47,45 @@
+               </value-storage>
+             </value-storages>
+           </container>
+-         <cache enabled="true">
+-          <properties>
+-            <property name="maxSize" value="20000"/>
+-            <property name="liveTime" value="30000"/>
+-          </properties>
+-         </cache>
+-         <query-handler class="org.exoplatform.services.jcr.impl.core.query.lucene.SearchIndex">
+-          <properties>
+-            <property name="indexDir" value="target/temp/jcrlucenedb/index/system"/>
+-          </properties>
+-         </query-handler>
+-         <lock-manager>
+-          <time-out>900000</time-out><!-- 15min -->
+-           <persister class="org.exoplatform.services.jcr.impl.core.lock.FileSystemLockPersister">
+-             <properties>
+-               <property name="path" value="target/temp/lock/system"/>
+-             </properties>
+-           </persister>
+-         </lock-manager>
+-       </workspace>
+-          
+-         <workspace name="collaboration" auto-init-root-nodetype="nt:unstructured" 
+-                  auto-init-permissions="any read;*:/platform/administrators read;*:/platform/administrators add_node;*:/platform/administrators set_property;*:/platform/administrators remove" >
+-          <!-- for system storage -->
+-          <container class="org.exoplatform.services.jcr.impl.storage.jdbc.JDBCWorkspaceDataContainer">
++          <initializer class="org.exoplatform.services.jcr.impl.core.ScratchWorkspaceInitializer">
+             <properties>
+-              <property name="sourceName" value="jdbcexo"/>
+-              <property name="dialect" value="hsqldb"/>
+-              <!-- property name="db-type" value="mysql"/ -->
+-              <property name="multi-db" value="false"/>
+-              <property name="update-storage" value="true"/>
+-              <property name="max-buffer-size" value="204800"/>
+-              <property name="swap-directory" value="target/temp/swap/collaboration"/>
++              <property name="root-nodetype" value="nt:unstructured"/>
++              <property name="root-permissions" value="*:/platform/administrators read;*:/platform/administrators add_node;*:/platform/administrators set_property;*:/platform/administrators remove"/>
+             </properties>
+-            <value-storages>
+-              <value-storage id="collaboration" class="org.exoplatform.services.jcr.impl.storage.value.fs.TreeFileValueStorage">
+-                <properties>
+-                  <property name="path" value="target/temp/values/collaboration"/>
+-                </properties>
+-                <filters>
+-                  <filter property-type="Binary"/>
+-                </filters>
+-              </value-storage>
+-            </value-storages>
+-          </container>
+-         <cache enabled="true">
+-          <properties>
+-            <property name="maxSize" value="20000"/>
+-            <property name="liveTime" value="30000"/>
+-          </properties>
+-         </cache>
+-         <query-handler class="org.exoplatform.services.jcr.impl.core.query.lucene.SearchIndex">
+-          <properties>
+-            <property name="indexDir" value="target/temp/jcrlucenedb/index/collaboration"/>
+-          </properties>
+-         </query-handler>
+-         <lock-manager>
+-          <time-out>900000</time-out><!-- 15min -->
+-           <persister class="org.exoplatform.services.jcr.impl.core.lock.FileSystemLockPersister">
+-             <properties>
+-               <property name="path" value="target/temp/lock/collaboration"/>
+-             </properties>
+-           </persister>
+-         </lock-manager>
+-       </workspace>   
+-         
++          </initializer>
++          <cache enabled="true" class="org.exoplatform.services.jcr.impl.dataflow.persistent.jbosscache.JBossCacheWorkspaceStorageCache">
++            <properties>
++              <property name="jbosscache-configuration" value="conf/portal/exo.portal.component.test.jcr-jbosscache-config.xml" />
++            </properties>
++          </cache>
++          <query-handler class="org.exoplatform.services.jcr.impl.core.query.lucene.SearchIndex">
++            <properties>
++              <property name="index-dir" value="${gatein.test.tmp.dir}/jcr/jcrlucenedb/system"/>
++            </properties>
++          </query-handler>
++          <lock-manager class="org.exoplatform.services.jcr.impl.core.lock.jbosscache.CacheableLockManagerImpl">
++            <properties>
++              <property name="time-out" value="15m" />
++              <property name="jbosscache-configuration" value="conf/portal/exo.portal.component.test.jcr-jbosscache-lock-config.xml" />
++            </properties>
++          </lock-manager>
++        </workspace>
++
++        <!-- Portal system data -->
+         <workspace name="bookstore">
+           <container class="org.exoplatform.services.jcr.impl.storage.jdbc.optimisation.CQJDBCWorkspaceDataContainer">
+             <properties>
+-              <property name="source-name" value="${gatein.jcr.datasource.name}${container.name.suffix}"/>
+-              <property name="dialect" value="${gatein.jcr.datasource.dialect}"/>
++              <property name="source-name" value="jdbcexo"/>
++              <property name="dialect" value="auto"/>
+               <property name="multi-db" value="false"/>
+               <property name="update-storage" value="true"/>
+-              <property name="max-buffer-size" value="200k"/>
+-              <property name="swap-directory" value="${gatein.jcr.data.dir}/swap/bookstore${container.name.suffix}"/>
++              <property name="max-buffer-size" value="204800"/>
++              <property name="swap-directory" value="${gatein.test.tmp.dir}/jcr/swap/portal-test"/>
+             </properties>
+             <value-storages>
+-              <value-storage id="bookstore" class="org.exoplatform.services.jcr.impl.storage.value.fs.TreeFileValueStorage">
++              <value-storage id="portal-test" class="org.exoplatform.services.jcr.impl.storage.value.fs.TreeFileValueStorage">
+                 <properties>
+-                  <property name="path" value="${gatein.jcr.storage.data.dir}/bookstore${container.name.suffix}"/>
++                  <property name="path" value="${gatein.test.tmp.dir}/jcr/values/portal-test"/>
+                 </properties>
+                 <filters>
+                   <filter property-type="Binary"/>
+@@ -120,49 +96,27 @@
+           <initializer class="org.exoplatform.services.jcr.impl.core.ScratchWorkspaceInitializer">
+             <properties>
+               <property name="root-nodetype" value="nt:unstructured"/>
+-              <property name="root-permissions" value="any read;*:/platform/administrators read;*:/platform/administrators add_node;*:/platform/administrators set_property;*:/platform/administrators remove"/>
++              <property name="root-permissions" value="*:/platform/administrators read;*:/platform/administrators add_node;*:/platform/administrators set_property;*:/platform/administrators remove"/>
+             </properties>
+           </initializer>
+           <cache enabled="true" class="org.exoplatform.services.jcr.impl.dataflow.persistent.jbosscache.JBossCacheWorkspaceStorageCache">
+             <properties>
+-              <property name="jbosscache-configuration" value="${gatein.jcr.cache.config}" />
+-              <property name="jgroups-configuration" value="${gatein.jcr.jgroups.config}" />
+-              <property name="jbosscache-cluster-name" value="jcr-cache${container.name.suffix}" />
+-              <property name="jbosscache-shareable" value="true" />
+-              <property name="jbosscache-expiration-time" value="${gatein.jcr.cache.expiration.time}" />
++              <property name="jbosscache-configuration" value="conf/portal/exo.portal.component.test.jcr-jbosscache-config.xml" />
+             </properties>
+           </cache>
+           <query-handler class="org.exoplatform.services.jcr.impl.core.query.lucene.SearchIndex">
+             <properties>
+-              <property name="index-dir" value="${gatein.jcr.index.data.dir}/bookstore${container.name.suffix}"/>
+-              <property name="changesfilter-class" value="${gatein.jcr.index.changefilterclass}" />
+-              <property name="jbosscache-configuration" value="${gatein.jcr.index.cache.config}" />
+-              <property name="jgroups-configuration" value="${gatein.jcr.jgroups.config}" />
+-              <property name="jbosscache-cluster-name" value="jcr-indexer${container.name.suffix}" />
+-              <property name="jbosscache-shareable" value="true" />
+-              <property name="max-volatile-time" value="60" />
++              <property name="index-dir" value="${gatein.test.tmp.dir}/jcr/jcrlucenedb/portal-test"/>
+             </properties>
+           </query-handler>
+-          
+           <lock-manager class="org.exoplatform.services.jcr.impl.core.lock.jbosscache.CacheableLockManagerImpl">
+             <properties>
+               <property name="time-out" value="15m" />
+-              <property name="jbosscache-configuration" value="${gatein.jcr.lock.cache.config}" />
+-              <property name="jgroups-configuration" value="${gatein.jcr.jgroups.config}" />
+-              <property name="jbosscache-cluster-name" value="jcr-lock${container.name.suffix}" />
+-              <property name="jbosscache-shareable" value="true" />
+-              <property name="jbosscache-cl-cache.jdbc.table.name" value="jcrlocks" />
+-              <property name="jbosscache-cl-cache.jdbc.table.create" value="true" />
+-              <property name="jbosscache-cl-cache.jdbc.table.drop" value="false" />
+-              <property name="jbosscache-cl-cache.jdbc.table.primarykey" value="pk" />
+-              <property name="jbosscache-cl-cache.jdbc.fqn.column" value="fqn" />
+-              <property name="jbosscache-cl-cache.jdbc.node.column" value="node" />
+-              <property name="jbosscache-cl-cache.jdbc.parent.column" value="parent" />
+-              <property name="jbosscache-cl-cache.jdbc.datasource" value="${gatein.jcr.datasource.name}${container.name.suffix}" />
++              <property name="jbosscache-configuration" value="conf/portal/exo.portal.component.test.jcr-jbosscache-lock-config.xml" />
+             </properties>
+           </lock-manager>
+-
+         </workspace>
++
+       </workspaces>
+     </repository>
+   </repositories>
+diff --git a/src/test/resources/conf/portal/test-configuration.xml b/src/test/resources/conf/portal/test-configuration.xml
+index 710685d..38a64ec 100644
+--- a/src/test/resources/conf/portal/test-configuration.xml
++++ b/src/test/resources/conf/portal/test-configuration.xml
+@@ -1,401 +1,190 @@
+ <?xml version="1.0" encoding="ISO-8859-1"?>
+ <configuration xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.exoplaform.org/xml/ns/kernel_1_0.xsd http://www.exoplaform.org/xml/ns/kernel_1_0.xsd"
+   xmlns="http://www.exoplaform.org/xml/ns/kernel_1_0.xsd">
+-
+-   <component>
+-    <key>exoplatform.BookStoreService</key>
+-    <type>exoplatform.BookStoreServiceImpl</type>
+-  </component>
+-  
+-  <component>
+-    <key>org.exoplatform.services.organization.OrganizationService</key>
+-    <type>org.exoplatform.services.organization.hibernate.OrganizationServiceImpl</type>
+-  </component>
+   
+   <component>
+-    <key>org.exoplatform.services.database.HibernateService</key>
+-    <type>org.exoplatform.services.database.impl.HibernateServiceImpl</type>
+-    <init-params>
+-      <properties-param>
+-        <name>hibernate.properties</name>
+-        <description>Default Hibernate Service</description>
+-        <property name="hibernate.show_sql" value="false" />
+-        <property name="hibernate.cglib.use_reflection_optimizer" value="true" />
+-        <property name="hibernate.connection.url" value="jdbc:hsqldb:mem:target/temp/data/portal" />
+-        <property name="hibernate.connection.driver_class" value="org.hsqldb.jdbcDriver" />
+-        <property name="hibernate.connection.autocommit" value="true" />
+-        <property name="hibernate.connection.username" value="sa" />
+-        <property name="hibernate.connection.password" value="" />
+-        <property name="hibernate.dialect" value="org.hibernate.dialect.HSQLDialect" />
+-        <property name="hibernate.c3p0.min_size" value="5" />
+-        <property name="hibernate.c3p0.max_size" value="20" />
+-        <property name="hibernate.c3p0.timeout" value="1800" />
+-        <property name="hibernate.c3p0.max_statements" value="50" />
+-      </properties-param>
+-    </init-params>
+-  </component>
+-  
+-  <component>
+-    <key>org.exoplatform.services.cache.CacheService</key>
+-    <jmx-name>cache:type=CacheService</jmx-name>
+-    <type>org.exoplatform.services.cache.impl.CacheServiceImpl</type>
+-    <init-params>
+-      <object-param>
+-        <name>cache.config.default</name>
+-        <description>The default cache configuration</description>
+-        <object type="org.exoplatform.services.cache.ExoCacheConfig">
+-          <field name="name"><string>default</string></field>
+-          <field name="maxSize"><int>30000</int></field>
+-          <field name="liveTime"><long>60000</long></field>
+-          <field name="distributed"><boolean>false</boolean></field>
+-          <field name="implementation"><string>org.exoplatform.services.cache.concurrent.ConcurrentFIFOExoCache</string></field>
+-        </object>
+-      </object-param>
+-    </init-params>
+-  </component> 
+-  
+-   <component>
+-    <key>org.exoplatform.services.cache.ExoCacheFactory</key>
+-    <type>org.exoplatform.services.cache.impl.jboss.ExoCacheFactoryImpl</type>
++    <key>org.exoplatform.services.jcr.config.RepositoryServiceConfiguration</key>
++    <type>org.exoplatform.services.jcr.impl.config.RepositoryServiceConfigurationImpl</type>
+     <init-params>
+       <value-param>
+-        <name>cache.config.template</name>
+-        <value>classpath:/conf/jbosscache/cluster/config.xml</value>
+-      </value-param>
+-      <value-param profiles="cluster">
+-        <name>cache.config.template</name>
+-        <value>classpath:/conf/jbosscache/cluster/config.xml</value>
++        <name>conf-path</name>
++        <description>JCR configuration file</description>
++        <value>jar:/conf/portal/repository-configuration.xml</value>
+       </value-param>
+     </init-params>
+   </component>
+-  <component>
+-    <key>org.exoplatform.services.log.LogConfigurationInitializer</key>
+-    <type>org.exoplatform.services.log.LogConfigurationInitializer</type>
+-    <init-params>
+-      <value-param>
+-        <name>logger</name>
+-        <value>org.exoplatform.services.log.impl.BufferedLog4JLogger</value>
+-      </value-param>
+-      <value-param>
+-        <name>configurator</name>
+-        <value>org.exoplatform.services.log.impl.Log4JConfigurator</value>
+-      </value-param>
+-      <properties-param>
+-        <name>properties</name>
+-        <description>Log4J properties</description>
+-        <property name="log4j.rootLogger" value="INFO, stdout, file"/>
+-
+-        <property name="log4j.appender.stdout" value="org.apache.log4j.ConsoleAppender"/>
+-        <property name="log4j.appender.stdout.threshold" value="INFO"/>
+-
+-        <property name="log4j.appender.stdout.layout" value="org.apache.log4j.PatternLayout"/>
+-        <property name="log4j.appender.stdout.layout.ConversionPattern" value="%d{dd.MM.yyyy HH:mm:ss} *%-5p* [%t] %c{1}: %m (%F, line %L) %n"/>
+-
+-        <property name="log4j.appender.file" value="org.apache.log4j.FileAppender"/>
+-        <property name="log4j.appender.file.File" value="target/jcr.log"/>
+-
+-        <property name="log4j.appender.file.layout" value="org.apache.log4j.PatternLayout"/>
+-        <property name="log4j.appender.file.layout.ConversionPattern" value="%d{dd.MM.yyyy HH:mm:ss} *%-5p* [%t] %c{1}: %m (%F, line %L) %n"/>
+ 
+-        <!-- property name="log4j.category.ext.BackupScheduler" value="DEBUG"/>
+-        <property name="log4j.category.ext.BackupManagerImpl" value="DEBUG"/ -->
+-
+-      </properties-param>
+-    </init-params>
+-  </component>
+-  
+-  <!-- component>
+-    <key>org.exoplatform.services.organization.auth.AuthenticationService</key>
+-    <type>org.exoplatform.services.organization.auth.impl.AuthenticationServiceImpl</type>
+-  </component-->
+-  
+-  <!-- REST -->
+-  
++	<component>
++		<key>org.exoplatform.services.jcr.RepositoryService</key>
++		<type>org.exoplatform.services.jcr.impl.RepositoryServiceImpl</type>
++		<component-plugins>
++			<component-plugin>
++				<name>add.nodeType</name>
++				<set-method>addPlugin</set-method>
++				<type>org.exoplatform.services.jcr.impl.AddNodeTypePlugin</type>
++				<init-params>
++					<values-param>
++						<name>autoCreatedInNewRepository</name>
++						<description>Node types configuration file</description>
++						<value>jar:/conf/portal/nodetypes.xml</value>
++					</values-param>
++				</init-params>
++			</component-plugin>
++		</component-plugins>
++	</component>
++	
+   <component>
+-    <type>org.exoplatform.services.jcr.ext.app.ThreadLocalSessionProviderService</type>
++    <key>org.exoplatform.services.jcr.ext.distribution.DataDistributionManager</key>
++    <type>org.exoplatform.services.jcr.ext.distribution.impl.DataDistributionManagerImpl</type>
+   </component>
+   
+   <component>
+-      <key>org.exoplatform.services.jcr.ext.distribution.DataDistributionManager</key>
+-      <type>org.exoplatform.services.jcr.ext.distribution.impl.DataDistributionManagerImpl</type>     
+-  </component>
+-  <component>
+     <key>org.exoplatform.services.jcr.ext.hierarchy.NodeHierarchyCreator</key>
+     <type>org.exoplatform.services.jcr.ext.hierarchy.impl.NodeHierarchyCreatorImpl</type>
+-  </component> 
+-  
+-
+-  <component>
+-    <type>org.exoplatform.services.jcr.ext.registry.RegistryService</type>
+-    <init-params>
+-      <properties-param>
+-      <name>locations</name>
+-      <property name="repository" value="collaboration"/>
+-      </properties-param>
+-    </init-params>
+   </component>
+-
+-    <!-- component>
+-      <key>org.exoplatform.services.jcr.ext.audit.AuditService</key>
+-      <type>org.exoplatform.services.jcr.ext.audit.AuditServiceImpl</type>
+-    </component-->
+-
+-    <component>
+-      <key>org.exoplatform.services.jcr.RepositoryService</key>
+-      <type>org.exoplatform.services.jcr.impl.RepositoryServiceImpl</type>
+-      <component-plugins>
+-        <component-plugin>
+-          <name>add.nodeType</name>
+-          <set-method>addPlugin</set-method>
+-          <type>org.exoplatform.services.jcr.impl.AddNodeTypePlugin</type>
+-          <init-params>
+-            <values-param>
+-              <name>autoCreatedInNewRepository</name>
+-              <description>Node types configuration file</description>
+-              <value>jar:/conf/portal/nodetypes.xml</value>              
+-            </values-param>
+-          </init-params>
+-        </component-plugin>
+-      </component-plugins>
+-    </component>
+-    
+-    
+-  <component>
+-    <key>org.exoplatform.services.resources.LocaleConfigService</key>
+-    <type>org.exoplatform.services.resources.impl.LocaleConfigServiceImpl</type>
+-      <init-params>
+-        <value-param>
+-          <name>locale.config.file</name>
+-          <value>jar:/conf/portal/locales-config.xml</value>
+-        </value-param>
+-      </init-params>
+-  </component>
+-  
+   
+   <component>
+-      <key>org.exoplatform.services.resources.ResourceBundleService</key>
+-      <type>org.exoplatform.services.resources.impl.SimpleResourceBundleService</type>
+-        <init-params>
+-          <values-param>
+-            <name>classpath.resources</name>
+-            <description>The resources  that start with the following package name should be load from file system</description>
+-            <value>locale.portlet</value>
+-          </values-param>
+-
+-          <values-param>
+-            <name>init.resources</name>
+-            <description>Store the following resources into the db for  the first launch </description>
+-            <value>locale.test.resources.test</value>
+-          </values-param>
+-
+-          <values-param>
+-            <name>portal.resource.names</name>
+-            <description>The properties files of  the portal ,  those file will be merged
+-              into one ResourceBundle properties </description>
+-            <value>local.portal.portal</value>
+-            <value>local.portal.custom</value>
+-          </values-param>
+-        </init-params>
+-    </component>
+-  
+-    <component>
+-      <key>org.exoplatform.services.jcr.config.RepositoryServiceConfiguration</key>
+-      <type>org.exoplatform.services.jcr.impl.config.RepositoryServiceConfigurationImpl</type>
+-      <init-params>
+-        <value-param>
+-          <name>conf-path</name>
+-          <description>JCR configuration file</description>
+-          <value>jar:/conf/portal/repository-configuration.xml</value>
+-        </value-param>
+-      </init-params>
++    <key>exoplatform.BookStoreService</key>
++    <type>exoplatform.BookStoreServiceImpl</type>
+   </component>
+-  <component>
+-      <type>org.exoplatform.services.jcr.impl.ext.action.SessionActionCatalog</type>
+-      <component-plugins>
+-      <component-plugin>
+-      <name>Last Update Action</name>
+-      <set-method>addPlugin</set-method>
+-      <type>org.exoplatform.services.jcr.impl.ext.action.AddActionsPlugin</type>
+-      <description>add actions plugin</description>
+-      <init-params>
+-        <object-param>
+-          <name>actions</name>
+-          <object type="org.exoplatform.services.jcr.impl.ext.action.AddActionsPlugin$ActionsConfig">
+-            <field  name="actions">
+-              <collection type="java.util.ArrayList">                
+-                <value>
+-                  <object type="org.exoplatform.services.jcr.impl.ext.action.ActionConfiguration">
+-                    <field  name="eventTypes"><string>addNode,changeProperty</string></field>
+-                    <field  name="nodeTypes"><string>exo:calendarEvent</string></field>                     
+-                    <field  name="actionClassName"><string>org.exoplatform.calendar.service.test.LastUpdateAction</string></field>
+-                  </object>
+-                </value>
+-              </collection>
+-            </field>
+-          </object>
+-        </object-param>
+-      </init-params>
+-      </component-plugin>
+-      </component-plugins>
+-    </component>
+-<external-component-plugins>
++  
++  <external-component-plugins>
+     <target-component>org.exoplatform.services.jcr.ext.hierarchy.NodeHierarchyCreator</target-component>
+     <component-plugin>
+-      <name>addPaths</name>
+-      <set-method>addPlugin</set-method>
+-      <type>org.exoplatform.services.jcr.ext.hierarchy.impl.AddPathPlugin</type>            
+-      <init-params>
+-        <object-param>
+-          <name>cms.configuration</name>
+-          <description>configuration for the cms path</description>
+-          <object type="org.exoplatform.services.jcr.ext.hierarchy.impl.HierarchyConfig">
+-            <field  name="repository"><string>repository</string></field>
+-            <field name="workspaces">
+-              <collection type="java.util.ArrayList">
+-                <value><string>collaboration</string></value>                               
+-              </collection>                
+-            </field>
+-            <field  name="jcrPaths">
+-              <collection type="java.util.ArrayList">
+-                <value>                
+-                   <object type="org.exoplatform.services.jcr.ext.hierarchy.impl.HierarchyConfig$JcrPath">                   
+-                     <field name="alias"><string>userApplicationData</string></field>
+-                    <field name="path"><string>ApplicationData</string></field>
+-                    <field name="nodeType"><string>nt:unstructured</string></field>
+-                    <field name="permissions">
+-                      <collection type="java.util.ArrayList">               
+-                        <value>                            
+-                          <object type="org.exoplatform.services.jcr.ext.hierarchy.impl.HierarchyConfig$Permission">             
+-                            <field name="identity"><string>*:/platform/administrators</string></field>
+-                            <field name="read"><string>true</string></field>                
+-                            <field name="addNode"><string>true</string></field>                
+-                            <field name="setProperty"><string>true</string></field>                
+-                            <field name="remove"><string>true</string></field>                
+-                          </object>  
+-                        </value>                        
+-                      </collection>
+-                    </field>                                            
+-                  </object>
+-                  </value>
+-                <value>                
+-                   <object type="org.exoplatform.services.jcr.ext.hierarchy.impl.HierarchyConfig$JcrPath">                   
+-                     <field  name="alias"><string>eXoApplications</string></field>
+-                    <field  name="path"><string>/exo:applications</string></field>                                          
+-                    <field name="permissions">
+-                      <collection type="java.util.ArrayList">               
+-                        <value>                            
+-                          <object type="org.exoplatform.services.jcr.ext.hierarchy.impl.HierarchyConfig$Permission">             
+-                              <field name="identity"><string>*:/platform/administrators</string></field>
+-                              <field name="read"><string>true</string></field>                
+-                              <field name="addNode"><string>true</string></field>                
+-                              <field name="setProperty"><string>true</string></field>                
+-                              <field name="remove"><string>true</string></field>                
+-                            </object>  
+-                        </value>                        
+-                      </collection>
+-                    </field>                        
+-                  </object>
+-                </value>
+-                 <value>                
+-                   <object type="org.exoplatform.services.jcr.ext.hierarchy.impl.HierarchyConfig$JcrPath">                   
+-                     <field  name="alias"><string>eXoServices</string></field>
+-                    <field  name="path"><string>/exo:services</string></field>                    
+-                    <field name="permissions">
+-                      <collection type="java.util.ArrayList">               
+-                        <value>                            
+-                          <object type="org.exoplatform.services.jcr.ext.hierarchy.impl.HierarchyConfig$Permission">             
+-                              <field name="identity"><string>*:/platform/administrators</string></field>
+-                              <field name="read"><string>true</string></field>                
+-                              <field name="addNode"><string>true</string></field>                
+-                              <field name="setProperty"><string>true</string></field>                
+-                              <field name="remove"><string>true</string></field>                
+-                            </object>  
+-                        </value>                        
+-                      </collection>
+-                    </field>                        
+-                  </object>
+-                </value>                
+-                <value>                
+-                  <object type="org.exoplatform.services.jcr.ext.hierarchy.impl.HierarchyConfig$JcrPath">                   
+-                    <field  name="alias"><string>usersPath</string></field>
+-                    <field  name="path"><string>/Users</string></field>
+-                    <field name="permissions">
+-                      <collection type="java.util.ArrayList">               
+-                        <value>                            
+-                          <object type="org.exoplatform.services.jcr.ext.hierarchy.impl.HierarchyConfig$Permission">             
+-                            <field name="identity"><string>*:/platform/administrators</string></field>
+-                            <field name="read"><string>true</string></field>                
+-                            <field name="addNode"><string>true</string></field>                
+-                            <field name="setProperty"><string>true</string></field>                
+-                            <field name="remove"><string>true</string></field>                
+-                          </object>  
+-                        </value>
+-                        <value>                            
+-                          <object type="org.exoplatform.services.jcr.ext.hierarchy.impl.HierarchyConfig$Permission">             
+-                            <field name="identity"><string>any</string></field>
+-                            <field name="read"><string>true</string></field>                
+-                            <field name="addNode"><string>false</string></field>                
+-                            <field name="setProperty"><string>true</string></field>                
+-                            <field name="remove"><string>false</string></field>                
+-                          </object>  
+-                        </value>
+-                      </collection>
+-                    </field>                        
+-                  </object>
+-                </value>
+-                <value>                
+-                  <object type="org.exoplatform.services.jcr.ext.hierarchy.impl.HierarchyConfig$JcrPath">                   
+-                    <field  name="alias"><string>groupsPath</string></field>
+-                    <field  name="path"><string>/Groups</string></field>
+-                    <field name="permissions">
+-                      <collection type="java.util.ArrayList">               
+-                        <value>                            
+-                          <object type="org.exoplatform.services.jcr.ext.hierarchy.impl.HierarchyConfig$Permission">             
+-                            <field name="identity"><string>*:/platform/administrators</string></field>
+-                            <field name="read"><string>true</string></field>                
+-                            <field name="addNode"><string>true</string></field>                
+-                            <field name="setProperty"><string>true</string></field>                
+-                            <field name="remove"><string>true</string></field>                
+-                          </object>  
+-                        </value>
+-                        <value>                            
+-                          <object type="org.exoplatform.services.jcr.ext.hierarchy.impl.HierarchyConfig$Permission">             
+-                            <field name="identity"><string>any</string></field>
+-                            <field name="read"><string>true</string></field>                
+-                            <field name="addNode"><string>false</string></field>                
+-                            <field name="setProperty"><string>true</string></field>                
+-                            <field name="remove"><string>false</string></field>                
+-                          </object>  
+-                        </value>
+-                      </collection>
+-                    </field>                        
+-                  </object>
+-                </value>                                                                        
+-              </collection>                                
+-            </field>
+-          </object>
++      	<name>addPaths</name>
++      	<set-method>addPlugin</set-method>
++      	<type>org.exoplatform.services.jcr.ext.hierarchy.impl.AddPathPlugin</type>            
++      	<init-params>
++        	<object-param>
++          		<name>cms.configuration</name>
++          		<description>configuration for the cms path</description>
++          		<object type="org.exoplatform.services.jcr.ext.hierarchy.impl.HierarchyConfig">
++		            <field name="workspaces">
++		              <collection type="java.util.ArrayList">
++		                <value><string>bookstore</string></value>
++		              </collection>                
++		            </field>
++	            	<field  name="jcrPaths">
++		 	        	<collection type="java.util.ArrayList">
++			            	<value>                
++	        		        	<object type="org.exoplatform.services.jcr.ext.hierarchy.impl.HierarchyConfig$JcrPath">                   
++		                     		<field  name="alias"><string>exobookstore</string></field>
++		                     		<field  name="path"><string>/exostore:bookstore</string></field>                                          
++		                     		<field name="permissions">
++		                       			<collection type="java.util.ArrayList">               
++		                         			<value>                            
++		                           				<object type="org.exoplatform.services.jcr.ext.hierarchy.impl.HierarchyConfig$Permission">
++													  <field name="identity"><string>*:/platform/administrators</string></field>
++						                              <field name="read"><string>true</string></field>                
++						                              <field name="addNode"><string>true</string></field>                
++						                              <field name="setProperty"><string>true</string></field>                
++						                              <field name="remove"><string>true</string></field>                
++		                           				</object>  
++		                        			</value>     
++											<value>                            
++		                           				<object type="org.exoplatform.services.jcr.ext.hierarchy.impl.HierarchyConfig$Permission">
++						                              <field name="identity"><string>any</string></field>
++						                              <field name="read"><string>true</string></field>                
++						                              <field name="addNode"><string>false</string></field>                
++						                              <field name="setProperty"><string>true</string></field>                
++						                              <field name="remove"><string>false</string></field>                
++		                           				</object>  
++		                        			</value>                   
++		                      			</collection>
++		                    		</field>                                   
++	                  			</object>
++	                  		</value>
++	                  		<value>
++	                  			<object type="org.exoplatform.services.jcr.ext.hierarchy.impl.HierarchyConfig$JcrPath">                   
++		                     		<field  name="alias"><string>book</string></field>
++		                     		<field  name="path"><string>/exostore:bookstore/exostore:book</string></field>                                          
++		                     		<field name="permissions">
++		                       			<collection type="java.util.ArrayList">               
++		                         			<value>                            
++		                           				<object type="org.exoplatform.services.jcr.ext.hierarchy.impl.HierarchyConfig$Permission">
++													  <field name="identity"><string>*:/platform/administrators</string></field>
++						                              <field name="read"><string>true</string></field>                
++						                              <field name="addNode"><string>true</string></field>                
++						                              <field name="setProperty"><string>true</string></field>                
++						                              <field name="remove"><string>true</string></field>                
++		                           				</object>  
++		                        			</value>     
++											<value>                            
++		                           				<object type="org.exoplatform.services.jcr.ext.hierarchy.impl.HierarchyConfig$Permission">
++						                              <field name="identity"><string>any</string></field>
++						                              <field name="read"><string>true</string></field>                
++						                              <field name="addNode"><string>false</string></field>                
++						                              <field name="setProperty"><string>true</string></field>                
++						                              <field name="remove"><string>false</string></field>                
++		                           				</object>  
++		                        			</value>                   
++		                      			</collection>
++		                    		</field>                                   
++	                  			</object>
++	                  		</value>
++	                  		<value>
++	                  			<object type="org.exoplatform.services.jcr.ext.hierarchy.impl.HierarchyConfig$JcrPath">                   
++		                     		<field  name="alias"><string>author</string></field>
++		                     		<field  name="path"><string>/exostore:bookstore/exostore:author</string></field>                                          
++		                     		<field name="permissions">
++		                       			<collection type="java.util.ArrayList">               
++		                         			<value>                            
++		                           				<object type="org.exoplatform.services.jcr.ext.hierarchy.impl.HierarchyConfig$Permission">
++													  <field name="identity"><string>*:/platform/administrators</string></field>
++						                              <field name="read"><string>true</string></field>                
++						                              <field name="addNode"><string>true</string></field>                
++						                              <field name="setProperty"><string>true</string></field>                
++						                              <field name="remove"><string>true</string></field>                
++		                           				</object>  
++		                        			</value>     
++											<value>                            
++		                           				<object type="org.exoplatform.services.jcr.ext.hierarchy.impl.HierarchyConfig$Permission">
++						                              <field name="identity"><string>any</string></field>
++						                              <field name="read"><string>true</string></field>                
++						                              <field name="addNode"><string>false</string></field>                
++						                              <field name="setProperty"><string>true</string></field>                
++						                              <field name="remove"><string>false</string></field>                
++		                           				</object>  
++		                        			</value>                   
++		                      			</collection>
++		                    		</field>                                   
++	                  			</object>
++	                		</value>
++	                		<value>
++	                  			<object type="org.exoplatform.services.jcr.ext.hierarchy.impl.HierarchyConfig$JcrPath">                   
++		                     		<field  name="alias"><string>author</string></field>
++		                     		<field  name="path"><string>/exostore:bookstore/exostore:user</string></field>                                          
++		                     		<field name="permissions">
++		                       			<collection type="java.util.ArrayList">               
++		                         			<value>                            
++		                           				<object type="org.exoplatform.services.jcr.ext.hierarchy.impl.HierarchyConfig$Permission">
++													  <field name="identity"><string>*:/platform/administrators</string></field>
++						                              <field name="read"><string>true</string></field>                
++						                              <field name="addNode"><string>true</string></field>                
++						                              <field name="setProperty"><string>true</string></field>                
++						                              <field name="remove"><string>true</string></field>                
++		                           				</object>  
++		                        			</value>     
++											<value>                            
++		                           				<object type="org.exoplatform.services.jcr.ext.hierarchy.impl.HierarchyConfig$Permission">
++						                              <field name="identity"><string>any</string></field>
++						                              <field name="read"><string>true</string></field>                
++						                              <field name="addNode"><string>false</string></field>                
++						                              <field name="setProperty"><string>true</string></field>                
++						                              <field name="remove"><string>false</string></field>                
++		                           				</object>  
++		                        			</value>                   
++		                      			</collection>
++		                    		</field>                                   
++	                  			</object>
++	                		</value>
++	             	</collection>  
++	            </field>
++        	</object>
+         </object-param>
+       </init-params>            
+     </component-plugin>
+   </external-component-plugins>
+-  <external-component-plugins>
+-    <target-component>org.exoplatform.services.database.HibernateService</target-component>
+-    <component-plugin> 
+-      <name>add.hibernate.mapping</name>
+-      <set-method>addPlugin</set-method>
+-      <type>org.exoplatform.services.database.impl.AddHibernateMappingPlugin</type>
+-      <init-params>
+-        <values-param>
+-          <name>hibernate.mapping</name>
+-          <value>org/exoplatform/services/organization/impl/UserImpl.hbm.xml</value>
+-          <value>org/exoplatform/services/organization/impl/MembershipImpl.hbm.xml</value>
+-          <value>org/exoplatform/services/organization/impl/GroupImpl.hbm.xml</value>
+-          <value>org/exoplatform/services/organization/impl/MembershipTypeImpl.hbm.xml</value>
+-          <value>org/exoplatform/services/organization/impl/UserProfileData.hbm.xml</value>
+-        </values-param>
+-      </init-params>
+-    </component-plugin>
+-  </external-component-plugins>
+   
+   <external-component-plugins>
+     <target-component>org.exoplatform.services.naming.InitialContextInitializer</target-component>
+@@ -427,204 +216,4 @@
+       </init-params>
+     </component-plugin>        
+   </external-component-plugins>
+-  
+-  <external-component-plugins>
+-    <target-component>org.exoplatform.services.listener.ListenerService</target-component>
+-    <component-plugin>
+-      <name>exo.service.authentication.login</name>
+-      <set-method>addListener</set-method>
+-      <type>org.exoplatform.services.organization.auth.MembershipListener</type>
+-    </component-plugin>
+-  </external-component-plugins>
+-  
+-      
+-  
+-  
+-  <external-component-plugins>
+-    <target-component>org.exoplatform.services.organization.OrganizationService</target-component>    
+-    <component-plugin>
+-      <name>ecm.new.group.event.listener</name>
+-      <set-method>addListenerPlugin</set-method>
+-      <type>org.exoplatform.services.jcr.ext.hierarchy.impl.NewGroupListener</type>
+-      <description>description</description>
+-      <init-params>
+-        <object-param>
+-          <name>configuration></name>
+-          <description>description</description>
+-          <object type="org.exoplatform.services.jcr.ext.hierarchy.impl.HierarchyConfig">
+-            <field  name="repository"><string>repository</string></field>
+-             <field name="workspaces">
+-               <collection type="java.util.ArrayList">
+-                <value><string>collaboration</string></value>                              
+-              </collection>                
+-            </field>            
+-            <field  name="jcrPaths">
+-               <collection type="java.util.ArrayList">
+-                <value>                
+-                   <object type="org.exoplatform.services.jcr.ext.hierarchy.impl.HierarchyConfig$JcrPath">                   
+-                     <field name="alias"><string>groupApplicationData</string></field>
+-                    <field name="path"><string>ApplicationData</string></field>
+-                    <field name="nodeType"><string>nt:unstructured</string></field>
+-                    <field name="permissions">
+-                      <collection type="java.util.ArrayList">               
+-                        <value>                            
+-                          <object type="org.exoplatform.services.jcr.ext.hierarchy.impl.HierarchyConfig$Permission">             
+-                            <field name="identity"><string>*:/platform/administrators</string></field>
+-                            <field name="read"><string>true</string></field>                
+-                            <field name="addNode"><string>true</string></field>                
+-                            <field name="setProperty"><string>true</string></field>                
+-                            <field name="remove"><string>true</string></field>                
+-                          </object>  
+-                        </value>                        
+-                      </collection>
+-                    </field>                                            
+-                  </object>
+-                </value>                                                            
+-               </collection>
+-            </field>            
+-          </object>
+-        </object-param>
+-      </init-params> 
+-    </component-plugin>
+-    <component-plugin>
+-      <name>ecm.new.user.event.listener</name>
+-      <set-method>addListenerPlugin</set-method>
+-      <type>org.exoplatform.services.jcr.ext.hierarchy.impl.NewUserListener</type>
+-      <description>description</description>
+-      <init-params>
+-        <object-param>
+-          <name>configuration</name>
+-          <description>description</description>
+-          <object type="org.exoplatform.services.jcr.ext.hierarchy.impl.HierarchyConfig">
+-            <field  name="repository"><string>repository</string></field>
+-             <field name="workspaces">
+-               <collection type="java.util.ArrayList">
+-                <value><string>collaboration</string></value>                              
+-              </collection>                
+-            </field>            
+-            <field  name="jcrPaths">
+-               <collection type="java.util.ArrayList">
+-                <value>                
+-                   <object type="org.exoplatform.services.jcr.ext.hierarchy.impl.HierarchyConfig$JcrPath">                   
+-                     <field name="alias"><string>userApplicationData</string></field>
+-                    <field name="path"><string>ApplicationData</string></field>
+-                    <field name="nodeType"><string>nt:unstructured</string></field>
+-                    <field name="permissions">
+-                      <collection type="java.util.ArrayList">               
+-                        <value>                            
+-                          <object type="org.exoplatform.services.jcr.ext.hierarchy.impl.HierarchyConfig$Permission">             
+-                            <field name="identity"><string>*:/platform/administrators</string></field>
+-                            <field name="read"><string>true</string></field>                
+-                            <field name="addNode"><string>true</string></field>                
+-                            <field name="setProperty"><string>true</string></field>                
+-                            <field name="remove"><string>true</string></field>                
+-                          </object>  
+-                        </value>                        
+-                      </collection>
+-                    </field>                                            
+-                  </object>
+-                </value>                
+-               </collection>
+-            </field>            
+-          </object>
+-        </object-param>
+-      </init-params>
+-    </component-plugin>
+-  </external-component-plugins>
+-
+-  <external-component-plugins>
+-    <target-component>org.exoplatform.services.organization.OrganizationService</target-component>    
+-    <component-plugin>
+-      <name>ecm.new.group.event.listener</name>
+-      <set-method>addListenerPlugin</set-method>
+-      <type>org.exoplatform.services.jcr.ext.hierarchy.impl.NewGroupListener</type>
+-      <description>description</description>
+-      <init-params>
+-        <object-param>
+-          <name>configuration></name>
+-          <description>description</description>
+-          <object type="org.exoplatform.services.jcr.ext.hierarchy.impl.HierarchyConfig">
+-            <field  name="repository"><string>repository</string></field>
+-             <field name="workspaces">
+-               <collection type="java.util.ArrayList">
+-                <value><string>collaboration</string></value>                              
+-              </collection>                
+-            </field>            
+-            <field  name="jcrPaths">
+-               <collection type="java.util.ArrayList">
+-                <value>                
+-                   <object type="org.exoplatform.services.jcr.ext.hierarchy.impl.HierarchyConfig$JcrPath">                   
+-                     <field name="alias"><string>groupApplicationData</string></field>
+-                    <field name="path"><string>ApplicationData</string></field>
+-                    <field name="nodeType"><string>nt:unstructured</string></field>
+-                    <field name="permissions">
+-                      <collection type="java.util.ArrayList">               
+-                        <value>                            
+-                          <object type="org.exoplatform.services.jcr.ext.hierarchy.impl.HierarchyConfig$Permission">             
+-                            <field name="identity"><string>*:/platform/administrators</string></field>
+-                            <field name="read"><string>true</string></field>                
+-                            <field name="addNode"><string>true</string></field>                
+-                            <field name="setProperty"><string>true</string></field>                
+-                            <field name="remove"><string>true</string></field>                
+-                          </object>  
+-                        </value>                        
+-                      </collection>
+-                    </field>                                            
+-                  </object>
+-                </value>                                                            
+-               </collection>
+-            </field>            
+-          </object>
+-        </object-param>
+-      </init-params> 
+-    </component-plugin>
+-    <component-plugin>
+-      <name>ecm.new.user.event.listener</name>
+-      <set-method>addListenerPlugin</set-method>
+-      <type>org.exoplatform.services.jcr.ext.hierarchy.impl.NewUserListener</type>
+-      <description>description</description>
+-      <init-params>
+-        <object-param>
+-          <name>configuration</name>
+-          <description>description</description>
+-          <object type="org.exoplatform.services.jcr.ext.hierarchy.impl.HierarchyConfig">
+-            <field  name="repository"><string>repository</string></field>
+-             <field name="workspaces">
+-               <collection type="java.util.ArrayList">
+-                <value><string>collaboration</string></value>                              
+-              </collection>                
+-            </field>            
+-            <field  name="jcrPaths">
+-               <collection type="java.util.ArrayList">
+-                <value>                
+-                   <object type="org.exoplatform.services.jcr.ext.hierarchy.impl.HierarchyConfig$JcrPath">                   
+-                     <field name="alias"><string>userApplicationData</string></field>
+-                    <field name="path"><string>ApplicationData</string></field>
+-                    <field name="nodeType"><string>nt:unstructured</string></field>
+-                    <field name="permissions">
+-                      <collection type="java.util.ArrayList">               
+-                        <value>                            
+-                          <object type="org.exoplatform.services.jcr.ext.hierarchy.impl.HierarchyConfig$Permission">             
+-                            <field name="identity"><string>*:/platform/administrators</string></field>
+-                            <field name="read"><string>true</string></field>                
+-                            <field name="addNode"><string>true</string></field>                
+-                            <field name="setProperty"><string>true</string></field>                
+-                            <field name="remove"><string>true</string></field>                
+-                          </object>  
+-                        </value>                        
+-                      </collection>
+-                    </field>                                            
+-                  </object>
+-                </value>                
+-               </collection>
+-            </field>            
+-          </object>
+-        </object-param>
+-      </init-params>
+-    </component-plugin>     
+-  </external-component-plugins>
+-  
+-  
+-    <remove-configuration>org.exoplatform.services.deployment.ContentInitializerService</remove-configuration> 
+-    <remove-configuration>org.exoplatform.services.transaction.ExoTransactionService</remove-configuration> 
+-</configuration>
+\ No newline at end of file
++</configuration>
diff --git a/src/main/java/exoplatform/BookStoreService.java b/src/main/java/exoplatform/BookStoreService.java
index d4b35b2..a9372fb 100644
--- a/src/main/java/exoplatform/BookStoreService.java
+++ b/src/main/java/exoplatform/BookStoreService.java
@@ -16,6 +16,8 @@
  */
 package exoplatform;
 
+import java.util.List;
+
 import javax.jcr.Node;
 
 import exoplatform.entity.User;
@@ -86,4 +88,33 @@ public interface BookStoreService {
    */
   public Node addBook(String bookName, CATEGORY category, String content, String nodePath) throws DuplicateBookException;
   
+  /**
+   * add new author to datastorage
+   * 
+   * @param authorName
+   * @param authorAddress
+   * @param authorPhone
+   * @return
+   */
+  public Node addAuthor(String authorName, String authorAddress, String authorPhone) throws DuplicateBookException;
+  
+  /**
+   * add new user to datastorage
+   * 
+   * @param username
+   * @param password
+   * @param fullname
+   * @param address
+   * @param phone
+   * @param nodes
+   * @return
+   * @throws DuplicateBookException
+   */
+  public Node addUser(String username,
+                      String password,
+                      String fullname,
+                      String address,
+                      String phone,
+                      List<String> nodes) throws DuplicateBookException;
+  
 }
diff --git a/src/main/java/exoplatform/JCRDataStorage.java b/src/main/java/exoplatform/JCRDataStorage.java
index 9f1a9c1..f1af158 100644
--- a/src/main/java/exoplatform/JCRDataStorage.java
+++ b/src/main/java/exoplatform/JCRDataStorage.java
@@ -136,7 +136,7 @@ public class JCRDataStorage {
     SessionProvider sProvider = SessionProvider.createSystemProvider();
     try {
       Node node = getNodeByPath(DEFAULT_PARENT_PATH + DEFAULT_PARENT_BOOK_PATH + "/" + id, sProvider);
-      return createBookByNode(node);
+      return Utils.createBookByNode(node);
     } catch (RepositoryException re) {
       log.error("Can not find this book", re);
       return null;
@@ -155,7 +155,7 @@ public class JCRDataStorage {
     SessionProvider sProvider = SessionProvider.createSystemProvider();
     try {
       Node node = getNodeByPath(DEFAULT_PARENT_PATH + DEFAULT_PARENT_USER_PATH + "/" + id, sProvider);
-      return createUserByNode(node);
+      return Utils.createUserByNode(node);
     } catch (RepositoryException re) {
       log.error("Can not find this user", re);
       return null;
@@ -174,7 +174,7 @@ public class JCRDataStorage {
     SessionProvider sProvider = SessionProvider.createSystemProvider();
     try {
       Node node = getNodeByPath(DEFAULT_PARENT_PATH + DEFAULT_PARENT_AUTHOR_PATH + "/" + id, sProvider);
-      return createAuthorByNode(node);
+      return Utils.createAuthorByNode(node);
     } catch (RepositoryException re) {
       log.error("Can not find this author", re);
       return null;
@@ -305,7 +305,7 @@ public class JCRDataStorage {
       NodeIterator nodes = result.getNodes();
       if (nodes.getSize() > 0) {
         Node node = nodes.nextNode();
-        return createUserByNode(node);
+        return Utils.createUserByNode(node);
       }
       return null;
     } catch (RepositoryException re) {
@@ -335,7 +335,7 @@ public class JCRDataStorage {
       NodeIterator nodes = result.getNodes();
       if (nodes.getSize() > 0) {
         Node node = nodes.nextNode();
-        return createUserByNode(node);
+        return Utils.createUserByNode(node);
       }
       return null;
     } catch (RepositoryException re) {
@@ -366,7 +366,7 @@ public class JCRDataStorage {
       if (nodes.getSize() > 0) {
         Node node = nodes.nextNode();
         PropertyReader reader = new PropertyReader(node);        
-        return createUserByNode(node);
+        return Utils.createUserByNode(node);
       }
       return null;
     } catch (RepositoryException re) {
@@ -397,7 +397,7 @@ public class JCRDataStorage {
       NodeIterator nodes = result.getNodes();
       if (nodes.getSize() > 0) {
         Node node = nodes.nextNode();
-        return createUserByNode(node);
+        return Utils.createUserByNode(node);
       }
       return null;
     } catch (RepositoryException re) {
@@ -426,7 +426,7 @@ public class JCRDataStorage {
       NodeIterator nodes = result.getNodes();
       if (nodes.getSize() > 0) {
         Node node = nodes.nextNode();
-        return createUserByNode(node);
+        return Utils.createUserByNode(node);
       }
       return null;
     } catch (RepositoryException re) {
@@ -516,7 +516,7 @@ public class JCRDataStorage {
       List<Book> books = new ArrayList<Book>();
       while (nodes.hasNext()) {
         Node node = nodes.nextNode();
-        books.add(createBookByNode(node));
+        books.add(Utils.createBookByNode(node));
       }
       return books;
     } catch (RepositoryException re) {
@@ -552,7 +552,7 @@ public class JCRDataStorage {
       List<Book> books = new ArrayList<Book>();
       while (nodes.hasNext()) {
         Node node = nodes.nextNode();
-        Book book = createBookByNode(node);
+        Book book = Utils.createBookByNode(node);
         books.add(book);
       }
       return books;
@@ -589,7 +589,7 @@ public class JCRDataStorage {
       List<Book> books = new ArrayList<Book>();
       while (nodes.hasNext()) {
         Node node = nodes.nextNode();
-        books.add(createBookByNode(node));
+        books.add(Utils.createBookByNode(node));
       }
       return books;
     } catch (RepositoryException re) {
@@ -628,7 +628,7 @@ public class JCRDataStorage {
       List<Book> books = new ArrayList<Book>();
       while (nodes.hasNext()) {
         Node node = nodes.nextNode();
-        books.add(createBookByNode(node));
+        books.add(Utils.createBookByNode(node));
       }
       return books;
     } catch (RepositoryException re) {
@@ -664,7 +664,7 @@ public class JCRDataStorage {
       List<Book> books = new ArrayList<Book>();
       while (nodes.hasNext()) {
         Node node = nodes.nextNode();
-        books.add(createBookByNode(node));        
+        books.add(Utils.createBookByNode(node));        
       }
       return books;
     } catch (RepositoryException re) {
@@ -700,7 +700,7 @@ public class JCRDataStorage {
       List<Book> books = new ArrayList<Book>();
       while (nodes.hasNext()) {
         Node node = nodes.nextNode();
-        books.add(createBookByNode(node));        
+        books.add(Utils.createBookByNode(node));        
       }
       return books;
     } catch (RepositoryException re) {
@@ -786,80 +786,4 @@ public class JCRDataStorage {
     }
   }
   
-  /**
-   * Create book by node data
-   * 
-   * @param node
-   * @return
-   * @throws RepositoryException
-   */
-  private Book createBookByNode(Node node) throws RepositoryException {
-    if (node != null) {
-      Book book = new Book();
-      try {
-        book.setBookId(Integer.valueOf(node.getName()));
-      } catch (Exception e) {
-        return null;
-      }
-      PropertyReader reader = new PropertyReader(node);
-      book.setCategory(Utils.bookCategoryStringToEnum(reader.string(BookNodeTypes.EXO_BOOK_CATEGORY)));
-      book.setName(reader.string(BookNodeTypes.EXO_BOOK_NAME));
-      book.setContent(reader.string(BookNodeTypes.EXO_BOOK_CONTENT));
-      return book;
-    }
-    return null;
-  }
-  
-  /**
-   * Create user by node data
-   * 
-   * @param node
-   * @return
-   * @throws RepositoryException
-   */
-  private User createUserByNode(Node node) throws RepositoryException {
-    if (node != null) {
-      User user = new User();
-      try {
-        user.setUserId(Integer.valueOf(node.getName()));
-      } catch (RepositoryException re) {
-        log.error("Error in convert integer", re);
-        return null;
-      }
-      PropertyReader reader = new PropertyReader(node);
-      user.setUsername(reader.string(BookNodeTypes.EXO_USER_NAME));
-      user.setPassword(reader.string(BookNodeTypes.EXO_USER_PASSWORD));
-      user.setFullname(reader.string(BookNodeTypes.EXO_USER_FULLNAME));
-      user.setAddress(reader.string(BookNodeTypes.EXO_USER_ADDRESS));
-      user.setPhone(reader.string(BookNodeTypes.EXO_USER_PHONE));
-      return user;
-    }
-    return null;
-  }
-  
-  /**
-   * Create author by node data
-   * 
-   * @param node
-   * @return
-   * @throws RepositoryException
-   */
-  private Author createAuthorByNode(Node node) throws RepositoryException {
-    if (node != null) {
-      Author author = new Author();
-      try {
-        author.setAuthorId(Integer.valueOf(node.getName()));
-      } catch (RepositoryException re) {
-        log.error("Error in convert integer", re);
-        return null;
-      }
-      PropertyReader reader = new PropertyReader(node);
-      author.setName(reader.string(BookNodeTypes.EXO_AUTHOR_NAME));
-      author.setPhone(reader.string(BookNodeTypes.EXO_AUTHOR_PHONE));
-      author.setAddress(reader.string(BookNodeTypes.EXO_AUTHOR_ADDRESS));
-      return author;
-    }
-    return null;
-  }
-  
 }
diff --git a/src/main/java/exoplatform/rest/BookStoreRestService.java b/src/main/java/exoplatform/rest/BookStoreRestService.java
new file mode 100644
index 0000000..3456065
--- /dev/null
+++ b/src/main/java/exoplatform/rest/BookStoreRestService.java
@@ -0,0 +1,118 @@
+/*
+ * Copyright (C) 2003-2012 eXo Platform SAS.
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program. If not, see <http://www.gnu.org/licenses/>.
+ */
+package exoplatform.rest;
+
+import javax.annotation.security.RolesAllowed;
+import javax.jcr.Node;
+import javax.jcr.RepositoryException;
+import javax.ws.rs.GET;
+import javax.ws.rs.POST;
+import javax.ws.rs.Path;
+import javax.ws.rs.PathParam;
+import javax.ws.rs.Produces;
+import javax.ws.rs.core.CacheControl;
+import javax.ws.rs.core.MediaType;
+import javax.ws.rs.core.Response;
+import javax.ws.rs.core.Response.Status;
+
+import org.exoplatform.services.log.ExoLogger;
+import org.exoplatform.services.log.Log;
+import org.exoplatform.services.rest.resource.ResourceContainer;
+
+import com.sun.corba.se.impl.javax.rmi.CORBA.Util;
+
+import exoplatform.BookStoreService;
+import exoplatform.entity.Author;
+import exoplatform.entity.User;
+import exoplatform.exception.DuplicateBookException;
+import exoplatform.utils.Utils;
+
+/**
+ * Created by The eXo Platform SAS
+ * Author : BinhNV
+ *          binhnv@exoplatform.com
+ * Jul 20, 2012  
+ */
+
+@Path("/bookstore")
+public class BookStoreRestService implements ResourceContainer {
+
+  private static final Log log = ExoLogger.getLogger(BookStoreRestService.class);
+  private static final CacheControl cc;
+  private BookStoreService service;
+  
+  static {
+    cc = new CacheControl();
+    cc.setNoCache(true);
+    cc.setNoStore(true);
+  }
+  
+  /**
+   * 
+   */
+  public BookStoreRestService(BookStoreService service) {
+    this.service = service;
+  }
+
+  /**
+   * get user by name with sql statement
+   * 
+   * @param username
+   * @return
+   */
+  @GET
+  @RolesAllowed("users")
+  @Path("/getUserByName/{username}")
+  @Produces(MediaType.APPLICATION_JSON)
+  public Response getUserByNameSQL(@PathParam("username") String username) {
+    User user = service.getUserByNameSQL(username);
+    if (user == null) {
+      return Response.status(Status.NO_CONTENT).build();
+    }
+    return Response.ok(user, MediaType.APPLICATION_JSON).cacheControl(cc).build();
+  }
+  
+  /**
+   * add new author to datastorage
+   * 
+   * @param authorName
+   * @param authorAddress
+   * @param authorPhone
+   * @return
+   */
+  @POST
+  @RolesAllowed("users")
+  @Path("/addAuthor")
+  @Produces(MediaType.APPLICATION_JSON)
+  public Response addAuthor(@PathParam("authorName")
+            String authorName, @PathParam("authorAddress")
+            String authorAddress, @PathParam("authorPhone")
+            String authorPhone) {
+    try {
+      Node authorNode = service.addAuthor(authorName, authorAddress, authorPhone);
+      Author author = Utils.createAuthorByNode(authorNode);
+      return Response.ok(author, MediaType.APPLICATION_JSON).cacheControl(cc).build();
+    } catch (RepositoryException re) {
+      log.error("Can not add author", re);
+      return Response.status(Status.BAD_REQUEST).build();
+    } catch (DuplicateBookException de) {
+      log.error("Can not add author", de);
+      return Response.status(Status.BAD_REQUEST).build();
+    }
+  }
+  
+}
diff --git a/src/main/java/exoplatform/utils/Utils.java b/src/main/java/exoplatform/utils/Utils.java
index d3fe4d8..7158b2c 100644
--- a/src/main/java/exoplatform/utils/Utils.java
+++ b/src/main/java/exoplatform/utils/Utils.java
@@ -16,7 +16,13 @@
  */
 package exoplatform.utils;
 
+import javax.jcr.Node;
+import javax.jcr.RepositoryException;
+
+import exoplatform.BookNodeTypes;
+import exoplatform.entity.Author;
 import exoplatform.entity.Book;
+import exoplatform.entity.User;
 
 /**
  * Created by The eXo Platform SAS
@@ -70,4 +76,78 @@ public class Utils {
     return category != null ? Book.CATEGORY.valueOf(category) : null;
   }
   
+  /**
+   * Create book by node data
+   * 
+   * @param node
+   * @return
+   * @throws RepositoryException
+   */
+  public static Book createBookByNode(Node node) throws RepositoryException {
+    if (node != null) {
+      Book book = new Book();
+      try {
+        book.setBookId(Integer.valueOf(node.getName()));
+      } catch (Exception e) {
+        return null;
+      }
+      PropertyReader reader = new PropertyReader(node);
+      book.setCategory(Utils.bookCategoryStringToEnum(reader.string(BookNodeTypes.EXO_BOOK_CATEGORY)));
+      book.setName(reader.string(BookNodeTypes.EXO_BOOK_NAME));
+      book.setContent(reader.string(BookNodeTypes.EXO_BOOK_CONTENT));
+      return book;
+    }
+    return null;
+  }
+  
+  /**
+   * Create user by node data
+   * 
+   * @param node
+   * @return
+   * @throws RepositoryException
+   */
+  public static User createUserByNode(Node node) throws RepositoryException {
+    if (node != null) {
+      User user = new User();
+      try {
+        user.setUserId(Integer.valueOf(node.getName()));
+      } catch (RepositoryException re) {
+        return null;
+      }
+      PropertyReader reader = new PropertyReader(node);
+      user.setUsername(reader.string(BookNodeTypes.EXO_USER_NAME));
+      user.setPassword(reader.string(BookNodeTypes.EXO_USER_PASSWORD));
+      user.setFullname(reader.string(BookNodeTypes.EXO_USER_FULLNAME));
+      user.setAddress(reader.string(BookNodeTypes.EXO_USER_ADDRESS));
+      user.setPhone(reader.string(BookNodeTypes.EXO_USER_PHONE));
+      return user;
+    }
+    return null;
+  }
+  
+  /**
+   * Create author by node data
+   * 
+   * @param node
+   * @return
+   * @throws RepositoryException
+   */
+  public static Author createAuthorByNode(Node node) throws RepositoryException {
+    if (node != null) {
+      Author author = new Author();
+      try {
+        author.setAuthorId(Integer.valueOf(node.getName()));
+      } catch (RepositoryException re) {
+        return null;
+      }
+      PropertyReader reader = new PropertyReader(node);
+      author.setName(reader.string(BookNodeTypes.EXO_AUTHOR_NAME));
+      author.setPhone(reader.string(BookNodeTypes.EXO_AUTHOR_PHONE));
+      author.setAddress(reader.string(BookNodeTypes.EXO_AUTHOR_ADDRESS));
+      return author;
+    }
+    return null;
+  }
+  
 }
diff --git a/src/main/resources/conf/portal/bookstore-configuration.xml b/src/main/resources/conf/portal/bookstore-configuration.xml
index eb1fe54..77b4a5d 100644
--- a/src/main/resources/conf/portal/bookstore-configuration.xml
+++ b/src/main/resources/conf/portal/bookstore-configuration.xml
@@ -9,5 +9,10 @@
 	    <key>exoplatform.BookStoreService</key>
 	    <type>exoplatform.BookStoreServiceImpl</type>
     </component>
+    
+	<component>
+		<key>exoplatform.rest.BookStoreRestService</key>
+    	<type>exoplatform.rest.BookStoreRestService</type>
+  	</component>
 
 </configuration>
\ No newline at end of file
diff --git a/src/test/java/exoplatform/BookStoreTest.java b/src/test/java/exoplatform/BookStoreTest.java
index f56a4c3..e5352a6 100644
--- a/src/test/java/exoplatform/BookStoreTest.java
+++ b/src/test/java/exoplatform/BookStoreTest.java
@@ -16,11 +16,29 @@
  */
 package exoplatform;
 
+import java.io.ByteArrayInputStream;
+import java.net.URI;
+
+import javax.servlet.http.HttpServletRequest;
+import javax.ws.rs.core.MultivaluedMap;
+
 import junit.framework.TestCase;
 
 import org.exoplatform.container.StandaloneContainer;
+import org.exoplatform.container.component.RequestLifeCycle;
+import org.exoplatform.services.rest.ContainerResponseWriter;
+import org.exoplatform.services.rest.RequestHandler;
+import org.exoplatform.services.rest.impl.ContainerRequest;
+import org.exoplatform.services.rest.impl.ContainerResponse;
+import org.exoplatform.services.rest.impl.EnvironmentContext;
+import org.exoplatform.services.rest.impl.InputHeadersMap;
+import org.exoplatform.services.rest.impl.MultivaluedMapImpl;
+import org.exoplatform.services.rest.impl.RequestHandlerImpl;
+import org.exoplatform.services.rest.tools.ByteArrayContainerResponseWriter;
 
 import exoplatform.entity.User;
+import exoplatform.exception.DuplicateBookException;
+import exoplatform.rest.BookStoreRestService;
 
 /**
  * Created by The eXo Platform SAS
@@ -30,8 +48,12 @@ import exoplatform.entity.User;
  */
 public class BookStoreTest extends TestCase {
   
+  private static BookStoreRestService restService;
   private static BookStoreService service;
   private static StandaloneContainer container;
+  private static RequestHandler requestHandler;
+  
+  static final String baseURI = "";
   
   static {
     initContainer();
@@ -47,6 +69,8 @@ public class BookStoreTest extends TestCase {
       StandaloneContainer.addConfigurationURL(configFile);
       container = StandaloneContainer.getInstance();
       service = (BookStoreService) container.getComponentInstanceOfType(BookStoreService.class);
+      requestHandler = (RequestHandler) container.getComponentInstanceOfType(RequestHandler.class);
+      restService = (BookStoreRestService) container.getComponentInstanceOfType(BookStoreRestService.class);
     } catch (Exception e) {
       throw new RuntimeException("fail to initialize container: " + e.getMessage(), e);
     }
@@ -112,4 +136,87 @@ public class BookStoreTest extends TestCase {
     assertNotNull(user);
   }
   
+  /**
+   * add new author to datastorage
+   * 
+   * @param authorName
+   * @param authorAddress
+   * @param authorPhone
+   * @return
+   */
+  public void testAddAuthor() throws DuplicateBookException {
+    
+  }
+  
+  /**
+   * add new user
+   * 
+   * @param user
+   * @param nodes
+   * @return
+   * @throws DuplicateBookException
+   */
+  public void testAddUser() throws DuplicateBookException {
+    
+  }
+  
+  /**
+   * get user by name with sql statement
+   * 
+   * @param username
+   * @return
+   */
+  public void testWSGetUserByNameSQL() {
+    
+    String username = "binhnv";
+    String extURI = "/rest/private/bookstore/getUserByName/" + username;
+    
+    MultivaluedMap<String, String> values = new MultivaluedMapImpl();
+    values.putSingle("username", username);
+    ByteArrayContainerResponseWriter writer = new ByteArrayContainerResponseWriter();
+    try {
+      ContainerResponse response = service("GET", extURI, baseURI, values, null, writer);
+      System.out.println("+ ================================================= +");
+      System.out.println("+ ================ " + response.getEntity() + " ================ +");
+      System.out.println("+ ================================================= +");
+    } catch (Exception e) {
+      e.printStackTrace();
+    }
+    
+  }
+  
+  private ContainerResponse service(String method,
+                                    String requestURI,
+                                    String baseURI,
+                                    MultivaluedMap<String, String> headers,
+                                    byte[] data,
+                                    ContainerResponseWriter writer) throws Exception {
+     RequestLifeCycle.begin(container);
+     if (headers == null) {
+       headers = new MultivaluedMapImpl();
+     }
+
+     ByteArrayInputStream in = null;
+     if (data != null) {
+       in = new ByteArrayInputStream(data);
+     }
+
+     EnvironmentContext envctx = new EnvironmentContext();
+     HttpServletRequest httpRequest = new MockHttpServletRequest(in,
+                                                                 in != null ? in.available() : 0,
+                                                                 method,
+                                                                 new InputHeadersMap(headers));
+     envctx.put(HttpServletRequest.class, httpRequest);
+     EnvironmentContext.setCurrent(envctx);
+     ContainerRequest request = new ContainerRequest(method,
+                                                     new URI(requestURI),
+                                                     new URI(baseURI),
+                                                     in,
+                                                     new InputHeadersMap(headers));
+     ContainerResponse response = new ContainerResponse(writer);
+     requestHandler.handleRequest(request, response);
+     RequestLifeCycle.end();
+     return response;
+   }
+  
 }
diff --git a/src/test/java/exoplatform/MockHttpServletRequest.java b/src/test/java/exoplatform/MockHttpServletRequest.java
new file mode 100644
index 0000000..2ab918e
--- /dev/null
+++ b/src/test/java/exoplatform/MockHttpServletRequest.java
@@ -0,0 +1,308 @@
+/**
+ * Copyright (C) 2003-2008 eXo Platform SAS.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Affero General Public License
+ * as published by the Free Software Foundation; either version 3
+ * of the License, or (at your option) any later version.
+ * 
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ * 
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, see<http://www.gnu.org/licenses/>.
+ */
+
+package exoplatform;
+
+import java.io.BufferedReader;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.UnsupportedEncodingException;
+import java.security.Principal;
+import java.util.Enumeration;
+import java.util.Iterator;
+import java.util.Locale;
+import java.util.Map;
+
+import javax.servlet.RequestDispatcher;
+import javax.servlet.ServletInputStream;
+import javax.servlet.http.Cookie;
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpSession;
+import javax.ws.rs.core.MultivaluedMap;
+
+/**
+ * @author <a href="mailto:andrew00x@gmail.com">Andrey Parfonov</a>
+ * @version $Id: $
+ */
+@SuppressWarnings("unchecked")
+public class MockHttpServletRequest implements HttpServletRequest {
+
+  private String                         method;
+
+  private int                            length;
+
+  private InputStream                    data;
+
+  private MultivaluedMap<String, String> headers;
+
+  public MockHttpServletRequest(InputStream data,
+                                int length,
+                                String method,
+                                MultivaluedMap<String, String> headers) {
+    this.data = data;
+    this.length = length;
+    this.method = method;
+    this.headers = headers;
+  }
+
+  public String getAuthType() {
+    return null;
+  }
+
+  public String getContextPath() {
+    return "test";
+  }
+
+  public Cookie[] getCookies() {
+    return null;
+  }
+
+  public long getDateHeader(String arg0) {
+    return 0;
+  }
+
+  public String getHeader(String arg0) {
+    return headers.getFirst(arg0);
+  }
+
+  public Enumeration getHeaderNames() {
+    return new EnumerationImpl(headers.keySet().iterator());
+  }
+
+  public Enumeration getHeaders(String arg0) {
+    return new EnumerationImpl(headers.get(arg0).iterator());
+  }
+
+  public int getIntHeader(String arg0) {
+    return 0;
+  }
+
+  public String getMethod() {
+    return method;
+  }
+
+  public String getPathInfo() {
+    return null;
+  }
+
+  public String getPathTranslated() {
+    return null;
+  }
+
+  public String getQueryString() {
+    return null;
+  }
+
+  public String getRemoteUser() {
+    return null;
+  }
+
+  public String getRequestURI() {
+    return null;
+  }
+
+  public StringBuffer getRequestURL() {
+    return null;
+  }
+
+  public String getRequestedSessionId() {
+    return null;
+  }
+
+  public String getServletPath() {
+    return null;
+  }
+
+  public HttpSession getSession() {
+    return null;
+  }
+
+  public HttpSession getSession(boolean arg0) {
+    return null;
+  }
+
+  public Principal getUserPrincipal() {
+    return null;
+  }
+
+  public boolean isRequestedSessionIdFromCookie() {
+    return false;
+  }
+
+  public boolean isRequestedSessionIdFromURL() {
+    return false;
+  }
+
+  public boolean isRequestedSessionIdFromUrl() {
+    return false;
+  }
+
+  public boolean isRequestedSessionIdValid() {
+    return false;
+  }
+
+  public boolean isUserInRole(String arg0) {
+    return false;
+  }
+
+  public Object getAttribute(String arg0) {
+    return null;
+  }
+
+  public Enumeration getAttributeNames() {
+    return null;
+  }
+
+  public String getCharacterEncoding() {
+    return null;
+  }
+
+  public int getContentLength() {
+    return length;
+  }
+
+  public String getContentType() {
+    return headers.getFirst("content-type");
+  }
+
+  public ServletInputStream getInputStream() throws IOException {
+    return new MockServletInputStream(data);
+  }
+
+  public Locale getLocale() {
+    return null;
+  }
+
+  public Enumeration getLocales() {
+    return null;
+  }
+
+  public String getParameter(String arg0) {
+    return null;
+  }
+
+  public Map getParameterMap() {
+    return null;
+  }
+
+  public Enumeration getParameterNames() {
+    return null;
+  }
+
+  public String[] getParameterValues(String arg0) {
+    return null;
+  }
+
+  public String getProtocol() {
+    return null;
+  }
+
+  public BufferedReader getReader() throws IOException {
+    return null;
+  }
+
+  public String getRealPath(String arg0) {
+    return null;
+  }
+
+  public String getRemoteAddr() {
+    return null;
+  }
+
+  public String getRemoteHost() {
+    return null;
+  }
+
+  public RequestDispatcher getRequestDispatcher(String arg0) {
+    return null;
+  }
+
+  public String getScheme() {
+    return null;
+  }
+
+  public String getServerName() {
+    return null;
+  }
+
+  public int getServerPort() {
+    return 0;
+  }
+
+  public boolean isSecure() {
+    return false;
+  }
+
+  public void removeAttribute(String arg0) {
+  }
+
+  public void setAttribute(String arg0, Object arg1) {
+  }
+
+  public void setCharacterEncoding(String arg0) throws UnsupportedEncodingException {
+  }
+
+public String getLocalAddr() {
+  return null;
+}
+
+public String getLocalName() {
+  return null;
+}
+
+public int getLocalPort() {
+  return 0;
+}
+
+public int getRemotePort() {
+  return 0;
+}
+
+}
+
+@SuppressWarnings("unchecked")
+class EnumerationImpl implements Enumeration {
+
+  private final Iterator iter;
+
+  public EnumerationImpl(Iterator iter) {
+    this.iter = iter;
+  }
+
+  public boolean hasMoreElements() {
+    return iter.hasNext();
+  }
+
+  public Object nextElement() {
+    return iter.next();
+  }
+}
+
+class MockServletInputStream extends ServletInputStream {
+
+  private final InputStream data;
+
+  public MockServletInputStream(InputStream data) {
+    this.data = data;
+  }
+
+  @Override
+  public int read() throws IOException {
+    return data.read();
+  }
+
+}
diff --git a/src/test/resources/conf/portal/test-configuration.xml b/src/test/resources/conf/portal/test-configuration.xml
index 38a64ec..0e74ed9 100644
--- a/src/test/resources/conf/portal/test-configuration.xml
+++ b/src/test/resources/conf/portal/test-configuration.xml
@@ -48,6 +48,11 @@
     <type>exoplatform.BookStoreServiceImpl</type>
   </component>
   
+  <component>
+	<key>exoplatform.rest.BookStoreRestService</key>
+    <type>exoplatform.rest.BookStoreRestService</type>
+  </component>
+  
   <external-component-plugins>
     <target-component>org.exoplatform.services.jcr.ext.hierarchy.NodeHierarchyCreator</target-component>
     <component-plugin>
