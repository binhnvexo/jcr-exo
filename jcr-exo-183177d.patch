commit 183177d7dc2f8938ea39abdb6aa496a2560ff0e2
Author: BinhNV <binhnv@exoplatform.com>
Date:   Fri Jul 13 15:38:39 2012 +0700

    add jcr-exo within exo gatein portal environment

diff --git a/.classpath b/.classpath
new file mode 100644
index 0000000..9d7da80
--- /dev/null
+++ b/.classpath
@@ -0,0 +1,152 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<classpath>
+	<classpathentry including="**/*.java" kind="src" output="target/test-classes" path="src/test/java"/>
+	<classpathentry including="**/*.java" kind="src" path="src/main/java"/>
+	<classpathentry kind="src" path="src/main/resources"/>
+	<classpathentry kind="var" path="M2_REPO/javax/portlet/portlet-api/2.0/portlet-api-2.0.jar" sourcepath="M2_REPO/javax/portlet/portlet-api/2.0/portlet-api-2.0-sources.jar">
+		<attributes>
+			<attribute name="javadoc_location" value="jar:file:/home/binhnv/java/exo-dependencies/repository/javax/portlet/portlet-api/2.0/portlet-api-2.0-javadoc.jar!/"/>
+		</attributes>
+	</classpathentry>
+	<classpathentry kind="var" path="M2_REPO/javax/faces/jsf-api/1.2_13/jsf-api-1.2_13.jar" sourcepath="M2_REPO/javax/faces/jsf-api/1.2_13/jsf-api-1.2_13-sources.jar">
+		<attributes>
+			<attribute name="javadoc_location" value="jar:file:/home/binhnv/java/exo-dependencies/repository/javax/faces/jsf-api/1.2_13/jsf-api-1.2_13-javadoc.jar!/"/>
+		</attributes>
+	</classpathentry>
+	<classpathentry kind="var" path="M2_REPO/javax/servlet/servlet-api/2.4/servlet-api-2.4.jar" sourcepath="M2_REPO/javax/servlet/servlet-api/2.4/servlet-api-2.4-sources.jar"/>
+	<classpathentry kind="var" path="M2_REPO/javax/activation/activation/1.1.1/activation-1.1.1.jar" sourcepath="M2_REPO/javax/activation/activation/1.1.1/activation-1.1.1-sources.jar"/>
+	<classpathentry kind="var" path="M2_REPO/javax/transaction/jta/1.1/jta-1.1.jar" sourcepath="M2_REPO/javax/transaction/jta/1.1/jta-1.1-sources.jar"/>
+	<classpathentry kind="var" path="M2_REPO/javax/mail/mail/1.4.4/mail-1.4.4.jar" sourcepath="M2_REPO/javax/mail/mail/1.4.4/mail-1.4.4-sources.jar"/>
+	<classpathentry kind="var" path="M2_REPO/javax/jcr/jcr/1.0/jcr-1.0.jar" sourcepath="M2_REPO/javax/jcr/jcr/1.0/jcr-1.0-sources.jar"/>
+	<classpathentry kind="var" path="M2_REPO/javax/xml/stream/stax-api/1.0-2/stax-api-1.0-2.jar" sourcepath="M2_REPO/javax/xml/stream/stax-api/1.0-2/stax-api-1.0-2-sources.jar"/>
+	<classpathentry kind="var" path="M2_REPO/javax/resource/connector-api/1.5/connector-api-1.5.jar" sourcepath="M2_REPO/javax/resource/connector-api/1.5/connector-api-1.5-sources.jar"/>
+	<classpathentry kind="var" path="M2_REPO/javax/xml/bind/jaxb-api/2.1/jaxb-api-2.1.jar" sourcepath="M2_REPO/javax/xml/bind/jaxb-api/2.1/jaxb-api-2.1-sources.jar"/>
+	<classpathentry kind="var" path="M2_REPO/javax/ws/rs/jsr311-api/1.0/jsr311-api-1.0.jar" sourcepath="M2_REPO/javax/ws/rs/jsr311-api/1.0/jsr311-api-1.0-sources.jar"/>
+	<classpathentry kind="var" path="M2_REPO/javax/inject/javax.inject/1/javax.inject-1.jar" sourcepath="M2_REPO/javax/inject/javax.inject/1/javax.inject-1-sources.jar"/>
+	<classpathentry kind="var" path="M2_REPO/javax/annotation/jsr250-api/1.0/jsr250-api-1.0.jar" sourcepath="M2_REPO/javax/annotation/jsr250-api/1.0/jsr250-api-1.0-sources.jar"/>
+	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER"/>
+	<classpathentry kind="var" path="M2_REPO/org/hsqldb/hsqldb/2.0.0/hsqldb-2.0.0.jar"/>
+	<classpathentry kind="var" path="M2_REPO/org/exoplatform/jcr/exo.jcr.component.ext/1.14.0-CR2/exo.jcr.component.ext-1.14.0-CR2.jar"/>
+	<classpathentry kind="var" path="M2_REPO/org/exoplatform/kernel/exo.kernel.commons/2.3.0-CR2/exo.kernel.commons-2.3.0-CR2.jar"/>
+	<classpathentry kind="var" path="M2_REPO/xpp3/xpp3/1.1.4c/xpp3-1.1.4c.jar" sourcepath="M2_REPO/xpp3/xpp3/1.1.4c/xpp3-1.1.4c-sources.jar"/>
+	<classpathentry kind="var" path="M2_REPO/commons-logging/commons-logging/1.1.1/commons-logging-1.1.1.jar" sourcepath="M2_REPO/commons-logging/commons-logging/1.1.1/commons-logging-1.1.1-sources.jar">
+		<attributes>
+			<attribute name="javadoc_location" value="jar:file:/home/binhnv/java/exo-dependencies/repository/commons-logging/commons-logging/1.1.1/commons-logging-1.1.1-javadoc.jar!/"/>
+		</attributes>
+	</classpathentry>
+	<classpathentry kind="var" path="M2_REPO/org/slf4j/slf4j-api/1.5.8/slf4j-api-1.5.8.jar" sourcepath="M2_REPO/org/slf4j/slf4j-api/1.5.8/slf4j-api-1.5.8-sources.jar"/>
+	<classpathentry kind="var" path="M2_REPO/org/exoplatform/kernel/exo.kernel.container/2.3.0-CR2/exo.kernel.container-2.3.0-CR2.jar"/>
+	<classpathentry kind="var" path="M2_REPO/org/exoplatform/tool/exo.tool.framework.junit/1.2.1-GA/exo.tool.framework.junit-1.2.1-GA.jar" sourcepath="M2_REPO/org/exoplatform/tool/exo.tool.framework.junit/1.2.1-GA/exo.tool.framework.junit-1.2.1-GA-sources.jar"/>
+	<classpathentry kind="var" path="M2_REPO/junit/junit/3.8.1/junit-3.8.1.jar" sourcepath="M2_REPO/junit/junit/3.8.1/junit-3.8.1-sources.jar"/>
+	<classpathentry kind="var" path="M2_REPO/picocontainer/picocontainer/1.1/picocontainer-1.1.jar"/>
+	<classpathentry kind="var" path="M2_REPO/jmock/jmock/1.0.1/jmock-1.0.1.jar" sourcepath="M2_REPO/jmock/jmock/1.0.1/jmock-1.0.1-sources.jar">
+		<attributes>
+			<attribute name="javadoc_location" value="jar:file:/home/binhnv/java/exo-dependencies/repository/jmock/jmock/1.0.1/jmock-1.0.1-javadoc.jar!/"/>
+		</attributes>
+	</classpathentry>
+	<classpathentry kind="var" path="M2_REPO/xstream/xstream/1.0.2/xstream-1.0.2.jar"/>
+	<classpathentry kind="var" path="M2_REPO/commons-beanutils/commons-beanutils/1.8.3/commons-beanutils-1.8.3.jar" sourcepath="M2_REPO/commons-beanutils/commons-beanutils/1.8.3/commons-beanutils-1.8.3-sources.jar"/>
+	<classpathentry kind="var" path="M2_REPO/org/jibx/jibx-run/1.2.2/jibx-run-1.2.2.jar"/>
+	<classpathentry kind="var" path="M2_REPO/org/jibx/jibx-bind/1.2.2/jibx-bind-1.2.2.jar"/>
+	<classpathentry kind="var" path="M2_REPO/bcel/bcel/5.1/bcel-5.1.jar" sourcepath="M2_REPO/bcel/bcel/5.1/bcel-5.1-sources.jar"/>
+	<classpathentry kind="var" path="M2_REPO/regexp/regexp/1.2/regexp-1.2.jar"/>
+	<classpathentry kind="var" path="M2_REPO/org/jibx/jibx-extras/1.2.2/jibx-extras-1.2.2.jar"/>
+	<classpathentry kind="var" path="M2_REPO/org/exoplatform/kernel/exo.kernel.component.command/2.3.0-CR2/exo.kernel.component.command-2.3.0-CR2.jar"/>
+	<classpathentry kind="var" path="M2_REPO/commons-chain/commons-chain/1.2/commons-chain-1.2.jar" sourcepath="M2_REPO/commons-chain/commons-chain/1.2/commons-chain-1.2-sources.jar"/>
+	<classpathentry kind="var" path="M2_REPO/commons-digester/commons-digester/1.8.1/commons-digester-1.8.1.jar" sourcepath="M2_REPO/commons-digester/commons-digester/1.8.1/commons-digester-1.8.1-sources.jar"/>
+	<classpathentry kind="var" path="M2_REPO/xml-apis/xml-apis/1.0.b2/xml-apis-1.0.b2.jar" sourcepath="M2_REPO/xml-apis/xml-apis/1.0.b2/xml-apis-1.0.b2-sources.jar"/>
+	<classpathentry kind="var" path="M2_REPO/org/exoplatform/core/exo.core.component.database/2.4.0-CR2/exo.core.component.database-2.4.0-CR2.jar"/>
+	<classpathentry kind="var" path="M2_REPO/org/exoplatform/kernel/exo.kernel.component.common/2.3.0-CR2/exo.kernel.component.common-2.3.0-CR2.jar"/>
+	<classpathentry kind="var" path="M2_REPO/org/ow2/jotm/jotm-core/2.1.9/jotm-core-2.1.9.jar"/>
+	<classpathentry kind="var" path="M2_REPO/org/ow2/spec/ee/ow2-jta-1.1-spec/1.0-M1/ow2-jta-1.1-spec-1.0-M1.jar"/>
+	<classpathentry kind="var" path="M2_REPO/org/ow2/carol/carol/3.0.6/carol-3.0.6.jar"/>
+	<classpathentry kind="var" path="M2_REPO/org/ow2/carol/carol-interceptors/1.0.1/carol-interceptors-1.0.1.jar"/>
+	<classpathentry kind="var" path="M2_REPO/org/ow2/carol/irmi/irmi/1.1.2/irmi-1.1.2.jar"/>
+	<classpathentry kind="var" path="M2_REPO/commons-collections/commons-collections/3.2.1/commons-collections-3.2.1.jar" sourcepath="M2_REPO/commons-collections/commons-collections/3.2.1/commons-collections-3.2.1-sources.jar"/>
+	<classpathentry kind="var" path="M2_REPO/org/jacorb/jacorb/2.2.3-jonas-patch-20071018/jacorb-2.2.3-jonas-patch-20071018.jar"/>
+	<classpathentry kind="var" path="M2_REPO/avalon-framework/avalon-framework/4.1.5/avalon-framework-4.1.5.jar"/>
+	<classpathentry kind="var" path="M2_REPO/org/jacorb/jacorb-idl/2.2.3-jonas-patch-20071018/jacorb-idl-2.2.3-jonas-patch-20071018.jar"/>
+	<classpathentry kind="var" path="M2_REPO/logkit/logkit/1.2/logkit-1.2.jar"/>
+	<classpathentry kind="var" path="M2_REPO/commons-logging/commons-logging-api/1.1/commons-logging-api-1.1.jar"/>
+	<classpathentry kind="var" path="M2_REPO/org/objectweb/howl/howl/1.0.1-1/howl-1.0.1-1.jar"/>
+	<classpathentry kind="var" path="M2_REPO/org/quartz-scheduler/quartz/1.8.4/quartz-1.8.4.jar"/>
+	<classpathentry kind="var" path="M2_REPO/org/jgroups/jgroups/2.11.1.Final/jgroups-2.11.1.Final.jar" sourcepath="M2_REPO/org/jgroups/jgroups/2.11.1.Final/jgroups-2.11.1.Final-sources.jar"/>
+	<classpathentry kind="var" path="M2_REPO/org/exoplatform/kernel/exo.kernel.component.cache/2.3.0-CR2/exo.kernel.component.cache-2.3.0-CR2.jar"/>
+	<classpathentry kind="var" path="M2_REPO/com/experlog/xapool/1.5.0/xapool-1.5.0.jar" sourcepath="M2_REPO/com/experlog/xapool/1.5.0/xapool-1.5.0-sources.jar"/>
+	<classpathentry kind="var" path="M2_REPO/org/hibernate/hibernate-core/3.3.2.GA/hibernate-core-3.3.2.GA.jar" sourcepath="M2_REPO/org/hibernate/hibernate-core/3.3.2.GA/hibernate-core-3.3.2.GA-sources.jar"/>
+	<classpathentry kind="var" path="M2_REPO/antlr/antlr/2.7.6/antlr-2.7.6.jar" sourcepath="M2_REPO/antlr/antlr/2.7.6/antlr-2.7.6-sources.jar"/>
+	<classpathentry kind="var" path="M2_REPO/dom4j/dom4j/1.6.1/dom4j-1.6.1.jar" sourcepath="M2_REPO/dom4j/dom4j/1.6.1/dom4j-1.6.1-sources.jar"/>
+	<classpathentry kind="var" path="M2_REPO/org/hibernate/hibernate-annotations/3.4.0.GA/hibernate-annotations-3.4.0.GA.jar" sourcepath="M2_REPO/org/hibernate/hibernate-annotations/3.4.0.GA/hibernate-annotations-3.4.0.GA-sources.jar"/>
+	<classpathentry kind="var" path="M2_REPO/org/hibernate/ejb3-persistence/1.0.2.GA/ejb3-persistence-1.0.2.GA.jar" sourcepath="M2_REPO/org/hibernate/ejb3-persistence/1.0.2.GA/ejb3-persistence-1.0.2.GA-sources.jar"/>
+	<classpathentry kind="var" path="M2_REPO/org/hibernate/hibernate-commons-annotations/3.1.0.GA/hibernate-commons-annotations-3.1.0.GA.jar" sourcepath="M2_REPO/org/hibernate/hibernate-commons-annotations/3.1.0.GA/hibernate-commons-annotations-3.1.0.GA-sources.jar"/>
+	<classpathentry kind="var" path="M2_REPO/commons-dbcp/commons-dbcp/1.4/commons-dbcp-1.4.jar" sourcepath="M2_REPO/commons-dbcp/commons-dbcp/1.4/commons-dbcp-1.4-sources.jar"/>
+	<classpathentry kind="var" path="M2_REPO/commons-pool/commons-pool/1.5.5/commons-pool-1.5.5.jar" sourcepath="M2_REPO/commons-pool/commons-pool/1.5.5/commons-pool-1.5.5-sources.jar"/>
+	<classpathentry kind="var" path="M2_REPO/org/exoplatform/core/exo.core.component.document/2.4.0-CR2/exo.core.component.document-2.4.0-CR2.jar"/>
+	<classpathentry kind="var" path="M2_REPO/org/apache/pdfbox/pdfbox/1.4.0/pdfbox-1.4.0.jar"/>
+	<classpathentry kind="var" path="M2_REPO/org/apache/pdfbox/fontbox/1.4.0/fontbox-1.4.0.jar"/>
+	<classpathentry kind="var" path="M2_REPO/org/apache/pdfbox/jempbox/1.4.0/jempbox-1.4.0.jar"/>
+	<classpathentry kind="var" path="M2_REPO/org/htmlparser/htmlparser/1.6/htmlparser-1.6.jar"/>
+	<classpathentry kind="var" path="M2_REPO/org/apache/poi/poi/3.6/poi-3.6.jar" sourcepath="M2_REPO/org/apache/poi/poi/3.6/poi-3.6-sources.jar"/>
+	<classpathentry kind="var" path="M2_REPO/org/apache/poi/poi-scratchpad/3.6/poi-scratchpad-3.6.jar" sourcepath="M2_REPO/org/apache/poi/poi-scratchpad/3.6/poi-scratchpad-3.6-sources.jar"/>
+	<classpathentry kind="var" path="M2_REPO/org/apache/poi/poi-ooxml/3.6/poi-ooxml-3.6.jar" sourcepath="M2_REPO/org/apache/poi/poi-ooxml/3.6/poi-ooxml-3.6-sources.jar"/>
+	<classpathentry kind="var" path="M2_REPO/org/apache/poi/poi-ooxml-schemas/3.6/poi-ooxml-schemas-3.6.jar"/>
+	<classpathentry kind="var" path="M2_REPO/org/apache/xmlbeans/xmlbeans/2.3.0/xmlbeans-2.3.0.jar"/>
+	<classpathentry kind="var" path="M2_REPO/stax/stax-api/1.0.1/stax-api-1.0.1.jar"/>
+	<classpathentry kind="var" path="M2_REPO/org/apache/geronimo/specs/geronimo-stax-api_1.0_spec/1.0.1/geronimo-stax-api_1.0_spec-1.0.1.jar" sourcepath="M2_REPO/org/apache/geronimo/specs/geronimo-stax-api_1.0_spec/1.0.1/geronimo-stax-api_1.0_spec-1.0.1-sources.jar"/>
+	<classpathentry kind="var" path="M2_REPO/org/apache/tika/tika-core/0.7/tika-core-0.7.jar" sourcepath="M2_REPO/org/apache/tika/tika-core/0.7/tika-core-0.7-sources.jar"/>
+	<classpathentry kind="var" path="M2_REPO/org/apache/tika/tika-parsers/0.7/tika-parsers-0.7.jar" sourcepath="M2_REPO/org/apache/tika/tika-parsers/0.7/tika-parsers-0.7-sources.jar"/>
+	<classpathentry kind="var" path="M2_REPO/org/apache/commons/commons-compress/1.0/commons-compress-1.0.jar" sourcepath="M2_REPO/org/apache/commons/commons-compress/1.0/commons-compress-1.0-sources.jar"/>
+	<classpathentry kind="var" path="M2_REPO/org/bouncycastle/bcmail-jdk15/1.45/bcmail-jdk15-1.45.jar" sourcepath="M2_REPO/org/bouncycastle/bcmail-jdk15/1.45/bcmail-jdk15-1.45-sources.jar"/>
+	<classpathentry kind="var" path="M2_REPO/org/bouncycastle/bcprov-jdk15/1.45/bcprov-jdk15-1.45.jar" sourcepath="M2_REPO/org/bouncycastle/bcprov-jdk15/1.45/bcprov-jdk15-1.45-sources.jar"/>
+	<classpathentry kind="var" path="M2_REPO/org/ccil/cowan/tagsoup/tagsoup/1.2/tagsoup-1.2.jar"/>
+	<classpathentry kind="var" path="M2_REPO/asm/asm/3.1/asm-3.1.jar" sourcepath="M2_REPO/asm/asm/3.1/asm-3.1-sources.jar"/>
+	<classpathentry kind="var" path="M2_REPO/log4j/log4j/1.2.14/log4j-1.2.14.jar" sourcepath="M2_REPO/log4j/log4j/1.2.14/log4j-1.2.14-sources.jar"/>
+	<classpathentry kind="var" path="M2_REPO/com/drewnoakes/metadata-extractor/2.4.0-beta-1/metadata-extractor-2.4.0-beta-1.jar" sourcepath="M2_REPO/com/drewnoakes/metadata-extractor/2.4.0-beta-1/metadata-extractor-2.4.0-beta-1-sources.jar"/>
+	<classpathentry kind="var" path="M2_REPO/org/exoplatform/core/exo.core.component.organization.api/2.4.0-CR2/exo.core.component.organization.api-2.4.0-CR2.jar"/>
+	<classpathentry kind="var" path="M2_REPO/org/exoplatform/core/exo.core.component.security.core/2.4.0-CR2/exo.core.component.security.core-2.4.0-CR2.jar"/>
+	<classpathentry kind="var" path="M2_REPO/commons-lang/commons-lang/2.6/commons-lang-2.6.jar" sourcepath="M2_REPO/commons-lang/commons-lang/2.6/commons-lang-2.6-sources.jar"/>
+	<classpathentry kind="var" path="M2_REPO/xdoclet/xdoclet-hibernate-module/1.2.3/xdoclet-hibernate-module-1.2.3.jar"/>
+	<classpathentry kind="var" path="M2_REPO/xdoclet/xdoclet/1.2.3/xdoclet-1.2.3.jar" sourcepath="M2_REPO/xdoclet/xdoclet/1.2.3/xdoclet-1.2.3-sources.jar"/>
+	<classpathentry kind="var" path="M2_REPO/xdoclet/xdoclet-xdoclet-module/1.2.3/xdoclet-xdoclet-module-1.2.3.jar"/>
+	<classpathentry kind="var" path="M2_REPO/xdoclet/xjavadoc/1.2.3/xjavadoc-1.2.3.jar"/>
+	<classpathentry kind="var" path="M2_REPO/org/exoplatform/jcr/exo.jcr.component.core/1.14.0-CR2/exo.jcr.component.core-1.14.0-CR2.jar"/>
+	<classpathentry kind="var" path="M2_REPO/org/apache/lucene/lucene-core/2.9.4/lucene-core-2.9.4.jar" sourcepath="M2_REPO/org/apache/lucene/lucene-core/2.9.4/lucene-core-2.9.4-sources.jar"/>
+	<classpathentry kind="var" path="M2_REPO/org/apache/lucene/lucene-spellchecker/2.9.4/lucene-spellchecker-2.9.4.jar" sourcepath="M2_REPO/org/apache/lucene/lucene-spellchecker/2.9.4/lucene-spellchecker-2.9.4-sources.jar"/>
+	<classpathentry kind="var" path="M2_REPO/org/apache/lucene/lucene-memory/2.9.4/lucene-memory-2.9.4.jar" sourcepath="M2_REPO/org/apache/lucene/lucene-memory/2.9.4/lucene-memory-2.9.4-sources.jar"/>
+	<classpathentry kind="var" path="M2_REPO/com/sun/xml/stream/sjsxp/1.0.1/sjsxp-1.0.1.jar"/>
+	<classpathentry kind="var" path="M2_REPO/concurrent/concurrent/1.3.4/concurrent-1.3.4.jar" sourcepath="M2_REPO/concurrent/concurrent/1.3.4/concurrent-1.3.4-sources.jar"/>
+	<classpathentry kind="var" path="M2_REPO/commons-io/commons-io/1.4/commons-io-1.4.jar" sourcepath="M2_REPO/commons-io/commons-io/1.4/commons-io-1.4-sources.jar"/>
+	<classpathentry kind="var" path="M2_REPO/jboss/jbossts/jbossjts/4.6.1.GA/jbossjts-4.6.1.GA.jar"/>
+	<classpathentry kind="var" path="M2_REPO/jboss/jbossts/jbossts-common/4.6.1.GA/jbossts-common-4.6.1.GA.jar"/>
+	<classpathentry kind="var" path="M2_REPO/org/apache/ws/commons/ws-commons-util/1.0.1/ws-commons-util-1.0.1.jar" sourcepath="M2_REPO/org/apache/ws/commons/ws-commons-util/1.0.1/ws-commons-util-1.0.1-sources.jar"/>
+	<classpathentry kind="var" path="M2_REPO/org/jboss/cache/jbosscache-core/3.2.6.GA/jbosscache-core-3.2.6.GA.jar" sourcepath="M2_REPO/org/jboss/cache/jbosscache-core/3.2.6.GA/jbosscache-core-3.2.6.GA-sources.jar"/>
+	<classpathentry kind="var" path="M2_REPO/org/jboss/javaee/jboss-transaction-api/1.0.1.GA/jboss-transaction-api-1.0.1.GA.jar" sourcepath="M2_REPO/org/jboss/javaee/jboss-transaction-api/1.0.1.GA/jboss-transaction-api-1.0.1.GA-sources.jar">
+		<attributes>
+			<attribute name="javadoc_location" value="jar:file:/home/binhnv/java/exo-dependencies/repository/org/jboss/javaee/jboss-transaction-api/1.0.1.GA/jboss-transaction-api-1.0.1.GA-javadoc.jar!/"/>
+		</attributes>
+	</classpathentry>
+	<classpathentry kind="var" path="M2_REPO/org/jboss/jboss-common-core/2.2.14.GA/jboss-common-core-2.2.14.GA.jar" sourcepath="M2_REPO/org/jboss/jboss-common-core/2.2.14.GA/jboss-common-core-2.2.14.GA-sources.jar"/>
+	<classpathentry kind="var" path="M2_REPO/org/jboss/logging/jboss-logging-spi/2.0.5.GA/jboss-logging-spi-2.0.5.GA.jar" sourcepath="M2_REPO/org/jboss/logging/jboss-logging-spi/2.0.5.GA/jboss-logging-spi-2.0.5.GA-sources.jar">
+		<attributes>
+			<attribute name="javadoc_location" value="jar:file:/home/binhnv/java/exo-dependencies/repository/org/jboss/logging/jboss-logging-spi/2.0.5.GA/jboss-logging-spi-2.0.5.GA-javadoc.jar!/"/>
+		</attributes>
+	</classpathentry>
+	<classpathentry kind="var" path="M2_REPO/org/infinispan/infinispan-core/4.2.1.FINAL/infinispan-core-4.2.1.FINAL.jar"/>
+	<classpathentry kind="var" path="M2_REPO/org/jboss/marshalling/river/1.2.3.GA/river-1.2.3.GA.jar"/>
+	<classpathentry kind="var" path="M2_REPO/org/jboss/marshalling/marshalling-api/1.2.3.GA/marshalling-api-1.2.3.GA.jar"/>
+	<classpathentry kind="var" path="M2_REPO/org/rhq/helpers/rhq-pluginAnnotations/3.0.1/rhq-pluginAnnotations-3.0.1.jar"/>
+	<classpathentry kind="var" path="M2_REPO/i18nlog/i18nlog/1.0.10/i18nlog-1.0.10.jar"/>
+	<classpathentry kind="var" path="M2_REPO/org/infinispan/infinispan-cachestore-jdbc/4.2.1.FINAL/infinispan-cachestore-jdbc-4.2.1.FINAL.jar"/>
+	<classpathentry kind="var" path="M2_REPO/c3p0/c3p0/0.9.1.2/c3p0-0.9.1.2.jar"/>
+	<classpathentry kind="var" path="M2_REPO/org/exoplatform/core/exo.core.component.script.groovy/2.4.0-CR2/exo.core.component.script.groovy-2.4.0-CR2.jar"/>
+	<classpathentry kind="var" path="M2_REPO/org/codehaus/groovy/groovy-all/1.7.6/groovy-all-1.7.6.jar" sourcepath="M2_REPO/org/codehaus/groovy/groovy-all/1.7.6/groovy-all-1.7.6-sources.jar"/>
+	<classpathentry kind="var" path="M2_REPO/org/exoplatform/ws/exo.ws.rest.core/2.2.0-CR2/exo.ws.rest.core-2.2.0-CR2.jar"/>
+	<classpathentry kind="var" path="M2_REPO/org/exoplatform/ws/exo.ws.frameworks.json/2.2.0-CR2/exo.ws.frameworks.json-2.2.0-CR2.jar"/>
+	<classpathentry kind="var" path="M2_REPO/net/sf/jtidy/jtidy/r938/jtidy-r938.jar" sourcepath="M2_REPO/net/sf/jtidy/jtidy/r938/jtidy-r938-sources.jar"/>
+	<classpathentry kind="var" path="M2_REPO/commons-fileupload/commons-fileupload/1.2.1/commons-fileupload-1.2.1.jar" sourcepath="M2_REPO/commons-fileupload/commons-fileupload/1.2.1/commons-fileupload-1.2.1-sources.jar"/>
+	<classpathentry kind="var" path="M2_REPO/org/exoplatform/ws/exo.ws.rest.ext/2.2.0-CR2/exo.ws.rest.ext-2.2.0-CR2.jar"/>
+	<classpathentry kind="var" path="M2_REPO/org/exoplatform/core/exo.core.component.xml-processing/2.4.0-CR2/exo.core.component.xml-processing-2.4.0-CR2.jar"/>
+	<classpathentry kind="var" path="M2_REPO/org/exoplatform/ws/exo.ws.commons/2.2.0-CR2/exo.ws.commons-2.2.0-CR2.jar"/>
+	<classpathentry kind="var" path="M2_REPO/org/slf4j/slf4j-log4j12/1.5.8/slf4j-log4j12-1.5.8.jar" sourcepath="M2_REPO/org/slf4j/slf4j-log4j12/1.5.8/slf4j-log4j12-1.5.8-sources.jar"/>
+	<classpathentry kind="output" path="target/classes"/>
+</classpath>
diff --git a/.project b/.project
new file mode 100644
index 0000000..5e970c1
--- /dev/null
+++ b/.project
@@ -0,0 +1,14 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<projectDescription>
+  <name>jcr-exo</name>
+  <comment>NO_M2ECLIPSE_SUPPORT: Project files created with the maven-eclipse-plugin are not supported in M2Eclipse.</comment>
+  <projects/>
+  <buildSpec>
+    <buildCommand>
+      <name>org.eclipse.jdt.core.javabuilder</name>
+    </buildCommand>
+  </buildSpec>
+  <natures>
+    <nature>org.eclipse.jdt.core.javanature</nature>
+  </natures>
+</projectDescription>
\ No newline at end of file
diff --git a/.settings/org.eclipse.jdt.core.prefs b/.settings/org.eclipse.jdt.core.prefs
new file mode 100644
index 0000000..0a88698
--- /dev/null
+++ b/.settings/org.eclipse.jdt.core.prefs
@@ -0,0 +1,5 @@
+#Mon Jul 09 14:07:58 ICT 2012
+org.eclipse.jdt.core.compiler.codegen.targetPlatform=1.5
+eclipse.preferences.version=1
+org.eclipse.jdt.core.compiler.source=1.5
+org.eclipse.jdt.core.compiler.compliance=1.5
diff --git a/pom.xml b/pom.xml
new file mode 100644
index 0000000..65d0e39
--- /dev/null
+++ b/pom.xml
@@ -0,0 +1,76 @@
+<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
+  <modelVersion>4.0.0</modelVersion>
+
+  <groupId>exoplatform</groupId>
+  <artifactId>jcr-exo</artifactId>
+  <version>1.0-SNAPSHOT</version>
+  <packaging>jar</packaging>
+
+  <name>jcr-exo</name>
+  <url>http://maven.apache.org</url>
+
+  <properties>
+    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
+  </properties>
+
+  <build>
+    <testResources>
+      <testResource>
+        <directory>src/test/resources</directory>
+        <includes>
+          <include>**/*.properties</include>
+          <include>**/*.xml</include>
+          <include>**/*.conf</include>
+        </includes>
+      </testResource>
+    </testResources>
+    <plugins>
+      <plugin>
+        <groupId>org.apache.maven.plugins</groupId>
+        <artifactId>maven-compiler-plugin</artifactId>
+        <configuration>
+          <source>1.5</source>
+          <target>1.5</target>
+        </configuration>
+      </plugin>
+    </plugins>
+  </build>
+  <dependencies>
+    <dependency>
+      <groupId>org.hsqldb</groupId>
+      <artifactId>hsqldb</artifactId>
+      <version>2.0.0</version>
+    </dependency>
+    <dependency>
+      <groupId>org.exoplatform.jcr</groupId>
+      <artifactId>exo.jcr.component.ext</artifactId>
+      <version>1.14.0-CR2</version>
+      <scope>provided</scope>
+    </dependency>
+    <dependency>
+      <groupId>junit</groupId>
+      <artifactId>junit</artifactId>
+      <version>3.8.1</version>
+      <scope>test</scope>
+    </dependency>
+    <dependency>
+      <groupId>org.exoplatform.kernel</groupId>
+      <artifactId>exo.kernel.component.cache</artifactId>
+      <version>2.3.0-CR2</version>
+      <scope>provided</scope>
+    </dependency>
+    <dependency>
+      <groupId>org.slf4j</groupId>
+      <artifactId>slf4j-log4j12</artifactId>
+      <version>1.5.8</version>
+      <scope>test</scope>
+    </dependency>
+    <dependency>
+      <groupId>org.exoplatform.ws</groupId>
+      <artifactId>exo.ws.rest.core</artifactId>
+      <version>2.2.0-CR2</version>
+      <scope>provided</scope>
+    </dependency>
+  </dependencies>
+</project>
diff --git a/pom.xml~ b/pom.xml~
new file mode 100644
index 0000000..65d0e39
--- /dev/null
+++ b/pom.xml~
@@ -0,0 +1,76 @@
+<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
+  <modelVersion>4.0.0</modelVersion>
+
+  <groupId>exoplatform</groupId>
+  <artifactId>jcr-exo</artifactId>
+  <version>1.0-SNAPSHOT</version>
+  <packaging>jar</packaging>
+
+  <name>jcr-exo</name>
+  <url>http://maven.apache.org</url>
+
+  <properties>
+    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
+  </properties>
+
+  <build>
+    <testResources>
+      <testResource>
+        <directory>src/test/resources</directory>
+        <includes>
+          <include>**/*.properties</include>
+          <include>**/*.xml</include>
+          <include>**/*.conf</include>
+        </includes>
+      </testResource>
+    </testResources>
+    <plugins>
+      <plugin>
+        <groupId>org.apache.maven.plugins</groupId>
+        <artifactId>maven-compiler-plugin</artifactId>
+        <configuration>
+          <source>1.5</source>
+          <target>1.5</target>
+        </configuration>
+      </plugin>
+    </plugins>
+  </build>
+  <dependencies>
+    <dependency>
+      <groupId>org.hsqldb</groupId>
+      <artifactId>hsqldb</artifactId>
+      <version>2.0.0</version>
+    </dependency>
+    <dependency>
+      <groupId>org.exoplatform.jcr</groupId>
+      <artifactId>exo.jcr.component.ext</artifactId>
+      <version>1.14.0-CR2</version>
+      <scope>provided</scope>
+    </dependency>
+    <dependency>
+      <groupId>junit</groupId>
+      <artifactId>junit</artifactId>
+      <version>3.8.1</version>
+      <scope>test</scope>
+    </dependency>
+    <dependency>
+      <groupId>org.exoplatform.kernel</groupId>
+      <artifactId>exo.kernel.component.cache</artifactId>
+      <version>2.3.0-CR2</version>
+      <scope>provided</scope>
+    </dependency>
+    <dependency>
+      <groupId>org.slf4j</groupId>
+      <artifactId>slf4j-log4j12</artifactId>
+      <version>1.5.8</version>
+      <scope>test</scope>
+    </dependency>
+    <dependency>
+      <groupId>org.exoplatform.ws</groupId>
+      <artifactId>exo.ws.rest.core</artifactId>
+      <version>2.2.0-CR2</version>
+      <scope>provided</scope>
+    </dependency>
+  </dependencies>
+</project>
diff --git a/src/main/java/exoplatform/BookNodeTypes.java b/src/main/java/exoplatform/BookNodeTypes.java
new file mode 100644
index 0000000..1cc8a6a
--- /dev/null
+++ b/src/main/java/exoplatform/BookNodeTypes.java
@@ -0,0 +1,45 @@
+/*
+ * Copyright (C) 2003-2012 eXo Platform SAS.
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program. If not, see <http://www.gnu.org/licenses/>.
+ */
+package exoplatform;
+
+/**
+ * Created by The eXo Platform SAS
+ * Author : BinhNV
+ *          binhnv@exoplatform.com
+ * Jul 5, 2012  
+ */
+public interface BookNodeTypes {
+
+  /* define parent node of book */
+  public static final String EXO_BOOK = "exostore:book";
+  /* exostore:bookname is a property of exostore:book */
+  public static final String EXO_BOOK_NAME = "exostore:bookname";
+  /* exostore:bookcategory is a property of exostore:book */
+  public static final String EXO_BOOK_CATEGORY = "exostore:bookcategory";
+  /* exostore:bookcontent is a property of exostore:book */
+  public static final String EXO_BOOK_CONTENT = "exostore:bookcontent";
+  
+  /* define parent node of author */
+  public static final String EXO_AUTHOR = "exostore:author";
+  /* exostore:authorname is a property of exostore:author */
+  public static final String EXO_AUTHOR_NAME = "exostore:authorname";
+  /* exostore:authoraddress is a property of exostore:author */
+  public static final String EXO_AUTHOR_ADDRESS = "exostore:authoraddress";
+  /* exostore:authorphone is a property of exostore:author */
+  public static final String EXO_AUTHOR_PHONE = "exostore:authorphone";
+  
+}
diff --git a/src/main/java/exoplatform/BookStoreService.java b/src/main/java/exoplatform/BookStoreService.java
new file mode 100644
index 0000000..5c265d5
--- /dev/null
+++ b/src/main/java/exoplatform/BookStoreService.java
@@ -0,0 +1,221 @@
+/*
+ * Copyright (C) 2003-2012 eXo Platform SAS.
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program. If not, see <http://www.gnu.org/licenses/>.
+ */
+package exoplatform;
+
+import java.io.Serializable;
+import java.util.ArrayList;
+import java.util.List;
+
+import javax.jcr.RepositoryException;
+
+import org.exoplatform.services.cache.CacheService;
+import org.exoplatform.services.cache.ExoCache;
+import org.exoplatform.services.jcr.RepositoryService;
+import org.exoplatform.services.log.ExoLogger;
+import org.exoplatform.services.log.Log;
+import org.picocontainer.Startable;
+
+import exoplatform.entity.Author;
+import exoplatform.entity.Book;
+import exoplatform.entity.Book.CATEGORY;
+import exoplatform.exception.DuplicateBookException;
+import exoplatform.utils.Utils;
+
+/**
+ * Created by The eXo Platform SAS
+ * Author : BinhNV
+ *          binhnv@exoplatform.com
+ * Jul 6, 2012  
+ */
+public class BookStoreService implements Startable {
+
+  /* Define a exo log */
+  private static final Log log = ExoLogger.getLogger(BookStoreService.class);
+  /* Define a exo cache */
+  private ExoCache<Serializable, Book> cache;
+  /* Define a JCRDataStore object */
+  private JCRDataStorage jcrDataStorage;
+  
+  /**
+   * BookStoreService constructor
+   * @param rservice
+   * @param cacheService
+   * @param dataStorage
+   * @throws RepositoryException
+   * @throws DuplicateBookException 
+   */
+  public BookStoreService(RepositoryService rservice,
+                          CacheService cacheService,
+                          JCRDataStorage dataStorage) throws RepositoryException,
+      DuplicateBookException {
+    this.cache = cacheService.getCacheInstance(getClass().getName());
+    this.jcrDataStorage = dataStorage;
+  }
+
+  /**
+   * The function init data for datastorage
+   */
+  public void start() {
+    jcrDataStorage.init();
+//    List<Book> books = new ArrayList<Book>(); 
+//    try {
+//      addBook("The Mask", CATEGORY.NOVEL, "Test");
+//    } catch (DuplicateBookException e) {
+//      // TODO Auto-generated catch block
+//      e.printStackTrace();
+//    }
+    addMultiBook();
+    addMultiAuthor();
+//    books = searchBookByNameLikeXPath("Holme");
+//    if (books != null && books.size() > 0) {
+//      for (Book book : books) {
+//        System.out.println("+ ================================================================== +");
+//        System.out.println("+                        book id : " + book.getId() + "              +");
+//        System.out.println("+                        book name : " + book.getName() + "              +");
+//        System.out.println("+                        book category : " + Utils.bookCategoryEnumToString(book.getCategory()) + "              +");
+//        System.out.println("+                        book content : " + book.getContent() + "              +");
+//        System.out.println("+ ================================================================== +");
+//      }
+//    }
+  }
+
+  /* (non-Javadoc)
+   * @see org.picocontainer.Startable#stop()
+   */
+  public void stop() {
+
+  }
+  
+  /**
+   * This function support for add new book to datastorage
+   * 
+   * @param bookName
+   * @param category
+   * @param content
+   * @return
+   * @throws DuplicateBookException
+   */
+  public Book addBook(String bookName, CATEGORY category, String content) throws DuplicateBookException {
+    Book book = new Book(bookName, category, content);
+    return jcrDataStorage.addBook(book);
+  }
+  
+  /**
+   * 
+   * @param authorName
+   * @param authorAddress
+   * @param authorPhone
+   * @return
+   */
+  public Author addAuthor(String authorName, String authorAddress, String authorPhone) {
+    Author author = new Author(authorName, authorAddress, authorPhone);
+    return jcrDataStorage.addAuthor(author);
+  }
+  
+  /**
+   * This function support for add multi book to datastorage
+   */
+  public void addMultiAuthor() {
+      addAuthor("Conan Doyle", "England", "123456789");
+      addAuthor("JK Rowling", "England", "987654321");
+      addAuthor("Sydney Sheldon", "US", "678912345");
+      addAuthor("Mario Puzzo", "Italia", "012345678");
+      addAuthor("Ma Van Khang", "Vietnam", "23451234");
+      addAuthor("Victor Huygo", "France", "8760985544");
+  } 
+  
+  /**
+   * This function support for add multi book to datastorage
+   */
+  public void addMultiBook() {
+    try {
+      addBook("Shelock Holme", CATEGORY.NOVEL, "The sign of the Four");
+      addBook("Alice in wonder land", CATEGORY.COMICS, "Alice in wonder land");
+      addBook("Seal team six", CATEGORY.NOVEL, "Seal team six");
+      addBook("Hibernate in action", CATEGORY.TECHNICAL, "Hibernate");
+      addBook("Napoleon", CATEGORY.HISTORY, "Napoleon");
+      addBook("Jouney to the West", CATEGORY.COMICS, "Jouney to the West");
+    } catch (DuplicateBookException e) {
+      e.printStackTrace();
+    }
+  } 
+  
+  /**
+   * The function support for search book by name(using SQL)
+   * 
+   * @param name The name of book
+   * @return
+   */
+  public List<Book> searchBookByNameSQL(String name) {
+    return jcrDataStorage.searchBookByNameSQL(name);
+  }
+  
+  /**
+   * The function support for search book by name(using XPath)
+   * 
+   * @param name The name of book
+   * @return
+   */
+  public List<Book> searchBookByNameXPath(String name) {
+    return jcrDataStorage.searchBookByNameXPath(name);
+  }
+  
+  /**
+   * The function support for search book by name but limit amount of records(using SQL)
+   * 
+   * @param name The name of book
+   * @return
+   */
+  public List<Book> searchBookByNameLimitSQL(String name) {
+    return jcrDataStorage.searchBookByNameLimitSQL(name);
+  }
+  
+  /**
+   * The function support search book by name with like condition(using SQL)
+   * 
+   * @param name The name of book
+   * @return
+   */
+  public List<Book> searchBookByNameLikeSQL(String name) {
+    return jcrDataStorage.searchBookByNameLikeSQL(name);
+  }
+  
+  /**
+   * The function support search book by name with like condition(using XPath)
+   * 
+   * @param name The name of book
+   * @return
+   */
+  public List<Book> searchBookByNameLikeXPath(String name) {
+    return jcrDataStorage.searchBookByNameLikeSQL(name);
+  }
+  
+  /**
+   * The function support get book by book's id
+   * 
+   * @param id The id of book
+   * @return
+   */
+  public Book getBook(String id) {
+    Book book = cache.get(id);
+    if (book != null) {
+      return book;
+    }
+    return jcrDataStorage.getBook(id);
+  }
+
+}
diff --git a/src/main/java/exoplatform/JCRDataStorage.java b/src/main/java/exoplatform/JCRDataStorage.java
new file mode 100644
index 0000000..ef23941
--- /dev/null
+++ b/src/main/java/exoplatform/JCRDataStorage.java
@@ -0,0 +1,541 @@
+/*
+ * Copyright (C) 2003-2012 eXo Platform SAS.
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program. If not, see <http://www.gnu.org/licenses/>.
+ */
+package exoplatform;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import javax.jcr.Node;
+import javax.jcr.NodeIterator;
+import javax.jcr.PathNotFoundException;
+import javax.jcr.RepositoryException;
+import javax.jcr.Session;
+import javax.jcr.query.Query;
+import javax.jcr.query.QueryManager;
+import javax.jcr.query.QueryResult;
+
+import org.apache.commons.lang.StringUtils;
+import org.exoplatform.services.jcr.RepositoryService;
+import org.exoplatform.services.jcr.core.ManageableRepository;
+import org.exoplatform.services.jcr.ext.common.SessionProvider;
+import org.exoplatform.services.jcr.impl.core.query.QueryImpl;
+import org.exoplatform.services.log.ExoLogger;
+import org.exoplatform.services.log.Log;
+
+import exoplatform.entity.Author;
+import exoplatform.entity.Book;
+import exoplatform.exception.BookNotFoundException;
+import exoplatform.exception.DuplicateBookException;
+import exoplatform.utils.PropertyReader;
+import exoplatform.utils.Utils;
+
+/**
+ * Created by The eXo Platform SAS
+ * Author : BinhNV
+ *          binhnv@exoplatform.com
+ * Jul 6, 2012  
+ */
+public class JCRDataStorage {
+
+  /* Define a exo log */
+  private static final Log log = ExoLogger.getLogger(JCRDataStorage.class);
+  /* Define a constant of parent path */
+  public static final String DEFAULT_PARENT_PATH = "/exostore:bookstore";
+  public static final String DEFAULT_PARENT_BOOK_PATH = "/exostore:book";
+  public static final String DEFAULT_PARENT_AUTHOR_PATH = "/exostore:author";
+  public static final String DEFAULT_WORKSPACE_NAME = "bookstore";
+  /* Define a RepositoryService which support integrate with repository */
+  private RepositoryService repoService;
+  
+  /**
+   * JCRDataStorage constructor
+   * @param repositoryService
+   */
+  public JCRDataStorage(RepositoryService repositoryService) {
+      this.repoService = repositoryService;
+  }
+  
+  /**
+   * The function prepare node and data for repository
+   */
+  public void init() {
+    /* create SessionProvider */
+    SessionProvider sProvider = SessionProvider.createSystemProvider();
+    Node node = null;
+    try {
+      /* if node exist, get node from parent path */
+      node = getNodeByPath(DEFAULT_PARENT_PATH, sProvider);
+    } catch (PathNotFoundException e) {
+      /*if node doesn't exist, create new node */
+      try {
+        /* get node */
+        node = getNodeByPath(DEFAULT_PARENT_PATH, sProvider);
+        node.getSession().save();
+      } catch (RepositoryException re) {
+        log.error("Failed to init BookStore jcr node's path", re);
+      }
+    } catch (RepositoryException e) {
+      log.error("Failed to init BookStore jcr node's path", e);
+    } finally {
+      sProvider.close();
+    }
+  }
+  
+  /**
+   * The function support for get node from path  
+   * 
+   * @param nodePath The path of node by String type
+   * @param sessionProvider The session 
+   * @return The node
+   * @throws RepositoryException
+   */
+  private Node getNodeByPath(String nodePath, SessionProvider sessionProvider) throws RepositoryException {
+    return (Node) getSession(sessionProvider).getItem(nodePath);
+  }
+  
+  /**
+   * The function get session provider and return a session of workspace
+   * 
+   * @param sessionProvider
+   * @return The session
+   * @throws RepositoryException
+   */
+  private Session getSession(SessionProvider sessionProvider) throws RepositoryException {
+    ManageableRepository currentRepo = repoService.getCurrentRepository();
+    return sessionProvider.getSession(DEFAULT_WORKSPACE_NAME, currentRepo);
+  }
+  
+  /**
+   * The function support for get book by book id
+   * 
+   * @param id The id of book
+   * @return Book
+   */
+  public Book getBook(String id) {
+    SessionProvider sProvider = SessionProvider.createSystemProvider();
+    try {
+      Node node = getNodeByPath(DEFAULT_PARENT_PATH + "/" + id, sProvider);
+      return createBookByNode(node);
+    } catch (PathNotFoundException pe) {
+      return null;
+    } catch (RepositoryException re) {
+      log.error("Can not find this book", re);
+      return null;
+    } finally {
+      sProvider.close();
+    }
+  }
+  
+  /**
+   * The function which add new book to workspace
+   * 
+   * @param book The new book which want to add
+   * @return Book
+   * @throws DuplicateBookException
+   */
+  public Book addBook(Book book) throws DuplicateBookException {
+    System.out.println("+ ========================================================================== +");
+    System.out.println("+                         add book function                                  +");
+    System.out.println("+ ========================================================================== +");
+    SessionProvider sProvider = SessionProvider.createSystemProvider();
+    /* Check exist of book */
+    if (isExistBookName(book.getName(), sProvider)) {
+      throw new DuplicateBookException(String.format("Book %s is existed", book.getName()));
+    }
+    
+    /* get id and set to new book */
+    book.setId(Utils.bookId++);
+    
+    try {
+      /* execute set data to node and save to workspace */
+      Node parentNode = getNodeByPath(DEFAULT_PARENT_PATH + DEFAULT_PARENT_BOOK_PATH, sProvider);
+      System.out.println("+ ========================================================================== +");
+      System.out.println("+                         " + parentNode.getPath() + "                       +");
+      System.out.println("+ ========================================================================== +");
+      Node bookNode = parentNode.addNode("" + book.getId(), BookNodeTypes.EXO_BOOK);
+      bookNode.setProperty(BookNodeTypes.EXO_BOOK_NAME, book.getName());
+      bookNode.setProperty(BookNodeTypes.EXO_BOOK_CATEGORY, Utils.bookCategoryEnumToString(book.getCategory()));
+      bookNode.setProperty(BookNodeTypes.EXO_BOOK_CONTENT, book.getContent());
+      parentNode.getSession().save();
+      return book;
+    } catch (PathNotFoundException e) {
+      System.out.println("+ ========================================================================== +");
+      System.out.println("+                         Path not found exception                           +");
+      System.out.println("+ ========================================================================== +");
+      return null;
+    } catch (RepositoryException e) {
+      log.error("Failed to add book", e);
+      System.out.println("+ ========================================================================== +");
+      System.out.println("+                              Repository exception                          +");
+      System.out.println("+ ========================================================================== +");
+      return null;
+    } finally {
+      sProvider.close();
+    }
+  }
+  
+  public Author addAuthor(Author author) {
+    SessionProvider sProvider = SessionProvider.createSystemProvider();
+    author.setId(Utils.authorId++);
+    try {
+      Node parentNode = getNodeByPath(DEFAULT_PARENT_PATH + DEFAULT_PARENT_AUTHOR_PATH, sProvider);
+      Node authorNode = parentNode.addNode("" + author.getId(), BookNodeTypes.EXO_AUTHOR);
+      authorNode.setProperty(BookNodeTypes.EXO_AUTHOR_NAME, author.getName());
+      authorNode.setProperty(BookNodeTypes.EXO_AUTHOR_ADDRESS, author.getAddress());
+      authorNode.setProperty(BookNodeTypes.EXO_AUTHOR_PHONE, author.getPhone());
+      parentNode.getSession().save();
+      return author;
+    } catch (RepositoryException re) {
+      log.error("Failed to add author", re);
+      return null;
+    } finally {
+      sProvider.close();
+    }
+  }
+  
+  /**
+   * The function support delete a book by book id
+   * 
+   * @param id The id of book
+   * @throws BookNotFoundException
+   */
+  public void deleteBook(String id) throws BookNotFoundException {
+    SessionProvider sProvider = SessionProvider.createSystemProvider();
+    try {
+      Node node = getNodeByPath(DEFAULT_PARENT_PATH + "/" + id, sProvider);
+      node.remove();
+      node.getSession().save();
+    } catch (PathNotFoundException pe) {
+        throw new BookNotFoundException(String.format("Book %s is not found", id));
+    } catch (RepositoryException re) {
+      log.error("Failed to delete book by id", re);
+    } finally {
+      sProvider.close();
+    }
+  }
+  
+  /**
+   * The function support delete all of book in workspace
+   */
+  public void deleteAll() {
+    SessionProvider sProvider = SessionProvider.createSystemProvider();
+    try {
+      Node parentNode = getNodeByPath(DEFAULT_PARENT_PATH, sProvider);
+      parentNode.remove();
+      parentNode.getSession().save();
+    } catch (PathNotFoundException pe) {
+      log.error("Failed to delete all book", pe);
+    } catch (RepositoryException e) {
+      log.error("Failed to delete all book", e);
+    } finally {
+      sProvider.close();
+    }
+  }
+  
+  /**
+   * The function support edit a exist book
+   * 
+   * @param book The book want to delete
+   * @throws BookNotFoundException
+   */
+  public void editBook(Book book) throws BookNotFoundException {
+    SessionProvider sProvider = SessionProvider.createSystemProvider();
+    try {
+      /* execute modify data and set to workspace */
+      Node node = getNodeByPath(DEFAULT_PARENT_PATH + "/" + book.getId(), sProvider);
+      node.setProperty(BookNodeTypes.EXO_BOOK_NAME, book.getName());
+      node.setProperty(BookNodeTypes.EXO_BOOK_CONTENT, book.getContent());
+      node.setProperty(BookNodeTypes.EXO_BOOK_CATEGORY, Utils.bookCategoryEnumToString(book.getCategory()));
+      node.getSession().save();
+    } catch (RepositoryException re) {
+      log.error(String.format("Book %s is not found", book.getId()), re);
+      throw new BookNotFoundException(String.format("Book %s is not found", book.getId()));
+    } finally {
+      sProvider.close();
+    }
+  }
+  
+  /**
+   * The function support get all book in workspace 
+   * 
+   * @return List<Book>
+   */
+  public List<Book> getAllBook() {
+    /* create query string */
+    StringBuffer sb = new StringBuffer("Select * from " + BookNodeTypes.EXO_BOOK);
+    SessionProvider sProvider = SessionProvider.createSystemProvider();
+    try {
+      /* create QueryManager from session */
+      QueryManager queryManager = getSession(sProvider).getWorkspace().getQueryManager();
+      /* create Query object */
+      Query query = queryManager.createQuery(sb.toString(), Query.SQL);
+      /* execute query and return result to QueryResult */
+      QueryResult result = query.execute();
+      /* transfer data to NodeIterator */
+      NodeIterator nodes = result.getNodes();
+      List<Book> books = new ArrayList<Book>();
+      while (nodes.hasNext()) {
+        Node node = nodes.nextNode();
+        books.add(createBookByNode(node));
+      }
+      return books;
+    } catch (RepositoryException re) {
+      log.error("Can not find book", re);
+      return null;
+    } finally {
+      sProvider.close();
+    }
+  }
+  
+  /**
+   * The function support search book by name(using SQL)
+   * 
+   * @param name The name of book
+   * @return List<Book>
+   */
+  public List<Book> searchBookByNameSQL(String name) {
+    /* replace "" sign and - sign */
+    name = name.replaceAll("\"", "\\\"").replaceAll("-", StringUtils.EMPTY);
+    /* create query string */
+    StringBuffer sb = new StringBuffer("Select * from " + BookNodeTypes.EXO_BOOK);
+    sb.append(" where " + BookNodeTypes.EXO_BOOK_NAME + " = '" + name + "'");
+    SessionProvider sProvider = SessionProvider.createSystemProvider();
+    try {
+      /* create QueryManager from session */
+      QueryManager queryManager = getSession(sProvider).getWorkspace().getQueryManager();
+      /* create Query object */
+      Query query = queryManager.createQuery(sb.toString(), Query.SQL);
+      /* execute query and return result to QueryResult */
+      QueryResult result = query.execute();
+      /* transfer data to NodeIterator */
+      NodeIterator nodes = result.getNodes();
+      List<Book> books = new ArrayList<Book>();
+      while (nodes.hasNext()) {
+        Node node = nodes.nextNode();
+        Book book = createBookByNode(node);
+        books.add(book);
+      }
+      return books;
+    } catch (RepositoryException re) {
+      log.error("Can not find book", re);
+      return null;
+    } finally {
+      sProvider.close();
+    }
+  }
+  
+  /**
+   * The function support search book by name(using XPath)
+   * 
+   * @param name The name of book
+   * @return List<Book>
+   */
+  public List<Book> searchBookByNameXPath(String name) {
+    /* replace "" sign and - sign */
+    name = name.replaceAll("\"", "\\\"").replaceAll("-", StringUtils.EMPTY);
+    /* create query string */
+    StringBuffer sb = new StringBuffer("//element(*," + BookNodeTypes.EXO_BOOK + ")[@"
+        + BookNodeTypes.EXO_BOOK_NAME + "='" + name + "']/@" + BookNodeTypes.EXO_BOOK_NAME);
+    SessionProvider sProvider = SessionProvider.createSystemProvider();
+    try {
+      /* create QueryManager from session */
+      QueryManager queryManager = getSession(sProvider).getWorkspace().getQueryManager();
+      /* create Query object */
+      Query query = queryManager.createQuery(sb.toString(), Query.XPATH);
+      /* execute query and return result to QueryResult */
+      QueryResult result = query.execute();
+      /* transfer data to NodeIterator */
+      NodeIterator nodes = result.getNodes();
+      List<Book> books = new ArrayList<Book>();
+      while (nodes.hasNext()) {
+        Node node = nodes.nextNode();
+        books.add(createBookByNode(node));
+      }
+      return books;
+    } catch (RepositoryException re) {
+      log.error("Can not find book", re);
+      return null;
+    } finally {
+      sProvider.close();
+    }
+  }
+  
+  /**
+   * The function support search book by name with limit of result(using SQL)
+   * 
+   * @param name The name of book
+   * @return List<Book>
+   */
+  public List<Book> searchBookByNameLimitSQL(String name) {
+    /* replace "" sign and - sign */
+    name = name.replaceAll("\"", "\\\"").replaceAll("-", StringUtils.EMPTY);
+    /* create query string */
+    StringBuffer sb = new StringBuffer("Select * from " + BookNodeTypes.EXO_BOOK);
+    SessionProvider sProvider = SessionProvider.createSystemProvider();
+    try {
+      /* create QueryManager from session */
+      QueryManager queryManager = getSession(sProvider).getWorkspace().getQueryManager();
+      /* create QueryImpl object */
+      QueryImpl query = (QueryImpl) queryManager.createQuery(sb.toString(), QueryImpl.SQL);
+      /* set offset(which first record will be get) */
+      query.setOffset(2);
+      /* set limit(how many record will be get after offset) */
+      query.setLimit(3);
+      /* execute query and return result to QueryResult */
+      QueryResult result = query.execute();
+      /* transfer data to NodeIterator */
+      NodeIterator nodes = result.getNodes();
+      List<Book> books = new ArrayList<Book>();
+      while (nodes.hasNext()) {
+        Node node = nodes.nextNode();
+        books.add(createBookByNode(node));
+      }
+      return books;
+    } catch (RepositoryException re) {
+      log.error("Can not find book", re);
+      return null;
+    } finally {
+      sProvider.close();
+    }
+  }
+  
+  /**
+   * The function support search book by name with like condition(using SQL)
+   * 
+   * @param name The name of book
+   * @return List<Book>
+   */
+  public List<Book> searchBookByNameLikeSQL(String name) {
+    /* replace "" sign and - sign */
+    name.replaceAll("\"", "\\\"").replaceAll("-", StringUtils.EMPTY);
+    /* create query string */
+    StringBuffer sb = new StringBuffer("Select * from " + BookNodeTypes.EXO_BOOK);
+    sb.append(" where " + BookNodeTypes.EXO_BOOK_NAME + " like '%" + name + "%'");
+    SessionProvider sProvider = SessionProvider.createSystemProvider();
+    try {
+      /* create QueryManager from session */
+      QueryManager queryManager = getSession(sProvider).getWorkspace().getQueryManager();
+      /* create Query object */
+      Query query = queryManager.createQuery(sb.toString(), Query.SQL);
+      /* execute query and return result to QueryResult */
+      QueryResult result = query.execute();
+      /* transfer data to NodeIterator */
+      NodeIterator nodes = result.getNodes();
+      List<Book> books = new ArrayList<Book>();
+      while (nodes.hasNext()) {
+        Node node = nodes.nextNode();
+        books.add(createBookByNode(node));        
+      }
+      return books;
+    } catch (RepositoryException re) {
+      log.error("Can not find book", re);
+      return null;
+    } finally {
+      sProvider.close();
+    }
+  }
+  
+  /**
+   * The function support search book by name with like condition(using XPath)
+   * 
+   * @param name The name of book
+   * @return List<Book>
+   */
+  public List<Book> searchBookByNameLikeXPath(String name) {
+    /* replace "" sign and - sign */
+    name.replaceAll("\"", "\\\"").replaceAll("-", StringUtils.EMPTY);
+    /* create query string */
+    StringBuffer sb = new StringBuffer("//element(*," + BookNodeTypes.EXO_BOOK + ")[jcr:like(@"
+        + BookNodeTypes.EXO_BOOK_NAME + ",'%" + name + "%')]");
+    SessionProvider sProvider = SessionProvider.createSystemProvider();
+    try {
+      /* create QueryManager from session */
+      QueryManager queryManager = getSession(sProvider).getWorkspace().getQueryManager();
+      /* create Query object */
+      Query query = queryManager.createQuery(sb.toString(), Query.XPATH);
+      /* execute query and return result to QueryResult */
+      QueryResult result = query.execute();
+      /* transfer data to NodeIterator */
+      NodeIterator nodes = result.getNodes();
+      List<Book> books = new ArrayList<Book>();
+      while (nodes.hasNext()) {
+        Node node = nodes.nextNode();
+        books.add(createBookByNode(node));        
+      }
+      return books;
+    } catch (RepositoryException re) {
+      log.error("Can not find book", re);
+      return null;
+    } finally {
+      sProvider.close();
+    }
+  }
+  
+  /**
+   * The function check book exist by name
+   * 
+   * @param bookName The name of book
+   * @param sProvider
+   * @return boolean
+   */
+  private boolean isExistBookName(String bookName, SessionProvider sProvider) {
+    /* replace "" sign and - sign */
+    bookName.replace("\"", "\\\"").replaceAll("-", StringUtils.EMPTY);
+    /* create query string */
+    StringBuffer queryString = new StringBuffer("select * from " + BookNodeTypes.EXO_BOOK);
+    queryString.append(" where " + BookNodeTypes.EXO_BOOK_NAME + " = '" + bookName + "'");
+    try {
+      /* create QueryManager from session */
+      QueryManager queryManager = getSession(sProvider).getWorkspace().getQueryManager();
+      /* create Query object */
+      Query query = queryManager.createQuery(queryString.toString(), Query.SQL);
+      /* execute query and return result to QueryResult */
+      QueryResult result = query.execute();
+      /* transfer data to NodeIterator */
+      NodeIterator iterator = result.getNodes();
+      return iterator.hasNext();
+    } catch (RepositoryException re) {
+      log.error("Failed to check exist book name", re);
+      return false;
+    }
+  }
+  
+  /**
+   * Create book by node data
+   * 
+   * @param node
+   * @return
+   * @throws RepositoryException
+   */
+  private Book createBookByNode(Node node) throws RepositoryException {
+    if (node != null) {
+      Book book = new Book();
+      try {
+        book.setId(Integer.valueOf(node.getName()));
+      } catch (Exception e) {
+        return null;
+      }
+      PropertyReader reader = new PropertyReader(node);
+      book.setCategory(Utils.bookCategoryStringToEnum(reader.string(BookNodeTypes.EXO_BOOK_CATEGORY)));
+      book.setName(reader.string(BookNodeTypes.EXO_BOOK_NAME));
+      book.setContent(reader.string(BookNodeTypes.EXO_BOOK_CONTENT));
+      return book;
+    }
+    return null;
+  }
+  
+}
diff --git a/src/main/java/exoplatform/entity/Author.java b/src/main/java/exoplatform/entity/Author.java
new file mode 100644
index 0000000..06c5a07
--- /dev/null
+++ b/src/main/java/exoplatform/entity/Author.java
@@ -0,0 +1,108 @@
+/*
+ * Copyright (C) 2003-2012 eXo Platform SAS.
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program. If not, see <http://www.gnu.org/licenses/>.
+ */
+package exoplatform.entity;
+
+/**
+ * Created by The eXo Platform SAS
+ * Author : BinhNV
+ *          binhnv@exoplatform.com
+ * Jul 13, 2012  
+ */
+public class Author {
+
+  private int id;
+  private String name;
+  private String address;
+  private String phone;
+  
+  /**
+   * Author constructor without param
+   */
+  public Author() {
+    
+  }
+  
+  /**
+   * Author constructor with param
+   * 
+   * @param name The name of author
+   * @param address The address of author
+   * @param phone The phone of author
+   */
+  public Author(String name, String address, String phone) {
+    this.name = name;
+    this.address = address;
+    this.phone = phone;
+  }
+
+  /**
+   * @return the id
+   */
+  public int getId() {
+    return id;
+  }
+
+  /**
+   * @param id the id to set
+   */
+  public void setId(int id) {
+    this.id = id;
+  }
+
+  /**
+   * @return the name
+   */
+  public String getName() {
+    return name;
+  }
+
+  /**
+   * @param name the name to set
+   */
+  public void setName(String name) {
+    this.name = name;
+  }
+
+  /**
+   * @return the address
+   */
+  public String getAddress() {
+    return address;
+  }
+
+  /**
+   * @param address the address to set
+   */
+  public void setAddress(String address) {
+    this.address = address;
+  }
+
+  /**
+   * @return the phone
+   */
+  public String getPhone() {
+    return phone;
+  }
+
+  /**
+   * @param phone the phone to set
+   */
+  public void setPhone(String phone) {
+    this.phone = phone;
+  }
+
+}
diff --git a/src/main/java/exoplatform/entity/Book.java b/src/main/java/exoplatform/entity/Book.java
new file mode 100644
index 0000000..8f5daff
--- /dev/null
+++ b/src/main/java/exoplatform/entity/Book.java
@@ -0,0 +1,112 @@
+/*
+ * Copyright (C) 2003-2012 eXo Platform SAS.
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program. If not, see <http://www.gnu.org/licenses/>.
+ */
+package exoplatform.entity;
+
+
+/**
+ * Created by The eXo Platform SAS
+ * Author : BinhNV
+ *          binhnv@exoplatform.com
+ * Jul 5, 2012  
+ */
+public class Book {
+
+  /* Define book category */
+  public enum CATEGORY {
+    NOVEL, MANGA, COMICS, TECHNICAL, MATHS, HISTORY
+  }
+  /* id of book */
+  private int id;
+  /* name of book */
+  private String name;
+  /*category of book*/
+  private CATEGORY category;
+  /* content of book */
+  private String content;
+  
+  /**
+   * Book constructor
+   * 
+   */
+  public Book() {
+    
+  }
+  
+  /**
+   * Book constructor
+   * 
+   * @param name The name of book
+   * @param category The category of book
+   * @param content The content of book
+   * 
+   */
+  public Book(String name, CATEGORY category, String content) {
+    this.name = name;
+    this.category = category;
+    this.content = content;
+  }
+  
+  /**
+   * @return the id
+   */
+  public int getId() {
+    return id;
+  }
+  /**
+   * @param id the id to set
+   */
+  public void setId(int id) {
+    this.id = id;
+  }
+  /**
+   * @return the name
+   */
+  public String getName() {
+    return name;
+  }
+  /**
+   * @param name the name to set
+   */
+  public void setName(String name) {
+    this.name = name;
+  }
+  /**
+   * @return the category
+   */
+  public CATEGORY getCategory() {
+    return category;
+  }
+  /**
+   * @param category the category to set
+   */
+  public void setCategory(CATEGORY category) {
+    this.category = category;
+  }
+  /**
+   * @return the content
+   */
+  public String getContent() {
+    return content;
+  }
+  /**
+   * @param content the content to set
+   */
+  public void setContent(String content) {
+    this.content = content;
+  }
+  
+}
diff --git a/src/main/java/exoplatform/exception/BookNotFoundException.java b/src/main/java/exoplatform/exception/BookNotFoundException.java
new file mode 100644
index 0000000..0276656
--- /dev/null
+++ b/src/main/java/exoplatform/exception/BookNotFoundException.java
@@ -0,0 +1,61 @@
+/*
+ * Copyright (C) 2003-2012 eXo Platform SAS.
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program. If not, see <http://www.gnu.org/licenses/>.
+ */
+package exoplatform.exception;
+
+/**
+ * Created by The eXo Platform SAS
+ * Author : BinhNV
+ *          binhnv@exoplatform.com
+ * Jul 5, 2012  
+ */
+public class BookNotFoundException extends Exception {
+
+  /**
+   * The serialVersionUID generate
+   */
+  private static final long serialVersionUID = -6563284439822341457L;
+
+  /**
+   * BookNotFoundException constructor
+   */
+  public BookNotFoundException() {
+    super();
+  }
+
+  /**
+   * @param message
+   */
+  public BookNotFoundException(String message) {
+    super(message);
+  }
+
+  /**
+   * @param cause
+   */
+  public BookNotFoundException(Throwable cause) {
+    super(cause);
+  }
+
+  /**
+   * @param message
+   * @param cause
+   */
+  public BookNotFoundException(String message, Throwable cause) {
+    super(message, cause);
+  }
+
+}
diff --git a/src/main/java/exoplatform/exception/DuplicateBookException.java b/src/main/java/exoplatform/exception/DuplicateBookException.java
new file mode 100644
index 0000000..85a2545
--- /dev/null
+++ b/src/main/java/exoplatform/exception/DuplicateBookException.java
@@ -0,0 +1,62 @@
+/*
+ * Copyright (C) 2003-2012 eXo Platform SAS.
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program. If not, see <http://www.gnu.org/licenses/>.
+ */
+package exoplatform.exception;
+
+/**
+ * Created by The eXo Platform SAS
+ * Author : BinhNV
+ *          binhnv@exoplatform.com
+ * Jul 5, 2012  
+ */
+public class DuplicateBookException extends Exception {
+
+  /**
+   * The serialVersionUID generate
+   * 
+   */
+  private static final long serialVersionUID = 5782743207363254715L;
+
+  /**
+   * DuplicateBookException constructor
+   */
+  public DuplicateBookException() {
+    super();
+  }
+
+  /**
+   * @param message
+   */
+  public DuplicateBookException(String message) {
+    super(message);
+  }
+
+  /**
+   * @param cause
+   */
+  public DuplicateBookException(Throwable cause) {
+    super(cause);
+  }
+
+  /**
+   * @param message
+   * @param cause
+   */
+  public DuplicateBookException(String message, Throwable cause) {
+    super(message, cause);
+  }
+
+}
diff --git a/src/main/java/exoplatform/utils/PropertyReader.java b/src/main/java/exoplatform/utils/PropertyReader.java
new file mode 100644
index 0000000..98018bb
--- /dev/null
+++ b/src/main/java/exoplatform/utils/PropertyReader.java
@@ -0,0 +1,186 @@
+/*
+ * Copyright (C) 2003-2012 eXo Platform SAS.
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program. If not, see <http://www.gnu.org/licenses/>.
+ */
+package exoplatform.utils;
+
+import java.util.ArrayList;
+import java.util.Date;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Set;
+
+import javax.jcr.Node;
+import javax.jcr.RepositoryException;
+import javax.jcr.Value;
+
+/**
+ * Created by The eXo Platform SAS
+ * Author : BinhNV
+ *          binhnv@exoplatform.com
+ * Jul 6, 2012  
+ */
+public class PropertyReader {
+
+  Node node = null;
+  
+  /**
+   * PropertyReader constructor
+   * @param node 
+   * 
+   */
+  public PropertyReader(Node node) {
+    this.node = node;
+  }
+  
+  /**
+   * The function get property of node 
+   * and change to Double type 
+   * 
+   * @param name The name of node
+   * @return Double value
+   * @throws RepositoryException
+   */
+  public Double d(String name) throws RepositoryException {
+    return node.getProperty(name).getDouble();
+  }
+  
+  /**
+   * The function get property of node 
+   * and change to Long type
+   * 
+   * @param name The name of node
+   * @return Long value
+   * @throws RepositoryException
+   */
+  public Long l(String name) throws RepositoryException {
+    return node.getProperty(name).getLong();
+  }
+  
+  /**
+   * The function get property of node
+   * and change to String type
+   * 
+   * @param name The name of node
+   * @return String value
+   * @throws RepositoryException
+   */
+  public String string(String name) throws RepositoryException {
+    return node.getProperty(name).getString();
+  }
+  
+  /**
+   * The function get property of node
+   * and change to Date type
+   * 
+   * @param name The name of node
+   * @return Date value
+   * @throws RepositoryException
+   */
+  public Date date(String name) throws RepositoryException {
+    return node.getProperty(name).getDate().getTime();
+  }
+  
+  /**
+   * The function get property of node
+   * and change to Boolean type
+   * 
+   * @param name The name of node
+   * @return Boolean value
+   * @throws RepositoryException
+   */
+  public Boolean bool(String name) throws RepositoryException {
+    return node.getProperty(name).getBoolean();
+  }
+  
+  /**
+   * The function get value properties of node 
+   * and change to String array
+   * 
+   * @param name The name of node
+   * @return String array
+   * @throws RepositoryException
+   */
+  public String[] strings(String name) throws RepositoryException {
+      return valueToArray(node.getProperty(name).getValues());
+  }
+  
+  /**
+   * The function get value properties of node
+   * and change to List<String>
+   * 
+   * @param name The name of node
+   * @return List<String>
+   * @throws RepositoryException
+   */
+  public List<String> list(String name) throws RepositoryException {
+    Value[] values = node.getProperty(name).getValues();
+    return valueToList(values);
+  }
+  
+  /**
+   * The function get value properties of node
+   * and change to Set<String>
+   * 
+   * @param name The name of node
+   * @return Set<String>
+   * @throws RepositoryException
+   */
+  public Set<String> set(String name) throws RepositoryException {
+      Value[] values = node.getProperty(name).getValues();
+      Set<String> result = new HashSet<String>();
+      result.addAll(valueToList(values));
+      return result;
+  }
+  
+  /**
+   * The function get value properties of node
+   * and change to String array
+   * 
+   * @param values The array of value
+   * @return String array
+   * @throws RepositoryException
+   */
+  private String[] valueToArray(Value[] values) throws RepositoryException {
+    if (values.length < 1) {
+      return new String[] {};
+    }
+    List<String> list = valueToList(values);
+    return list.toArray(new String[list.size()]);
+  }
+  
+  /**
+   * The function get value properties of node
+   * and return List<String>
+   * @param values The Value array
+   * @return List<String>
+   * @throws RepositoryException
+   */
+  private List<String> valueToList(Value[] values) throws RepositoryException {
+    List<String> list = new ArrayList<String>();
+    if (values.length < 1) {
+      return list;
+    }
+    String s = "";
+    for (Value value : values) {
+      s = value.getString();
+      if (s != null && s.trim().length() > 0) {
+        list.add(s);
+      }
+    }
+    return list;
+  }
+
+}
diff --git a/src/main/java/exoplatform/utils/Utils.java b/src/main/java/exoplatform/utils/Utils.java
new file mode 100644
index 0000000..ca5494b
--- /dev/null
+++ b/src/main/java/exoplatform/utils/Utils.java
@@ -0,0 +1,69 @@
+/*
+ * Copyright (C) 2003-2012 eXo Platform SAS.
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program. If not, see <http://www.gnu.org/licenses/>.
+ */
+package exoplatform.utils;
+
+import exoplatform.entity.Book;
+
+/**
+ * Created by The eXo Platform SAS
+ * Author : BinhNV
+ *          binhnv@exoplatform.com
+ * Jul 5, 2012  
+ */
+public class Utils {
+
+  /** 
+   * Define a static variable which contain id of book 
+   * id of book will increase 1 value when a new book create
+   * 
+   **/
+  public static int bookId = 0;
+  
+  /** 
+   * Define a static variable which contain id of author 
+   * id of author will increase 1 value when a new author create
+   * 
+   **/
+  public static int authorId = 0;
+  
+  /**
+   * Convert enum value to String value 
+   * 
+   * @param category Enum value of category
+   * @return String value of category
+   */
+  public static String bookCategoryEnumToString(Book.CATEGORY category) {
+    if (category != null) {
+      return category.toString();
+    }
+    return null;
+  }
+  
+  /**
+   * Convert String value to enum value
+   * 
+   * @param category String value of category
+   * @return Book.CATEGORY of category
+   */
+  public static Book.CATEGORY bookCategoryStringToEnum(String category) {
+    if (category != null) {
+      return Book.CATEGORY.valueOf(category);
+    }
+    return null;
+  }
+  
+}
diff --git a/src/main/resources/conf/portal/bookstore-configuration.xml b/src/main/resources/conf/portal/bookstore-configuration.xml
new file mode 100644
index 0000000..29f1ffb
--- /dev/null
+++ b/src/main/resources/conf/portal/bookstore-configuration.xml
@@ -0,0 +1,13 @@
+<?xml version="1.0" encoding="ISO-8859-1"?>
+<configuration xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.exoplaform.org/xml/ns/kernel_1_0.xsd
+	http://www.exoplaform.org/xml/ns/kernel_1_0.xsd" xmlns="http://www.exoplaform.org/xml/ns/kernel_1_0.xsd">
+	<component>
+		<key>exoplatform.JCRDataStorage</key>
+		<type>exoplatform.JCRDataStorage</type>
+	</component>
+	<component>
+	    <key>exoplatform.BookStoreService</key>
+	    <type>exoplatform.BookStoreService</type>
+    </component>
+
+</configuration>
\ No newline at end of file
diff --git a/src/main/resources/conf/portal/configuration.xml b/src/main/resources/conf/portal/configuration.xml
new file mode 100644
index 0000000..50e229b
--- /dev/null
+++ b/src/main/resources/conf/portal/configuration.xml
@@ -0,0 +1,10 @@
+<?xml version="1.0" encoding="ISO-8859-1"?>
+<configuration 
+	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
+	xsi:schemaLocation="http://www.exoplaform.org/xml/ns/kernel_1_0.xsd http://www.exoplaform.org/xml/ns/kernel_1_0.xsd"
+	 xmlns="http://www.exoplaform.org/xml/ns/kernel_1_0.xsd">
+	<import>jar:/conf/portal/jcr-configuration.xml</import>
+	<import>jar:/conf/portal/jcr-component-plugins-configuration.xml</import>
+	<import>jar:/conf/portal/jcr-nodetypes-configuration.xml</import>
+	<import>jar:/conf/portal/bookstore-configuration.xml</import>
+</configuration>
\ No newline at end of file
diff --git a/src/main/resources/conf/portal/jcr-component-plugins-configuration.xml b/src/main/resources/conf/portal/jcr-component-plugins-configuration.xml
new file mode 100644
index 0000000..04ff268
--- /dev/null
+++ b/src/main/resources/conf/portal/jcr-component-plugins-configuration.xml
@@ -0,0 +1,114 @@
+<?xml version="1.0" encoding="ISO-8859-1"?>
+<!-- This file create new root path -->
+<configuration xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.exoplaform.org/xml/ns/kernel_1_0.xsd http://www.exoplaform.org/xml/ns/kernel_1_0.xsd"
+  xmlns="http://www.exoplaform.org/xml/ns/kernel_1_0.xsd">
+  <external-component-plugins>
+    <target-component>org.exoplatform.services.jcr.ext.hierarchy.NodeHierarchyCreator</target-component>
+    <component-plugin>
+      	<name>addPaths</name>
+      	<set-method>addPlugin</set-method>
+      	<type>org.exoplatform.services.jcr.ext.hierarchy.impl.AddPathPlugin</type>            
+      	<init-params>
+        	<object-param>
+          		<name>cms.configuration</name>
+          		<description>configuration for the cms path</description>
+          		<object type="org.exoplatform.services.jcr.ext.hierarchy.impl.HierarchyConfig">
+		            <field name="workspaces">
+		              <collection type="java.util.ArrayList">
+		                <value><string>bookstore</string></value>
+		              </collection>                
+		            </field>
+	            	<field  name="jcrPaths">
+		 	        	<collection type="java.util.ArrayList">
+			            	<value>                
+	        		        	<object type="org.exoplatform.services.jcr.ext.hierarchy.impl.HierarchyConfig$JcrPath">                   
+		                     		<field  name="alias"><string>exobookstore</string></field>
+		                     		<field  name="path"><string>/exostore:bookstore</string></field>                                          
+		                     		<field name="permissions">
+		                       			<collection type="java.util.ArrayList">               
+		                         			<value>                            
+		                           				<object type="org.exoplatform.services.jcr.ext.hierarchy.impl.HierarchyConfig$Permission">
+													  <field name="identity"><string>*:/platform/administrators</string></field>
+						                              <field name="read"><string>true</string></field>                
+						                              <field name="addNode"><string>true</string></field>                
+						                              <field name="setProperty"><string>true</string></field>                
+						                              <field name="remove"><string>true</string></field>                
+		                           				</object>  
+		                        			</value>     
+											<value>                            
+		                           				<object type="org.exoplatform.services.jcr.ext.hierarchy.impl.HierarchyConfig$Permission">
+						                              <field name="identity"><string>any</string></field>
+						                              <field name="read"><string>true</string></field>                
+						                              <field name="addNode"><string>false</string></field>                
+						                              <field name="setProperty"><string>true</string></field>                
+						                              <field name="remove"><string>false</string></field>                
+		                           				</object>  
+		                        			</value>                   
+		                      			</collection>
+		                    		</field>                                   
+	                  			</object>
+	                  		</value>
+	                  		<value>
+	                  			<object type="org.exoplatform.services.jcr.ext.hierarchy.impl.HierarchyConfig$JcrPath">                   
+		                     		<field  name="alias"><string>book</string></field>
+		                     		<field  name="path"><string>/exostore:bookstore/exostore:book</string></field>                                          
+		                     		<field name="permissions">
+		                       			<collection type="java.util.ArrayList">               
+		                         			<value>                            
+		                           				<object type="org.exoplatform.services.jcr.ext.hierarchy.impl.HierarchyConfig$Permission">
+													  <field name="identity"><string>*:/platform/administrators</string></field>
+						                              <field name="read"><string>true</string></field>                
+						                              <field name="addNode"><string>true</string></field>                
+						                              <field name="setProperty"><string>true</string></field>                
+						                              <field name="remove"><string>true</string></field>                
+		                           				</object>  
+		                        			</value>     
+											<value>                            
+		                           				<object type="org.exoplatform.services.jcr.ext.hierarchy.impl.HierarchyConfig$Permission">
+						                              <field name="identity"><string>any</string></field>
+						                              <field name="read"><string>true</string></field>                
+						                              <field name="addNode"><string>false</string></field>                
+						                              <field name="setProperty"><string>true</string></field>                
+						                              <field name="remove"><string>false</string></field>                
+		                           				</object>  
+		                        			</value>                   
+		                      			</collection>
+		                    		</field>                                   
+	                  			</object>
+	                  		</value>
+	                  		<value>
+	                  			<object type="org.exoplatform.services.jcr.ext.hierarchy.impl.HierarchyConfig$JcrPath">                   
+		                     		<field  name="alias"><string>author</string></field>
+		                     		<field  name="path"><string>/exostore:bookstore/exostore:author</string></field>                                          
+		                     		<field name="permissions">
+		                       			<collection type="java.util.ArrayList">               
+		                         			<value>                            
+		                           				<object type="org.exoplatform.services.jcr.ext.hierarchy.impl.HierarchyConfig$Permission">
+													  <field name="identity"><string>*:/platform/administrators</string></field>
+						                              <field name="read"><string>true</string></field>                
+						                              <field name="addNode"><string>true</string></field>                
+						                              <field name="setProperty"><string>true</string></field>                
+						                              <field name="remove"><string>true</string></field>                
+		                           				</object>  
+		                        			</value>     
+											<value>                            
+		                           				<object type="org.exoplatform.services.jcr.ext.hierarchy.impl.HierarchyConfig$Permission">
+						                              <field name="identity"><string>any</string></field>
+						                              <field name="read"><string>true</string></field>                
+						                              <field name="addNode"><string>false</string></field>                
+						                              <field name="setProperty"><string>true</string></field>                
+						                              <field name="remove"><string>false</string></field>                
+		                           				</object>  
+		                        			</value>                   
+		                      			</collection>
+		                    		</field>                                   
+	                  			</object>
+	                		</value>
+	             	</collection>  
+	            </field>
+        	</object>
+        </object-param>
+      </init-params>            
+    </component-plugin>
+  </external-component-plugins>
+</configuration>
diff --git a/src/main/resources/conf/portal/jcr-configuration.xml b/src/main/resources/conf/portal/jcr-configuration.xml
new file mode 100644
index 0000000..4c69fdd
--- /dev/null
+++ b/src/main/resources/conf/portal/jcr-configuration.xml
@@ -0,0 +1,25 @@
+<?xml version="1.0" encoding="ISO-8859-1"?>
+<configuration
+  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+  xsi:schemaLocation="http://www.exoplaform.org/xml/ns/kernel_1_0.xsd http://www.exoplaform.org/xml/ns/kernel_1_0.xsd"
+  xmlns="http://www.exoplaform.org/xml/ns/kernel_1_0.xsd">
+  <external-component-plugins>
+    <!-- The full qualified name of the RepositoryServiceConfiguration -->
+    <target-component>org.exoplatform.services.jcr.config.RepositoryServiceConfiguration</target-component>
+    <component-plugin>
+      <!-- The name of the plugin -->
+      <name>Sample RepositoryServiceConfiguration Plugin</name>
+      <!-- The name of the method to call on the RepositoryServiceConfiguration in order to add the RepositoryServiceConfigurations -->
+      <set-method>addConfig</set-method>
+      <!-- The full qualified name of the RepositoryServiceConfigurationPlugin -->
+      <type>org.exoplatform.services.jcr.impl.config.RepositoryServiceConfigurationPlugin</type>
+      <init-params>
+        <value-param>
+          <name>conf-path</name>
+          <description>JCR configuration file</description>
+          <value>jar:/conf/portal/repository-configuration.xml</value>
+        </value-param>
+      </init-params>
+    </component-plugin>
+  </external-component-plugins>
+</configuration>
diff --git a/src/main/resources/conf/portal/jcr-nodetypes-configuration.xml b/src/main/resources/conf/portal/jcr-nodetypes-configuration.xml
new file mode 100644
index 0000000..41a267c
--- /dev/null
+++ b/src/main/resources/conf/portal/jcr-nodetypes-configuration.xml
@@ -0,0 +1,30 @@
+<?xml version="1.0" encoding="ISO-8859-1"?>
+<configuration xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.exoplaform.org/xml/ns/kernel_1_0.xsd http://www.exoplaform.org/xml/ns/kernel_1_0.xsd"
+  xmlns="http://www.exoplaform.org/xml/ns/kernel_1_0.xsd">
+  <external-component-plugins>
+    <target-component>org.exoplatform.services.jcr.RepositoryService</target-component>  
+    <component-plugin>
+          <name>add.namespaces</name>
+          <set-method>addPlugin</set-method>
+          <type>org.exoplatform.services.jcr.impl.AddNamespacesPlugin</type>
+          <init-params>
+            <properties-param>
+              <name>namespaces</name>
+              <property name="exostore" value="http://www.exoplatform.org/bookstore/1.0"/>
+            </properties-param>
+          </init-params>
+      </component-plugin>    
+    <component-plugin> 
+      <name>add.cs.nodeType</name>
+      <set-method>addPlugin</set-method>
+      <type>org.exoplatform.services.jcr.impl.AddNodeTypePlugin</type>
+      <init-params>
+        <values-param>
+          <name>autoCreatedInNewRepository</name>
+          <description>Node types configuration file</description>
+          <value>jar:/conf/portal/nodetypes.xml</value>
+        </values-param>
+      </init-params>
+    </component-plugin>
+  </external-component-plugins>  
+</configuration>
diff --git a/src/main/resources/conf/portal/nodetypes.xml b/src/main/resources/conf/portal/nodetypes.xml
new file mode 100644
index 0000000..6f40180
--- /dev/null
+++ b/src/main/resources/conf/portal/nodetypes.xml
@@ -0,0 +1,44 @@
+<?xml version="1.0" encoding="ISO-8859-1"?>
+<nodeTypes xmlns:nt="http://www.jcp.org/jcr/nt/1.0" xmlns:mix="http://www.jcp.org/jcr/mix/1.0" xmlns:jcr="http://www.jcp.org/jcr/1.0">
+    
+	<nodeType name="exostore:book" isMixin="false" hasOrderableChildNodes="false" primaryItemName="">
+		<supertypes>
+			<supertype>nt:base</supertype>
+		</supertypes>
+		<propertyDefinitions>
+			<propertyDefinition name="exostore:bookname" requiredType="String" autoCreated="false" mandatory="false" 
+						onParentVersion="COPY" protected="false" multiple="false">
+				<valueConstraints/>
+			</propertyDefinition>
+			<propertyDefinition name="exostore:bookcategory" requiredType="String" autoCreated="false" mandatory="false" 
+						onParentVersion="COPY" protected="false" multiple="false">
+				<valueConstraints/>
+			</propertyDefinition>
+			<propertyDefinition name="exostore:bookcontent" requiredType="String" autoCreated="false" mandatory="false" 
+						onParentVersion="COPY" protected="false" multiple="false">
+				<valueConstraints/>
+			</propertyDefinition>
+		</propertyDefinitions>
+	</nodeType>
+	
+	<nodeType name="exostore:author" isMixin="false" hasOrderableChildNodes="false" primaryItemName="">
+		<supertypes>
+			<supertype>nt:base</supertype>
+		</supertypes>
+		<propertyDefinitions>
+			<propertyDefinition name="exostore:authorname" requiredType="String" autoCreated="false" mandatory="false" 
+						onParentVersion="COPY" protected="false" multiple="false">
+				<valueConstraints/>
+			</propertyDefinition>
+			<propertyDefinition name="exostore:authoraddress" requiredType="String" autoCreated="false" mandatory="false" 
+						onParentVersion="COPY" protected="false" multiple="false">
+				<valueConstraints/>
+			</propertyDefinition>
+			<propertyDefinition name="exostore:authorphone" requiredType="String" autoCreated="false" mandatory="false" 
+						onParentVersion="COPY" protected="false" multiple="false">
+				<valueConstraints/>
+			</propertyDefinition>
+		</propertyDefinitions>
+	</nodeType>
+	
+</nodeTypes>
\ No newline at end of file
diff --git a/src/main/resources/conf/portal/repository-configuration.xml b/src/main/resources/conf/portal/repository-configuration.xml
new file mode 100644
index 0000000..6183884
--- /dev/null
+++ b/src/main/resources/conf/portal/repository-configuration.xml
@@ -0,0 +1,78 @@
+<repository-service default-repository="${gatein.jcr.repository.default}">
+  <repositories>
+    <repository name="${gatein.jcr.repository.default}" system-workspace="${gatein.jcr.workspace.system}" default-workspace="${gatein.jcr.workspace.default}">
+      <security-domain>gatein-domain</security-domain>
+      <access-control>optional</access-control>
+      <authentication-policy>org.exoplatform.services.jcr.impl.core.access.JAASAuthenticator</authentication-policy>
+      <workspaces>
+        <workspace name="bookstore">
+          <container class="org.exoplatform.services.jcr.impl.storage.jdbc.optimisation.CQJDBCWorkspaceDataContainer">
+            <properties>
+              <property name="source-name" value="${gatein.jcr.datasource.name}${container.name.suffix}"/>
+              <property name="dialect" value="${gatein.jcr.datasource.dialect}"/>
+              <property name="multi-db" value="false"/>
+              <property name="update-storage" value="true"/>
+              <property name="max-buffer-size" value="200k"/>
+              <property name="swap-directory" value="${gatein.jcr.data.dir}/swap/bookstore${container.name.suffix}"/>
+            </properties>
+            <value-storages>
+              <value-storage id="bookstore" class="org.exoplatform.services.jcr.impl.storage.value.fs.TreeFileValueStorage">
+                <properties>
+                  <property name="path" value="${gatein.jcr.storage.data.dir}/bookstore${container.name.suffix}"/>
+                </properties>
+                <filters>
+                  <filter property-type="Binary"/>
+                </filters>
+              </value-storage>
+            </value-storages>
+          </container>
+          <initializer class="org.exoplatform.services.jcr.impl.core.ScratchWorkspaceInitializer">
+            <properties>
+              <property name="root-nodetype" value="nt:unstructured"/>
+              <property name="root-permissions" value="any read;*:/platform/administrators read;*:/platform/administrators add_node;*:/platform/administrators set_property;*:/platform/administrators remove"/>
+            </properties>
+          </initializer>
+          <cache enabled="true" class="org.exoplatform.services.jcr.impl.dataflow.persistent.jbosscache.JBossCacheWorkspaceStorageCache">
+            <properties>
+              <property name="jbosscache-configuration" value="${gatein.jcr.cache.config}" />
+              <property name="jgroups-configuration" value="${gatein.jcr.jgroups.config}" />
+              <property name="jbosscache-cluster-name" value="jcr-cache${container.name.suffix}" />
+              <property name="jbosscache-shareable" value="true" />
+              <property name="jbosscache-expiration-time" value="${gatein.jcr.cache.expiration.time}" />
+            </properties>
+          </cache>
+          <query-handler class="org.exoplatform.services.jcr.impl.core.query.lucene.SearchIndex">
+            <properties>
+              <property name="index-dir" value="${gatein.jcr.index.data.dir}/bookstore${container.name.suffix}"/>
+              <property name="changesfilter-class" value="${gatein.jcr.index.changefilterclass}" />
+              <property name="jbosscache-configuration" value="${gatein.jcr.index.cache.config}" />
+              <property name="jgroups-configuration" value="${gatein.jcr.jgroups.config}" />
+              <property name="jbosscache-cluster-name" value="jcr-indexer${container.name.suffix}" />
+              <property name="jbosscache-shareable" value="true" />
+              <property name="max-volatile-time" value="60" />
+            </properties>
+          </query-handler>
+          
+          <lock-manager class="org.exoplatform.services.jcr.impl.core.lock.jbosscache.CacheableLockManagerImpl">
+            <properties>
+              <property name="time-out" value="15m" />
+              <property name="jbosscache-configuration" value="${gatein.jcr.lock.cache.config}" />
+              <property name="jgroups-configuration" value="${gatein.jcr.jgroups.config}" />
+              <property name="jbosscache-cluster-name" value="jcr-lock${container.name.suffix}" />
+              <property name="jbosscache-shareable" value="true" />
+              <property name="jbosscache-cl-cache.jdbc.table.name" value="jcrlocks" />
+              <property name="jbosscache-cl-cache.jdbc.table.create" value="true" />
+              <property name="jbosscache-cl-cache.jdbc.table.drop" value="false" />
+              <property name="jbosscache-cl-cache.jdbc.table.primarykey" value="pk" />
+              <property name="jbosscache-cl-cache.jdbc.fqn.column" value="fqn" />
+              <property name="jbosscache-cl-cache.jdbc.node.column" value="node" />
+              <property name="jbosscache-cl-cache.jdbc.parent.column" value="parent" />
+              <property name="jbosscache-cl-cache.jdbc.datasource" value="${gatein.jcr.datasource.name}${container.name.suffix}" />
+            </properties>
+          </lock-manager>
+
+        </workspace>
+      </workspaces>
+    </repository>
+  </repositories>
+</repository-service>
diff --git a/src/test/java/exoplatform/AppTest.java b/src/test/java/exoplatform/AppTest.java
new file mode 100644
index 0000000..472b9fd
--- /dev/null
+++ b/src/test/java/exoplatform/AppTest.java
@@ -0,0 +1,38 @@
+package exoplatform;
+
+import junit.framework.Test;
+import junit.framework.TestCase;
+import junit.framework.TestSuite;
+
+/**
+ * Unit test for simple App.
+ */
+public class AppTest 
+    extends TestCase
+{
+    /**
+     * Create the test case
+     *
+     * @param testName name of the test case
+     */
+    public AppTest( String testName )
+    {
+        super( testName );
+    }
+
+    /**
+     * @return the suite of tests being tested
+     */
+    public static Test suite()
+    {
+        return new TestSuite( AppTest.class );
+    }
+
+    /**
+     * Rigourous Test :-)
+     */
+    public void testApp()
+    {
+        assertTrue( true );
+    }
+}
diff --git a/target/classes/conf/portal/bookstore-configuration.xml b/target/classes/conf/portal/bookstore-configuration.xml
new file mode 100644
index 0000000..29f1ffb
--- /dev/null
+++ b/target/classes/conf/portal/bookstore-configuration.xml
@@ -0,0 +1,13 @@
+<?xml version="1.0" encoding="ISO-8859-1"?>
+<configuration xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.exoplaform.org/xml/ns/kernel_1_0.xsd
+	http://www.exoplaform.org/xml/ns/kernel_1_0.xsd" xmlns="http://www.exoplaform.org/xml/ns/kernel_1_0.xsd">
+	<component>
+		<key>exoplatform.JCRDataStorage</key>
+		<type>exoplatform.JCRDataStorage</type>
+	</component>
+	<component>
+	    <key>exoplatform.BookStoreService</key>
+	    <type>exoplatform.BookStoreService</type>
+    </component>
+
+</configuration>
\ No newline at end of file
diff --git a/target/classes/conf/portal/configuration.xml b/target/classes/conf/portal/configuration.xml
new file mode 100644
index 0000000..50e229b
--- /dev/null
+++ b/target/classes/conf/portal/configuration.xml
@@ -0,0 +1,10 @@
+<?xml version="1.0" encoding="ISO-8859-1"?>
+<configuration 
+	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
+	xsi:schemaLocation="http://www.exoplaform.org/xml/ns/kernel_1_0.xsd http://www.exoplaform.org/xml/ns/kernel_1_0.xsd"
+	 xmlns="http://www.exoplaform.org/xml/ns/kernel_1_0.xsd">
+	<import>jar:/conf/portal/jcr-configuration.xml</import>
+	<import>jar:/conf/portal/jcr-component-plugins-configuration.xml</import>
+	<import>jar:/conf/portal/jcr-nodetypes-configuration.xml</import>
+	<import>jar:/conf/portal/bookstore-configuration.xml</import>
+</configuration>
\ No newline at end of file
diff --git a/target/classes/conf/portal/jcr-component-plugins-configuration.xml b/target/classes/conf/portal/jcr-component-plugins-configuration.xml
new file mode 100644
index 0000000..04ff268
--- /dev/null
+++ b/target/classes/conf/portal/jcr-component-plugins-configuration.xml
@@ -0,0 +1,114 @@
+<?xml version="1.0" encoding="ISO-8859-1"?>
+<!-- This file create new root path -->
+<configuration xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.exoplaform.org/xml/ns/kernel_1_0.xsd http://www.exoplaform.org/xml/ns/kernel_1_0.xsd"
+  xmlns="http://www.exoplaform.org/xml/ns/kernel_1_0.xsd">
+  <external-component-plugins>
+    <target-component>org.exoplatform.services.jcr.ext.hierarchy.NodeHierarchyCreator</target-component>
+    <component-plugin>
+      	<name>addPaths</name>
+      	<set-method>addPlugin</set-method>
+      	<type>org.exoplatform.services.jcr.ext.hierarchy.impl.AddPathPlugin</type>            
+      	<init-params>
+        	<object-param>
+          		<name>cms.configuration</name>
+          		<description>configuration for the cms path</description>
+          		<object type="org.exoplatform.services.jcr.ext.hierarchy.impl.HierarchyConfig">
+		            <field name="workspaces">
+		              <collection type="java.util.ArrayList">
+		                <value><string>bookstore</string></value>
+		              </collection>                
+		            </field>
+	            	<field  name="jcrPaths">
+		 	        	<collection type="java.util.ArrayList">
+			            	<value>                
+	        		        	<object type="org.exoplatform.services.jcr.ext.hierarchy.impl.HierarchyConfig$JcrPath">                   
+		                     		<field  name="alias"><string>exobookstore</string></field>
+		                     		<field  name="path"><string>/exostore:bookstore</string></field>                                          
+		                     		<field name="permissions">
+		                       			<collection type="java.util.ArrayList">               
+		                         			<value>                            
+		                           				<object type="org.exoplatform.services.jcr.ext.hierarchy.impl.HierarchyConfig$Permission">
+													  <field name="identity"><string>*:/platform/administrators</string></field>
+						                              <field name="read"><string>true</string></field>                
+						                              <field name="addNode"><string>true</string></field>                
+						                              <field name="setProperty"><string>true</string></field>                
+						                              <field name="remove"><string>true</string></field>                
+		                           				</object>  
+		                        			</value>     
+											<value>                            
+		                           				<object type="org.exoplatform.services.jcr.ext.hierarchy.impl.HierarchyConfig$Permission">
+						                              <field name="identity"><string>any</string></field>
+						                              <field name="read"><string>true</string></field>                
+						                              <field name="addNode"><string>false</string></field>                
+						                              <field name="setProperty"><string>true</string></field>                
+						                              <field name="remove"><string>false</string></field>                
+		                           				</object>  
+		                        			</value>                   
+		                      			</collection>
+		                    		</field>                                   
+	                  			</object>
+	                  		</value>
+	                  		<value>
+	                  			<object type="org.exoplatform.services.jcr.ext.hierarchy.impl.HierarchyConfig$JcrPath">                   
+		                     		<field  name="alias"><string>book</string></field>
+		                     		<field  name="path"><string>/exostore:bookstore/exostore:book</string></field>                                          
+		                     		<field name="permissions">
+		                       			<collection type="java.util.ArrayList">               
+		                         			<value>                            
+		                           				<object type="org.exoplatform.services.jcr.ext.hierarchy.impl.HierarchyConfig$Permission">
+													  <field name="identity"><string>*:/platform/administrators</string></field>
+						                              <field name="read"><string>true</string></field>                
+						                              <field name="addNode"><string>true</string></field>                
+						                              <field name="setProperty"><string>true</string></field>                
+						                              <field name="remove"><string>true</string></field>                
+		                           				</object>  
+		                        			</value>     
+											<value>                            
+		                           				<object type="org.exoplatform.services.jcr.ext.hierarchy.impl.HierarchyConfig$Permission">
+						                              <field name="identity"><string>any</string></field>
+						                              <field name="read"><string>true</string></field>                
+						                              <field name="addNode"><string>false</string></field>                
+						                              <field name="setProperty"><string>true</string></field>                
+						                              <field name="remove"><string>false</string></field>                
+		                           				</object>  
+		                        			</value>                   
+		                      			</collection>
+		                    		</field>                                   
+	                  			</object>
+	                  		</value>
+	                  		<value>
+	                  			<object type="org.exoplatform.services.jcr.ext.hierarchy.impl.HierarchyConfig$JcrPath">                   
+		                     		<field  name="alias"><string>author</string></field>
+		                     		<field  name="path"><string>/exostore:bookstore/exostore:author</string></field>                                          
+		                     		<field name="permissions">
+		                       			<collection type="java.util.ArrayList">               
+		                         			<value>                            
+		                           				<object type="org.exoplatform.services.jcr.ext.hierarchy.impl.HierarchyConfig$Permission">
+													  <field name="identity"><string>*:/platform/administrators</string></field>
+						                              <field name="read"><string>true</string></field>                
+						                              <field name="addNode"><string>true</string></field>                
+						                              <field name="setProperty"><string>true</string></field>                
+						                              <field name="remove"><string>true</string></field>                
+		                           				</object>  
+		                        			</value>     
+											<value>                            
+		                           				<object type="org.exoplatform.services.jcr.ext.hierarchy.impl.HierarchyConfig$Permission">
+						                              <field name="identity"><string>any</string></field>
+						                              <field name="read"><string>true</string></field>                
+						                              <field name="addNode"><string>false</string></field>                
+						                              <field name="setProperty"><string>true</string></field>                
+						                              <field name="remove"><string>false</string></field>                
+		                           				</object>  
+		                        			</value>                   
+		                      			</collection>
+		                    		</field>                                   
+	                  			</object>
+	                		</value>
+	             	</collection>  
+	            </field>
+        	</object>
+        </object-param>
+      </init-params>            
+    </component-plugin>
+  </external-component-plugins>
+</configuration>
diff --git a/target/classes/conf/portal/jcr-configuration.xml b/target/classes/conf/portal/jcr-configuration.xml
new file mode 100644
index 0000000..4c69fdd
--- /dev/null
+++ b/target/classes/conf/portal/jcr-configuration.xml
@@ -0,0 +1,25 @@
+<?xml version="1.0" encoding="ISO-8859-1"?>
+<configuration
+  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+  xsi:schemaLocation="http://www.exoplaform.org/xml/ns/kernel_1_0.xsd http://www.exoplaform.org/xml/ns/kernel_1_0.xsd"
+  xmlns="http://www.exoplaform.org/xml/ns/kernel_1_0.xsd">
+  <external-component-plugins>
+    <!-- The full qualified name of the RepositoryServiceConfiguration -->
+    <target-component>org.exoplatform.services.jcr.config.RepositoryServiceConfiguration</target-component>
+    <component-plugin>
+      <!-- The name of the plugin -->
+      <name>Sample RepositoryServiceConfiguration Plugin</name>
+      <!-- The name of the method to call on the RepositoryServiceConfiguration in order to add the RepositoryServiceConfigurations -->
+      <set-method>addConfig</set-method>
+      <!-- The full qualified name of the RepositoryServiceConfigurationPlugin -->
+      <type>org.exoplatform.services.jcr.impl.config.RepositoryServiceConfigurationPlugin</type>
+      <init-params>
+        <value-param>
+          <name>conf-path</name>
+          <description>JCR configuration file</description>
+          <value>jar:/conf/portal/repository-configuration.xml</value>
+        </value-param>
+      </init-params>
+    </component-plugin>
+  </external-component-plugins>
+</configuration>
diff --git a/target/classes/conf/portal/jcr-nodetypes-configuration.xml b/target/classes/conf/portal/jcr-nodetypes-configuration.xml
new file mode 100644
index 0000000..41a267c
--- /dev/null
+++ b/target/classes/conf/portal/jcr-nodetypes-configuration.xml
@@ -0,0 +1,30 @@
+<?xml version="1.0" encoding="ISO-8859-1"?>
+<configuration xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.exoplaform.org/xml/ns/kernel_1_0.xsd http://www.exoplaform.org/xml/ns/kernel_1_0.xsd"
+  xmlns="http://www.exoplaform.org/xml/ns/kernel_1_0.xsd">
+  <external-component-plugins>
+    <target-component>org.exoplatform.services.jcr.RepositoryService</target-component>  
+    <component-plugin>
+          <name>add.namespaces</name>
+          <set-method>addPlugin</set-method>
+          <type>org.exoplatform.services.jcr.impl.AddNamespacesPlugin</type>
+          <init-params>
+            <properties-param>
+              <name>namespaces</name>
+              <property name="exostore" value="http://www.exoplatform.org/bookstore/1.0"/>
+            </properties-param>
+          </init-params>
+      </component-plugin>    
+    <component-plugin> 
+      <name>add.cs.nodeType</name>
+      <set-method>addPlugin</set-method>
+      <type>org.exoplatform.services.jcr.impl.AddNodeTypePlugin</type>
+      <init-params>
+        <values-param>
+          <name>autoCreatedInNewRepository</name>
+          <description>Node types configuration file</description>
+          <value>jar:/conf/portal/nodetypes.xml</value>
+        </values-param>
+      </init-params>
+    </component-plugin>
+  </external-component-plugins>  
+</configuration>
diff --git a/target/classes/conf/portal/nodetypes.xml b/target/classes/conf/portal/nodetypes.xml
new file mode 100644
index 0000000..6f40180
--- /dev/null
+++ b/target/classes/conf/portal/nodetypes.xml
@@ -0,0 +1,44 @@
+<?xml version="1.0" encoding="ISO-8859-1"?>
+<nodeTypes xmlns:nt="http://www.jcp.org/jcr/nt/1.0" xmlns:mix="http://www.jcp.org/jcr/mix/1.0" xmlns:jcr="http://www.jcp.org/jcr/1.0">
+    
+	<nodeType name="exostore:book" isMixin="false" hasOrderableChildNodes="false" primaryItemName="">
+		<supertypes>
+			<supertype>nt:base</supertype>
+		</supertypes>
+		<propertyDefinitions>
+			<propertyDefinition name="exostore:bookname" requiredType="String" autoCreated="false" mandatory="false" 
+						onParentVersion="COPY" protected="false" multiple="false">
+				<valueConstraints/>
+			</propertyDefinition>
+			<propertyDefinition name="exostore:bookcategory" requiredType="String" autoCreated="false" mandatory="false" 
+						onParentVersion="COPY" protected="false" multiple="false">
+				<valueConstraints/>
+			</propertyDefinition>
+			<propertyDefinition name="exostore:bookcontent" requiredType="String" autoCreated="false" mandatory="false" 
+						onParentVersion="COPY" protected="false" multiple="false">
+				<valueConstraints/>
+			</propertyDefinition>
+		</propertyDefinitions>
+	</nodeType>
+	
+	<nodeType name="exostore:author" isMixin="false" hasOrderableChildNodes="false" primaryItemName="">
+		<supertypes>
+			<supertype>nt:base</supertype>
+		</supertypes>
+		<propertyDefinitions>
+			<propertyDefinition name="exostore:authorname" requiredType="String" autoCreated="false" mandatory="false" 
+						onParentVersion="COPY" protected="false" multiple="false">
+				<valueConstraints/>
+			</propertyDefinition>
+			<propertyDefinition name="exostore:authoraddress" requiredType="String" autoCreated="false" mandatory="false" 
+						onParentVersion="COPY" protected="false" multiple="false">
+				<valueConstraints/>
+			</propertyDefinition>
+			<propertyDefinition name="exostore:authorphone" requiredType="String" autoCreated="false" mandatory="false" 
+						onParentVersion="COPY" protected="false" multiple="false">
+				<valueConstraints/>
+			</propertyDefinition>
+		</propertyDefinitions>
+	</nodeType>
+	
+</nodeTypes>
\ No newline at end of file
diff --git a/target/classes/conf/portal/repository-configuration.xml b/target/classes/conf/portal/repository-configuration.xml
new file mode 100644
index 0000000..6183884
--- /dev/null
+++ b/target/classes/conf/portal/repository-configuration.xml
@@ -0,0 +1,78 @@
+<repository-service default-repository="${gatein.jcr.repository.default}">
+  <repositories>
+    <repository name="${gatein.jcr.repository.default}" system-workspace="${gatein.jcr.workspace.system}" default-workspace="${gatein.jcr.workspace.default}">
+      <security-domain>gatein-domain</security-domain>
+      <access-control>optional</access-control>
+      <authentication-policy>org.exoplatform.services.jcr.impl.core.access.JAASAuthenticator</authentication-policy>
+      <workspaces>
+        <workspace name="bookstore">
+          <container class="org.exoplatform.services.jcr.impl.storage.jdbc.optimisation.CQJDBCWorkspaceDataContainer">
+            <properties>
+              <property name="source-name" value="${gatein.jcr.datasource.name}${container.name.suffix}"/>
+              <property name="dialect" value="${gatein.jcr.datasource.dialect}"/>
+              <property name="multi-db" value="false"/>
+              <property name="update-storage" value="true"/>
+              <property name="max-buffer-size" value="200k"/>
+              <property name="swap-directory" value="${gatein.jcr.data.dir}/swap/bookstore${container.name.suffix}"/>
+            </properties>
+            <value-storages>
+              <value-storage id="bookstore" class="org.exoplatform.services.jcr.impl.storage.value.fs.TreeFileValueStorage">
+                <properties>
+                  <property name="path" value="${gatein.jcr.storage.data.dir}/bookstore${container.name.suffix}"/>
+                </properties>
+                <filters>
+                  <filter property-type="Binary"/>
+                </filters>
+              </value-storage>
+            </value-storages>
+          </container>
+          <initializer class="org.exoplatform.services.jcr.impl.core.ScratchWorkspaceInitializer">
+            <properties>
+              <property name="root-nodetype" value="nt:unstructured"/>
+              <property name="root-permissions" value="any read;*:/platform/administrators read;*:/platform/administrators add_node;*:/platform/administrators set_property;*:/platform/administrators remove"/>
+            </properties>
+          </initializer>
+          <cache enabled="true" class="org.exoplatform.services.jcr.impl.dataflow.persistent.jbosscache.JBossCacheWorkspaceStorageCache">
+            <properties>
+              <property name="jbosscache-configuration" value="${gatein.jcr.cache.config}" />
+              <property name="jgroups-configuration" value="${gatein.jcr.jgroups.config}" />
+              <property name="jbosscache-cluster-name" value="jcr-cache${container.name.suffix}" />
+              <property name="jbosscache-shareable" value="true" />
+              <property name="jbosscache-expiration-time" value="${gatein.jcr.cache.expiration.time}" />
+            </properties>
+          </cache>
+          <query-handler class="org.exoplatform.services.jcr.impl.core.query.lucene.SearchIndex">
+            <properties>
+              <property name="index-dir" value="${gatein.jcr.index.data.dir}/bookstore${container.name.suffix}"/>
+              <property name="changesfilter-class" value="${gatein.jcr.index.changefilterclass}" />
+              <property name="jbosscache-configuration" value="${gatein.jcr.index.cache.config}" />
+              <property name="jgroups-configuration" value="${gatein.jcr.jgroups.config}" />
+              <property name="jbosscache-cluster-name" value="jcr-indexer${container.name.suffix}" />
+              <property name="jbosscache-shareable" value="true" />
+              <property name="max-volatile-time" value="60" />
+            </properties>
+          </query-handler>
+          
+          <lock-manager class="org.exoplatform.services.jcr.impl.core.lock.jbosscache.CacheableLockManagerImpl">
+            <properties>
+              <property name="time-out" value="15m" />
+              <property name="jbosscache-configuration" value="${gatein.jcr.lock.cache.config}" />
+              <property name="jgroups-configuration" value="${gatein.jcr.jgroups.config}" />
+              <property name="jbosscache-cluster-name" value="jcr-lock${container.name.suffix}" />
+              <property name="jbosscache-shareable" value="true" />
+              <property name="jbosscache-cl-cache.jdbc.table.name" value="jcrlocks" />
+              <property name="jbosscache-cl-cache.jdbc.table.create" value="true" />
+              <property name="jbosscache-cl-cache.jdbc.table.drop" value="false" />
+              <property name="jbosscache-cl-cache.jdbc.table.primarykey" value="pk" />
+              <property name="jbosscache-cl-cache.jdbc.fqn.column" value="fqn" />
+              <property name="jbosscache-cl-cache.jdbc.node.column" value="node" />
+              <property name="jbosscache-cl-cache.jdbc.parent.column" value="parent" />
+              <property name="jbosscache-cl-cache.jdbc.datasource" value="${gatein.jcr.datasource.name}${container.name.suffix}" />
+            </properties>
+          </lock-manager>
+
+        </workspace>
+      </workspaces>
+    </repository>
+  </repositories>
+</repository-service>
diff --git a/target/classes/exoplatform/BookNodeTypes.class b/target/classes/exoplatform/BookNodeTypes.class
new file mode 100644
index 0000000..97e72a8
Binary files /dev/null and b/target/classes/exoplatform/BookNodeTypes.class differ
diff --git a/target/classes/exoplatform/BookStoreService.class b/target/classes/exoplatform/BookStoreService.class
new file mode 100644
index 0000000..04e4b93
Binary files /dev/null and b/target/classes/exoplatform/BookStoreService.class differ
diff --git a/target/classes/exoplatform/JCRDataStorage.class b/target/classes/exoplatform/JCRDataStorage.class
new file mode 100644
index 0000000..879d1a5
Binary files /dev/null and b/target/classes/exoplatform/JCRDataStorage.class differ
diff --git a/target/classes/exoplatform/entity/Author.class b/target/classes/exoplatform/entity/Author.class
new file mode 100644
index 0000000..228c835
Binary files /dev/null and b/target/classes/exoplatform/entity/Author.class differ
diff --git a/target/classes/exoplatform/entity/Book$CATEGORY.class b/target/classes/exoplatform/entity/Book$CATEGORY.class
new file mode 100644
index 0000000..d1d2df1
Binary files /dev/null and b/target/classes/exoplatform/entity/Book$CATEGORY.class differ
diff --git a/target/classes/exoplatform/entity/Book.class b/target/classes/exoplatform/entity/Book.class
new file mode 100644
index 0000000..405876d
Binary files /dev/null and b/target/classes/exoplatform/entity/Book.class differ
diff --git a/target/classes/exoplatform/exception/BookNotFoundException.class b/target/classes/exoplatform/exception/BookNotFoundException.class
new file mode 100644
index 0000000..7734ac4
Binary files /dev/null and b/target/classes/exoplatform/exception/BookNotFoundException.class differ
diff --git a/target/classes/exoplatform/exception/DuplicateBookException.class b/target/classes/exoplatform/exception/DuplicateBookException.class
new file mode 100644
index 0000000..a3a5435
Binary files /dev/null and b/target/classes/exoplatform/exception/DuplicateBookException.class differ
diff --git a/target/classes/exoplatform/utils/PropertyReader.class b/target/classes/exoplatform/utils/PropertyReader.class
new file mode 100644
index 0000000..0aaf2d2
Binary files /dev/null and b/target/classes/exoplatform/utils/PropertyReader.class differ
diff --git a/target/classes/exoplatform/utils/Utils.class b/target/classes/exoplatform/utils/Utils.class
new file mode 100644
index 0000000..1ebaaf7
Binary files /dev/null and b/target/classes/exoplatform/utils/Utils.class differ
diff --git a/target/jcr-exo-1.0-SNAPSHOT.jar b/target/jcr-exo-1.0-SNAPSHOT.jar
new file mode 100644
index 0000000..4da898f
Binary files /dev/null and b/target/jcr-exo-1.0-SNAPSHOT.jar differ
diff --git a/target/maven-archiver/pom.properties b/target/maven-archiver/pom.properties
new file mode 100644
index 0000000..9c401b4
--- /dev/null
+++ b/target/maven-archiver/pom.properties
@@ -0,0 +1,5 @@
+#Generated by Maven
+#Fri Jul 13 14:57:28 ICT 2012
+version=1.0-SNAPSHOT
+groupId=exoplatform
+artifactId=jcr-exo
diff --git a/target/surefire-reports/TEST-exoplatform.AppTest.xml b/target/surefire-reports/TEST-exoplatform.AppTest.xml
new file mode 100644
index 0000000..f731d34
--- /dev/null
+++ b/target/surefire-reports/TEST-exoplatform.AppTest.xml
@@ -0,0 +1,62 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+<testsuite failures="0" time="0.013" errors="0" skipped="0" tests="1" name="exoplatform.AppTest">
+  <properties>
+    <property name="java.runtime.name" value="Java(TM) SE Runtime Environment"/>
+    <property name="sun.boot.library.path" value="/home/binhnv/java/jdk1.6/jre/lib/amd64"/>
+    <property name="java.vm.version" value="20.2-b06"/>
+    <property name="java.vm.vendor" value="Sun Microsystems Inc."/>
+    <property name="java.vendor.url" value="http://java.sun.com/"/>
+    <property name="path.separator" value=":"/>
+    <property name="guice.disable.misplaced.annotation.check" value="true"/>
+    <property name="java.vm.name" value="Java HotSpot(TM) 64-Bit Server VM"/>
+    <property name="file.encoding.pkg" value="sun.io"/>
+    <property name="user.country" value="US"/>
+    <property name="sun.java.launcher" value="SUN_STANDARD"/>
+    <property name="sun.os.patch.level" value="unknown"/>
+    <property name="java.vm.specification.name" value="Java Virtual Machine Specification"/>
+    <property name="user.dir" value="/home/binhnv/java/jcr-exo"/>
+    <property name="java.runtime.version" value="1.6.0_27-b07"/>
+    <property name="java.awt.graphicsenv" value="sun.awt.X11GraphicsEnvironment"/>
+    <property name="java.endorsed.dirs" value="/home/binhnv/java/jdk1.6/jre/lib/endorsed"/>
+    <property name="os.arch" value="amd64"/>
+    <property name="java.io.tmpdir" value="/tmp"/>
+    <property name="line.separator" value="
+"/>
+    <property name="java.vm.specification.vendor" value="Sun Microsystems Inc."/>
+    <property name="os.name" value="Linux"/>
+    <property name="classworlds.conf" value="/home/binhnv/java/apache-maven-3.0.4/bin/m2.conf"/>
+    <property name="sun.jnu.encoding" value="UTF-8"/>
+    <property name="java.library.path" value="/home/binhnv/java/jdk1.6/jre/lib/amd64/server:/home/binhnv/java/jdk1.6/jre/lib/amd64:/home/binhnv/java/jdk1.6/jre/../lib/amd64:/usr/java/packages/lib/amd64:/usr/lib64:/lib64:/lib:/usr/lib"/>
+    <property name="java.specification.name" value="Java Platform API Specification"/>
+    <property name="java.class.version" value="50.0"/>
+    <property name="sun.management.compiler" value="HotSpot 64-Bit Tiered Compilers"/>
+    <property name="os.version" value="3.2.0-23-generic"/>
+    <property name="user.home" value="/home/binhnv"/>
+    <property name="user.timezone" value="Asia/Ho_Chi_Minh"/>
+    <property name="java.awt.printerjob" value="sun.print.PSPrinterJob"/>
+    <property name="file.encoding" value="UTF-8"/>
+    <property name="java.specification.version" value="1.6"/>
+    <property name="user.name" value="binhnv"/>
+    <property name="java.class.path" value="/home/binhnv/java/apache-maven-3.0.4/boot/plexus-classworlds-2.4.jar"/>
+    <property name="java.vm.specification.version" value="1.0"/>
+    <property name="sun.arch.data.model" value="64"/>
+    <property name="java.home" value="/home/binhnv/java/jdk1.6/jre"/>
+    <property name="sun.java.command" value="org.codehaus.plexus.classworlds.launcher.Launcher clean install"/>
+    <property name="java.specification.vendor" value="Sun Microsystems Inc."/>
+    <property name="user.language" value="en"/>
+    <property name="java.vm.info" value="mixed mode"/>
+    <property name="java.version" value="1.6.0_27"/>
+    <property name="java.ext.dirs" value="/home/binhnv/java/jdk1.6/jre/lib/ext:/usr/java/packages/lib/ext"/>
+    <property name="securerandom.source" value="file:/dev/./urandom"/>
+    <property name="sun.boot.class.path" value="/home/binhnv/java/jdk1.6/jre/lib/resources.jar:/home/binhnv/java/jdk1.6/jre/lib/rt.jar:/home/binhnv/java/jdk1.6/jre/lib/sunrsasign.jar:/home/binhnv/java/jdk1.6/jre/lib/jsse.jar:/home/binhnv/java/jdk1.6/jre/lib/jce.jar:/home/binhnv/java/jdk1.6/jre/lib/charsets.jar:/home/binhnv/java/jdk1.6/jre/lib/modules/jdk.boot.jar:/home/binhnv/java/jdk1.6/jre/classes"/>
+    <property name="java.vendor" value="Sun Microsystems Inc."/>
+    <property name="maven.home" value="/home/binhnv/java/apache-maven-3.0.4"/>
+    <property name="file.separator" value="/"/>
+    <property name="java.vendor.url.bug" value="http://java.sun.com/cgi-bin/bugreport.cgi"/>
+    <property name="sun.cpu.endian" value="little"/>
+    <property name="sun.io.unicode.encoding" value="UnicodeLittle"/>
+    <property name="sun.desktop" value="gnome"/>
+    <property name="sun.cpu.isalist" value=""/>
+  </properties>
+  <testcase time="0.002" classname="exoplatform.AppTest" name="testApp"/>
+</testsuite>
\ No newline at end of file
diff --git a/target/surefire-reports/exoplatform.AppTest.txt b/target/surefire-reports/exoplatform.AppTest.txt
new file mode 100644
index 0000000..87ea500
--- /dev/null
+++ b/target/surefire-reports/exoplatform.AppTest.txt
@@ -0,0 +1,4 @@
+-------------------------------------------------------------------------------
+Test set: exoplatform.AppTest
+-------------------------------------------------------------------------------
+Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.013 sec
diff --git a/target/test-classes/exoplatform/AppTest.class b/target/test-classes/exoplatform/AppTest.class
new file mode 100644
index 0000000..5788b9e
Binary files /dev/null and b/target/test-classes/exoplatform/AppTest.class differ
